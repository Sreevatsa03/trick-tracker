import React from 'react';
import { RecordWebcamOptions, Recorder } from '../types';
import { CAMERA_STATUS } from '../constants';
declare type RenderControlsArgs = {
    openCamera: () => void;
    closeCamera: () => void;
    start: () => void;
    stop: () => void;
    retake: () => void;
    download: () => void;
    getRecording: () => void;
    status: string;
};
declare type RecordWebcamProps = {
    cssNamespace?: string;
    downloadFileName?: string;
    options?: RecordWebcamOptions;
    getStatus?(status: string): void;
    render?({}: RenderControlsArgs): void;
    controlLabels?: {
        CLOSE: string | number;
        DOWNLOAD: string | number;
        OPEN: string | number;
        RETAKE: string | number;
        START: string | number;
        STOP: string | number;
    };
};
declare type RecordWebcamState = {
    status: keyof typeof CAMERA_STATUS;
};
export declare class RecordWebcam extends React.PureComponent<RecordWebcamProps, RecordWebcamState> {
    constructor(props: RecordWebcamProps);
    state: {
        status: "CLOSED";
    };
    recorder: Recorder;
    recorderOptions: {
        mimeType: string;
        width: number;
        height: number;
        aspectRatio: number;
        isNewSize: boolean;
        type: "video";
        mute?: boolean | undefined;
        disableLogs?: boolean | undefined;
    };
    webcamRef: React.RefObject<HTMLVideoElement>;
    previewRef: React.RefObject<HTMLVideoElement>;
    static defaultProps: {
        cssNamespace: "react-record-webcam";
    };
    componentDidUpdate(_: RecordWebcamProps, prevState: RecordWebcamState): void;
    openCamera(): Promise<void>;
    closeCamera(): void;
    handleCloseCamera(): void;
    handleError(error: Error): void;
    handleOpenCamera(): Promise<void>;
    handleStartRecording(): Promise<void>;
    handleStopRecording(): Promise<void>;
    handleRetakeRecording(): Promise<void>;
    download(): Promise<void>;
    getRecording(): Promise<Blob | undefined>;
    render(): JSX.Element;
}
export {};
