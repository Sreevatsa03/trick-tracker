"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.RecordWebcam = void 0;
var react_1 = __importDefault(require("react"));
var Video_1 = require("./Video");
var Controls_1 = require("./Controls");
var mediaRecorder_1 = require("../mediaRecorder");
var utils_1 = require("../utils");
var constants_1 = require("../constants");
var RecordWebcam = /** @class */ (function (_super) {
    __extends(RecordWebcam, _super);
    function RecordWebcam(props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        var _this = _super.call(this, props) || this;
        _this.state = {
            status: constants_1.CAMERA_STATUS.CLOSED
        };
        _this.recorderOptions = __assign(__assign({}, constants_1.RECORDER_OPTIONS), {
            mimeType: "video/" + (((_a = _this.props.options) === null || _a === void 0 ? void 0 : _a.fileType) || 'mp4') + ";codecs=" + (((_c = (_b = _this.props.options) === null || _b === void 0 ? void 0 : _b.codec) === null || _c === void 0 ? void 0 : _c.video) ||
                ((_d = _this.props.options) === null || _d === void 0 ? void 0 : _d.fileType) === 'webm'
                ? 'vp8'
                : 'avc') + "," + (((_f = (_e = _this.props.options) === null || _e === void 0 ? void 0 : _e.codec) === null || _f === void 0 ? void 0 : _f.audio) ||
                ((_g = _this.props.options) === null || _g === void 0 ? void 0 : _g.fileType) === 'webm'
                ? 'opus'
                : 'aac'),
            width: ((_h = _this.props.options) === null || _h === void 0 ? void 0 : _h.width) || constants_1.RECORDER_OPTIONS.width,
            height: ((_j = _this.props.options) === null || _j === void 0 ? void 0 : _j.height) || constants_1.RECORDER_OPTIONS.height,
            aspectRatio: ((_k = _this.props.options) === null || _k === void 0 ? void 0 : _k.aspectRatio) || constants_1.RECORDER_OPTIONS.aspectRatio,
            isNewSize: Boolean(((_l = _this.props.options) === null || _l === void 0 ? void 0 : _l.width) || ((_m = _this.props.options) === null || _m === void 0 ? void 0 : _m.height))
        });
        _this.webcamRef = react_1["default"].createRef();
        _this.previewRef = react_1["default"].createRef();
        _this.closeCamera = _this.closeCamera.bind(_this);
        _this.download = _this.download.bind(_this);
        _this.getRecording = _this.getRecording.bind(_this);
        _this.handleOpenCamera = _this.handleOpenCamera.bind(_this);
        _this.handleError = _this.handleError.bind(_this);
        _this.handleCloseCamera = _this.handleCloseCamera.bind(_this);
        _this.handleRetakeRecording = _this.handleRetakeRecording.bind(_this);
        _this.handleStartRecording = _this.handleStartRecording.bind(_this);
        _this.handleStopRecording = _this.handleStopRecording.bind(_this);
        _this.openCamera = _this.openCamera.bind(_this);
        return _this;
    }
    RecordWebcam.prototype.componentDidUpdate = function (_, prevState) {
        if (this.state.status !== prevState.status) {
            if (this.props.getStatus)
                this.props.getStatus(this.state.status);
        }
    };
    RecordWebcam.prototype.openCamera = function () {
        return __awaiter(this, void 0, void 0, function () {
            var recorderInit;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mediaRecorder_1.mediaRecorder(this.recorderOptions)];
                    case 1:
                        recorderInit = _a.sent();
                        this.recorder = recorderInit;
                        if (this.webcamRef.current) {
                            this.webcamRef.current.srcObject = recorderInit.stream;
                        }
                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 1700); })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RecordWebcam.prototype.closeCamera = function () {
        if (this.recorder.stream.id)
            this.recorder.stream.stop();
    };
    RecordWebcam.prototype.handleCloseCamera = function () {
        if (this.previewRef.current) {
            this.previewRef.current.removeAttribute('src');
            this.previewRef.current.load();
        }
        this.setState({ status: constants_1.CAMERA_STATUS.CLOSED });
        this.closeCamera();
    };
    RecordWebcam.prototype.handleError = function (error) {
        this.setState({
            status: constants_1.CAMERA_STATUS.ERROR
        });
        console.error({ error: error });
    };
    RecordWebcam.prototype.handleOpenCamera = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.setState({
                            status: constants_1.CAMERA_STATUS.INIT
                        });
                        return [4 /*yield*/, this.openCamera()];
                    case 1:
                        _a.sent();
                        this.setState({
                            status: constants_1.CAMERA_STATUS.OPEN
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        this.handleError(error_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RecordWebcam.prototype.handleStartRecording = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var length_1, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, , 6]);
                        return [4 /*yield*/, this.recorder.startRecording()];
                    case 1:
                        _b.sent();
                        this.setState({
                            status: constants_1.CAMERA_STATUS.RECORDING
                        });
                        if (!((_a = this.props.options) === null || _a === void 0 ? void 0 : _a.recordingLength)) return [3 /*break*/, 4];
                        length_1 = this.props.options.recordingLength * 1000;
                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, length_1); })];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, this.handleStopRecording()];
                    case 3:
                        _b.sent();
                        this.closeCamera();
                        _b.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        error_2 = _b.sent();
                        this.handleError(error_2);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    RecordWebcam.prototype.handleStopRecording = function () {
        return __awaiter(this, void 0, void 0, function () {
            var blob, preview, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.recorder.stopRecording()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.recorder.getBlob()];
                    case 2:
                        blob = _a.sent();
                        preview = window.URL.createObjectURL(blob);
                        if (this.previewRef.current) {
                            this.previewRef.current.src = preview;
                        }
                        this.closeCamera();
                        this.setState({
                            status: constants_1.CAMERA_STATUS.PREVIEW
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        error_3 = _a.sent();
                        this.handleError(error_3);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    RecordWebcam.prototype.handleRetakeRecording = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.handleOpenCamera()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_4 = _a.sent();
                        this.handleError(error_4);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RecordWebcam.prototype.download = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var blob, filename, error_5;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.recorder.getBlob()];
                    case 1:
                        blob = _c.sent();
                        filename = (((_a = this.props.options) === null || _a === void 0 ? void 0 : _a.filename) || new Date().getTime()) + "." + (((_b = this.props.options) === null || _b === void 0 ? void 0 : _b.fileType) || 'mp4');
                        utils_1.saveFile(filename, blob);
                        return [3 /*break*/, 3];
                    case 2:
                        error_5 = _c.sent();
                        this.handleError(error_5);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RecordWebcam.prototype.getRecording = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var error_6;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, ((_a = this.recorder) === null || _a === void 0 ? void 0 : _a.getBlob())];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        error_6 = _b.sent();
                        this.handleError(error_6);
                        return [2 /*return*/];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RecordWebcam.prototype.render = function () {
        var _a, _b;
        return (react_1["default"].createElement(react_1["default"].Fragment, null,
            react_1["default"].createElement("style", null, "\n            ." + this.props.cssNamespace + "__wrapper {\n              display: -webkit-box;\n              display: -ms-flexbox;\n              display: flex;\n              -webkit-box-orient: vertical;\n              -webkit-box-direction: normal;\n              -ms-flex-flow: column nowrap;\n                      flex-flow: column nowrap;\n              -webkit-box-pack: justify;\n              -ms-flex-pack: justify;\n                      justify-content: space-between;\n            }\n            ." + this.props.cssNamespace + "__status {\n              margin: 1rem 0;\n            }\n          "),
            react_1["default"].createElement("div", { className: this.props.cssNamespace + "__wrapper" }, (_b = (_a = this.props) === null || _a === void 0 ? void 0 : _a.render) === null || _b === void 0 ? void 0 :
                _b.call(_a, {
                    openCamera: this.handleOpenCamera,
                    closeCamera: this.handleCloseCamera,
                    start: this.handleStartRecording,
                    stop: this.handleStopRecording,
                    retake: this.handleRetakeRecording,
                    download: this.download,
                    getRecording: this.getRecording,
                    status: this.state.status
                }),
                !this.props.render && (react_1["default"].createElement("div", { className: this.props.cssNamespace + "__status" }, "Status: " + this.state.status)),
                !this.props.render && (react_1["default"].createElement(Controls_1.Controls, { closeCamera: this.handleCloseCamera, cssNamespace: this.props.cssNamespace, download: this.download, getRecording: this.getRecording, labels: this.props.controlLabels, openCamera: this.handleOpenCamera, retake: this.handleRetakeRecording, start: this.handleStartRecording, status: this.state.status, stop: this.handleStopRecording })),
                react_1["default"].createElement(Video_1.Video, { cssNamespace: this.props.cssNamespace, style: {
                        display: "" + (this.state.status !== constants_1.CAMERA_STATUS.CLOSED &&
                            (this.state.status === constants_1.CAMERA_STATUS.OPEN ||
                                this.state.status === constants_1.CAMERA_STATUS.RECORDING)
                            ? 'block'
                            : 'none')
                    }, autoPlay: true, muted: true, loop: true, ref: this.webcamRef }),
                react_1["default"].createElement(Video_1.Video, { cssNamespace: this.props.cssNamespace, style: {
                        display: "" + (this.state.status !== constants_1.CAMERA_STATUS.CLOSED &&
                            this.state.status === constants_1.CAMERA_STATUS.PREVIEW
                            ? 'block'
                            : 'none')
                    }, autoPlay: true, muted: true, loop: true, ref: this.previewRef }))));
    };
    RecordWebcam.defaultProps = {
        cssNamespace: constants_1.NAMESPACES.CSS
    };
    return RecordWebcam;
}(react_1["default"].PureComponent));
exports.RecordWebcam = RecordWebcam;
