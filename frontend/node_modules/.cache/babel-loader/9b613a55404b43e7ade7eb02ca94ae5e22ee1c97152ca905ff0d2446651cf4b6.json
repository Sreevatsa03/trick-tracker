{"ast":null,"code":"var _jsxFileName = \"/Users/ruchireddy/trick-tracker/frontend/src/components/TrickDetected.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport React from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrickDetected = () => {\n  _s();\n  const [trick, setTrick] = useState(0);\n  const [conf, setConf] = useState(0);\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    // Make a GET request to the Flask API\n    axios.get(`http://127.0.0.1:8000/trick`).then(response => {\n      // Assuming the response is an object with 'Prediction' and 'Accuracy' properties\n      setTrick(response.data.Prediction);\n      setConf(response.data.Accuracy);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, [trick, conf]);\n\n  //   fetch(`/trick?Accuracy=${conf}&Prediction=${trick}`)\n  //     .then((response) => {\n  //       if (!response.ok) {\n  //         throw new Error('Network response was not ok');\n  //       }\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       // Assuming the response is an object with 'Prediction' and 'Accuracy' properties\n  //       setTrick(data.Prediction);\n  //       setConf(data.Accuracy);\n  //     })\n  //     .catch((error) => {\n  //       console.error('Error fetching data:', error);\n  //     });\n  // }, [trick, conf]);\n\n  console.log(data);\n  setTrick(data[\"Prediction\"]);\n  setConf(data[\"Accuracy\"]);\n  if (true) {\n    let percent = conf;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [trick, \" detected with \", percent, \" accuracy!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this);\n  }\n};\n_s(TrickDetected, \"mXXxZzBMLCMtCVPGc2Y9941oDO0=\");\n_c = TrickDetected;\nexport default TrickDetected;\nvar _c;\n$RefreshReg$(_c, \"TrickDetected\");","map":{"version":3,"names":["useState","useEffect","React","axios","jsxDEV","_jsxDEV","TrickDetected","_s","trick","setTrick","conf","setConf","data","setData","get","then","response","Prediction","Accuracy","catch","error","console","log","percent","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ruchireddy/trick-tracker/frontend/src/components/TrickDetected.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport React from 'react';\nimport axios from 'axios';\n\n\nconst TrickDetected = () => {\n\n    const [trick, setTrick] = useState(0);\n    const [conf, setConf] = useState(0);\n\n    const [data, setData] = useState(0);\n\n    useEffect(() => {\n      // Make a GET request to the Flask API\n      axios.get(`http://127.0.0.1:8000/trick`)\n        .then((response) => {\n          // Assuming the response is an object with 'Prediction' and 'Accuracy' properties\n          setTrick(response.data.Prediction);\n          setConf(response.data.Accuracy);\n        })\n        .catch((error) => {\n          console.error('Error fetching data:', error);\n        });\n    }, [trick, conf]);\n\n    //   fetch(`/trick?Accuracy=${conf}&Prediction=${trick}`)\n    //     .then((response) => {\n    //       if (!response.ok) {\n    //         throw new Error('Network response was not ok');\n    //       }\n    //       return response.json();\n    //     })\n    //     .then((data) => {\n    //       // Assuming the response is an object with 'Prediction' and 'Accuracy' properties\n    //       setTrick(data.Prediction);\n    //       setConf(data.Accuracy);\n    //     })\n    //     .catch((error) => {\n    //       console.error('Error fetching data:', error);\n    //     });\n    // }, [trick, conf]);\n\n    console.log(data);\n\n    setTrick(data[\"Prediction\"]);\n    setConf(data[\"Accuracy\"]);\n    if (true) {\n      let percent = conf\n      return (\n          <div>\n            <h2>{trick} detected with {percent} accuracy!</h2>\n          </div>\n        );\n    } else {\n        return (<div></div>);\n    }\n\n  \n};\n\nexport default TrickDetected;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAExB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAEnC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACd;IACAE,KAAK,CAACW,GAAG,CAAE,6BAA4B,CAAC,CACrCC,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACAP,QAAQ,CAACO,QAAQ,CAACJ,IAAI,CAACK,UAAU,CAAC;MAClCN,OAAO,CAACK,QAAQ,CAACJ,IAAI,CAACM,QAAQ,CAAC;IACjC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,CAACZ,KAAK,EAAEE,IAAI,CAAC,CAAC;;EAEjB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAW,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;EAEjBH,QAAQ,CAACG,IAAI,CAAC,YAAY,CAAC,CAAC;EAC5BD,OAAO,CAACC,IAAI,CAAC,UAAU,CAAC,CAAC;EACzB,IAAI,IAAI,EAAE;IACR,IAAIW,OAAO,GAAGb,IAAI;IAClB,oBACIL,OAAA;MAAAmB,QAAA,eACEnB,OAAA;QAAAmB,QAAA,GAAKhB,KAAK,EAAC,iBAAe,EAACe,OAAO,EAAC,YAAU;MAAA;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC;EAEZ,CAAC,MAAM;IACH,oBAAQvB,OAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU,CAAC;EACvB;AAGJ,CAAC;AAACrB,EAAA,CArDID,aAAa;AAAAuB,EAAA,GAAbvB,aAAa;AAuDnB,eAAeA,aAAa;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}