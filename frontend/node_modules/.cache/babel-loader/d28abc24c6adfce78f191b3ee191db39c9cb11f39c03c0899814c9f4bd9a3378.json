{"ast":null,"code":"'use strict';\n\n// Last time updated: 2021-03-09 3:20:22 AM UTC\n\n// ________________\n// RecordRTC v5.6.2\n\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\n\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\n// ____________\n// RecordRTC.js\n\n/**\r\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \r\n * @summary Record audio, video or screen inside the browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTC\r\n * @class\r\n * @example\r\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\r\n *     type: 'video', // audio or video or gif or canvas\r\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\r\n * });\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\r\n */\nfunction RecordRTC(mediaStream, config) {\n  if (!mediaStream) {\n    throw 'First parameter is required.';\n  }\n  config = config || {\n    type: 'video'\n  };\n  config = new RecordRTCConfiguration(mediaStream, config);\n\n  // a reference to user's recordRTC object\n  var self = this;\n  function startRecording(config2) {\n    if (!config.disableLogs) {\n      console.log('RecordRTC version: ', self.version);\n    }\n    if (!!config2) {\n      // allow users to set options using startRecording method\n      // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\n      config = new RecordRTCConfiguration(mediaStream, config2);\n    }\n    if (!config.disableLogs) {\n      console.log('started recording ' + config.type + ' stream.');\n    }\n    if (mediaRecorder) {\n      mediaRecorder.clearRecordedData();\n      mediaRecorder.record();\n      setState('recording');\n      if (self.recordingDuration) {\n        handleRecordingDuration();\n      }\n      return self;\n    }\n    initRecorder(function () {\n      if (self.recordingDuration) {\n        handleRecordingDuration();\n      }\n    });\n    return self;\n  }\n  function initRecorder(initCallback) {\n    if (initCallback) {\n      config.initCallback = function () {\n        initCallback();\n        initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\n      };\n    }\n\n    var Recorder = new GetRecorderType(mediaStream, config);\n    mediaRecorder = new Recorder(mediaStream, config);\n    mediaRecorder.record();\n    setState('recording');\n    if (!config.disableLogs) {\n      console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\n    }\n  }\n  function stopRecording(callback) {\n    callback = callback || function () {};\n    if (!mediaRecorder) {\n      warningLog();\n      return;\n    }\n    if (self.state === 'paused') {\n      self.resumeRecording();\n      setTimeout(function () {\n        stopRecording(callback);\n      }, 1);\n      return;\n    }\n    if (self.state !== 'recording' && !config.disableLogs) {\n      console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\n    }\n    if (!config.disableLogs) {\n      console.log('Stopped recording ' + config.type + ' stream.');\n    }\n    if (config.type !== 'gif') {\n      mediaRecorder.stop(_callback);\n    } else {\n      mediaRecorder.stop();\n      _callback();\n    }\n    setState('stopped');\n    function _callback(__blob) {\n      if (!mediaRecorder) {\n        if (typeof callback.call === 'function') {\n          callback.call(self, '');\n        } else {\n          callback('');\n        }\n        return;\n      }\n      Object.keys(mediaRecorder).forEach(function (key) {\n        if (typeof mediaRecorder[key] === 'function') {\n          return;\n        }\n        self[key] = mediaRecorder[key];\n      });\n      var blob = mediaRecorder.blob;\n      if (!blob) {\n        if (__blob) {\n          mediaRecorder.blob = blob = __blob;\n        } else {\n          throw 'Recording failed.';\n        }\n      }\n      if (blob && !config.disableLogs) {\n        console.log(blob.type, '->', bytesToSize(blob.size));\n      }\n      if (callback) {\n        var url;\n        try {\n          url = URL.createObjectURL(blob);\n        } catch (e) {}\n        if (typeof callback.call === 'function') {\n          callback.call(self, url);\n        } else {\n          callback(url);\n        }\n      }\n      if (!config.autoWriteToDisk) {\n        return;\n      }\n      getDataURL(function (dataURL) {\n        var parameter = {};\n        parameter[config.type + 'Blob'] = dataURL;\n        DiskStorage.Store(parameter);\n      });\n    }\n  }\n  function pauseRecording() {\n    if (!mediaRecorder) {\n      warningLog();\n      return;\n    }\n    if (self.state !== 'recording') {\n      if (!config.disableLogs) {\n        console.warn('Unable to pause the recording. Recording state: ', self.state);\n      }\n      return;\n    }\n    setState('paused');\n    mediaRecorder.pause();\n    if (!config.disableLogs) {\n      console.log('Paused recording.');\n    }\n  }\n  function resumeRecording() {\n    if (!mediaRecorder) {\n      warningLog();\n      return;\n    }\n    if (self.state !== 'paused') {\n      if (!config.disableLogs) {\n        console.warn('Unable to resume the recording. Recording state: ', self.state);\n      }\n      return;\n    }\n    setState('recording');\n\n    // not all libs have this method yet\n    mediaRecorder.resume();\n    if (!config.disableLogs) {\n      console.log('Resumed recording.');\n    }\n  }\n  function readFile(_blob) {\n    postMessage(new FileReaderSync().readAsDataURL(_blob));\n  }\n  function getDataURL(callback, _mediaRecorder) {\n    if (!callback) {\n      throw 'Pass a callback function over getDataURL.';\n    }\n    var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\n    if (!blob) {\n      if (!config.disableLogs) {\n        console.warn('Blob encoder did not finish its job yet.');\n      }\n      setTimeout(function () {\n        getDataURL(callback, _mediaRecorder);\n      }, 1000);\n      return;\n    }\n    if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\n      var webWorker = processInWebWorker(readFile);\n      webWorker.onmessage = function (event) {\n        callback(event.data);\n      };\n      webWorker.postMessage(blob);\n    } else {\n      var reader = new FileReader();\n      reader.readAsDataURL(blob);\n      reader.onload = function (event) {\n        callback(event.target.result);\n      };\n    }\n    function processInWebWorker(_function) {\n      try {\n        var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n          type: 'application/javascript'\n        }));\n        var worker = new Worker(blob);\n        URL.revokeObjectURL(blob);\n        return worker;\n      } catch (e) {}\n    }\n  }\n  function handleRecordingDuration(counter) {\n    counter = counter || 0;\n    if (self.state === 'paused') {\n      setTimeout(function () {\n        handleRecordingDuration(counter);\n      }, 1000);\n      return;\n    }\n    if (self.state === 'stopped') {\n      return;\n    }\n    if (counter >= self.recordingDuration) {\n      stopRecording(self.onRecordingStopped);\n      return;\n    }\n    counter += 1000; // 1-second\n\n    setTimeout(function () {\n      handleRecordingDuration(counter);\n    }, 1000);\n  }\n  function setState(state) {\n    if (!self) {\n      return;\n    }\n    self.state = state;\n    if (typeof self.onStateChanged.call === 'function') {\n      self.onStateChanged.call(self, state);\n    } else {\n      self.onStateChanged(state);\n    }\n  }\n  var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\n  function warningLog() {\n    if (config.disableLogs === true) {\n      return;\n    }\n    console.warn(WARNING);\n  }\n  var mediaRecorder;\n  var returnObject = {\n    /**\r\n     * This method starts the recording.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * var recorder = RecordRTC(mediaStream, {\r\n     *     type: 'video'\r\n     * });\r\n     * recorder.startRecording();\r\n     */\n    startRecording: startRecording,\n    /**\r\n     * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\r\n     * @param {function} callback - Callback to get the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     // use either \"this\" or \"recorder\" object; both are identical\r\n     *     video.src = this.toURL();\r\n     *     var blob = this.getBlob();\r\n     * });\r\n     */\n    stopRecording: stopRecording,\n    /**\r\n     * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @todo Firefox is unable to pause the recording. Fix it.\r\n     * @example\r\n     * recorder.pauseRecording();  // pause the recording\r\n     * recorder.resumeRecording(); // resume again\r\n     */\n    pauseRecording: pauseRecording,\n    /**\r\n     * This method resumes the recording.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.pauseRecording();  // first of all, pause the recording\r\n     * recorder.resumeRecording(); // now resume it\r\n     */\n    resumeRecording: resumeRecording,\n    /**\r\n     * This method initializes the recording.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @todo This method should be deprecated.\r\n     * @example\r\n     * recorder.initRecorder();\r\n     */\n    initRecorder: initRecorder,\n    /**\r\n     * Ask RecordRTC to auto-stop the recording after 5 minutes.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * var fiveMinutes = 5 * 1000 * 60;\r\n     * recorder.setRecordingDuration(fiveMinutes, function() {\r\n     *    var blob = this.getBlob();\r\n     *    video.src = this.toURL();\r\n     * });\r\n     * \r\n     * // or otherwise\r\n     * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\r\n     *    var blob = this.getBlob();\r\n     *    video.src = this.toURL();\r\n     * });\r\n     */\n    setRecordingDuration: function (recordingDuration, callback) {\n      if (typeof recordingDuration === 'undefined') {\n        throw 'recordingDuration is required.';\n      }\n      if (typeof recordingDuration !== 'number') {\n        throw 'recordingDuration must be a number.';\n      }\n      self.recordingDuration = recordingDuration;\n      self.onRecordingStopped = callback || function () {};\n      return {\n        onRecordingStopped: function (callback) {\n          self.onRecordingStopped = callback;\n        }\n      };\n    },\n    /**\r\n     * This method can be used to clear/reset all the recorded data.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\n    clearRecordedData: function () {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n      mediaRecorder.clearRecordedData();\n      if (!config.disableLogs) {\n        console.log('Cleared old recorded data.');\n      }\n    },\n    /**\r\n     * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     var blob = this.getBlob();\r\n     *\r\n     *     var file = new File([blob], 'filename.webm', {\r\n     *         type: 'video/webm'\r\n     *     });\r\n     *\r\n     *     var formData = new FormData();\r\n     *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\r\n     *     uploadToServer(formData);\r\n     * });\r\n     * @returns {Blob} Returns recorded data as \"Blob\" object.\r\n     */\n    getBlob: function () {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n      return mediaRecorder.blob;\n    },\n    /**\r\n     * Get data-URI instead of Blob.\r\n     * @param {function} callback - Callback to get the Data-URI.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     recorder.getDataURL(function(dataURI) {\r\n     *         video.src = dataURI;\r\n     *     });\r\n     * });\r\n     */\n    getDataURL: getDataURL,\n    /**\r\n     * Get virtual/temporary URL. Usage of this URL is limited to current tab.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     video.src = this.toURL();\r\n     * });\r\n     * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\r\n     */\n    toURL: function () {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n      return URL.createObjectURL(mediaRecorder.blob);\n    },\n    /**\r\n     * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * var internalRecorder = recorder.getInternalRecorder();\r\n     * if(internalRecorder instanceof MultiStreamRecorder) {\r\n     *     internalRecorder.addStreams([newAudioStream]);\r\n     *     internalRecorder.resetVideoStreams([screenStream]);\r\n     * }\r\n     * @returns {Object} Returns internal recording object.\r\n     */\n    getInternalRecorder: function () {\n      return mediaRecorder;\n    },\n    /**\r\n     * Invoke save-as dialog to save the recorded blob into your disk.\r\n     * @param {string} fileName - Set your own file name.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     this.save('file-name');\r\n     *\r\n     *     // or manually:\r\n     *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\r\n     * });\r\n     */\n    save: function (fileName) {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n      invokeSaveAsDialog(mediaRecorder.blob, fileName);\n    },\n    /**\r\n     * This method gets a blob from indexed-DB storage.\r\n     * @param {function} callback - Callback to get the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.getFromDisk(function(dataURL) {\r\n     *     video.src = dataURL;\r\n     * });\r\n     */\n    getFromDisk: function (callback) {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n      RecordRTC.getFromDisk(config.type, callback);\n    },\n    /**\r\n     * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\r\n     * @type {Array.<Array>}\r\n     * @param {Array} arrayOfWebPImages - Array of webp images.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @todo This method should be deprecated.\r\n     * @example\r\n     * var arrayOfWebPImages = [];\r\n     * arrayOfWebPImages.push({\r\n     *     duration: index,\r\n     *     image: 'data:image/webp;base64,...'\r\n     * });\r\n     * recorder.setAdvertisementArray(arrayOfWebPImages);\r\n     */\n    setAdvertisementArray: function (arrayOfWebPImages) {\n      config.advertisement = [];\n      var length = arrayOfWebPImages.length;\n      for (var i = 0; i < length; i++) {\n        config.advertisement.push({\n          duration: i,\n          image: arrayOfWebPImages[i]\n        });\n      }\n    },\n    /**\r\n     * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\r\n     * @property {Blob} blob - Recorded Blob can be accessed using this property.\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @readonly\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     var blob = this.blob;\r\n     *\r\n     *     // below one is recommended\r\n     *     var blob = this.getBlob();\r\n     * });\r\n     */\n    blob: null,\n    /**\r\n     * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n     * @property {number} bufferSize - Buffer-size used to encode the WAV container\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @readonly\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     alert('Recorder used this buffer-size: ' + this.bufferSize);\r\n     * });\r\n     */\n    bufferSize: 0,\n    /**\r\n     * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n     * @property {number} sampleRate - Sample-rates used to encode the WAV container\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @readonly\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     alert('Recorder used these sample-rates: ' + this.sampleRate);\r\n     * });\r\n     */\n    sampleRate: 0,\n    /**\r\n     * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\r\n     * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @readonly\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     var arrayBuffer = this.buffer;\r\n     *     alert(arrayBuffer.byteLength);\r\n     * });\r\n     */\n    buffer: null,\n    /**\r\n     * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.reset();\r\n     * recorder.startRecording();\r\n     */\n    reset: function () {\n      if (self.state === 'recording' && !config.disableLogs) {\n        console.warn('Stop an active recorder.');\n      }\n      if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\n        mediaRecorder.clearRecordedData();\n      }\n      mediaRecorder = null;\n      setState('inactive');\n      self.blob = null;\n    },\n    /**\r\n     * This method is called whenever recorder's state changes. Use this as an \"event\".\r\n     * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.onStateChanged = function(state) {\r\n     *     console.log('Recorder state: ', state);\r\n     * };\r\n     */\n    onStateChanged: function (state) {\n      if (!config.disableLogs) {\n        console.log('Recorder state changed:', state);\n      }\n    },\n    /**\r\n     * A recorder can have inactive, recording, paused or stopped states.\r\n     * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n     * @memberof RecordRTC\r\n     * @static\r\n     * @readonly\r\n     * @example\r\n     * // this looper function will keep you updated about the recorder's states.\r\n     * (function looper() {\r\n     *     document.querySelector('h1').innerHTML = 'Recorder\\'s state is: ' + recorder.state;\r\n     *     if(recorder.state === 'stopped') return; // ignore+stop\r\n     *     setTimeout(looper, 1000); // update after every 3-seconds\r\n     * })();\r\n     * recorder.startRecording();\r\n     */\n    state: 'inactive',\n    /**\r\n     * Get recorder's readonly state.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @example\r\n     * var state = recorder.getState();\r\n     * @returns {String} Returns recording state.\r\n     */\n    getState: function () {\n      return self.state;\n    },\n    /**\r\n     * Destroy RecordRTC instance. Clear all recorders and objects.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @example\r\n     * recorder.destroy();\r\n     */\n    destroy: function () {\n      var disableLogsCache = config.disableLogs;\n      config = {\n        disableLogs: true\n      };\n      self.reset();\n      setState('destroyed');\n      returnObject = self = null;\n      if (Storage.AudioContextConstructor) {\n        Storage.AudioContextConstructor.close();\n        Storage.AudioContextConstructor = null;\n      }\n      config.disableLogs = disableLogsCache;\n      if (!config.disableLogs) {\n        console.log('RecordRTC is destroyed.');\n      }\n    },\n    /**\r\n     * RecordRTC version number\r\n     * @property {String} version - Release version number.\r\n     * @memberof RecordRTC\r\n     * @static\r\n     * @readonly\r\n     * @example\r\n     * alert(recorder.version);\r\n     */\n    version: '5.6.2'\n  };\n  if (!this) {\n    self = returnObject;\n    return returnObject;\n  }\n\n  // if someone wants to use RecordRTC with the \"new\" keyword.\n  for (var prop in returnObject) {\n    this[prop] = returnObject[prop];\n  }\n  self = this;\n  return returnObject;\n}\nRecordRTC.version = '5.6.2';\nif (typeof module !== 'undefined' /* && !!module.exports*/) {\n  module.exports = RecordRTC;\n}\nif (typeof define === 'function' && define.amd) {\n  define('RecordRTC', [], function () {\n    return RecordRTC;\n  });\n}\nRecordRTC.getFromDisk = function (type, callback) {\n  if (!callback) {\n    throw 'callback is mandatory.';\n  }\n  console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\n  DiskStorage.Fetch(function (dataURL, _type) {\n    if (type !== 'all' && _type === type + 'Blob' && callback) {\n      callback(dataURL);\n    }\n    if (type === 'all' && callback) {\n      callback(dataURL, _type.replace('Blob', ''));\n    }\n  });\n};\n\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof RecordRTC\r\n * @example\r\n * RecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\nRecordRTC.writeToDisk = function (options) {\n  console.log('Writing recorded blob(s) to disk!');\n  options = options || {};\n  if (options.audio && options.video && options.gif) {\n    options.audio.getDataURL(function (audioDataURL) {\n      options.video.getDataURL(function (videoDataURL) {\n        options.gif.getDataURL(function (gifDataURL) {\n          DiskStorage.Store({\n            audioBlob: audioDataURL,\n            videoBlob: videoDataURL,\n            gifBlob: gifDataURL\n          });\n        });\n      });\n    });\n  } else if (options.audio && options.video) {\n    options.audio.getDataURL(function (audioDataURL) {\n      options.video.getDataURL(function (videoDataURL) {\n        DiskStorage.Store({\n          audioBlob: audioDataURL,\n          videoBlob: videoDataURL\n        });\n      });\n    });\n  } else if (options.audio && options.gif) {\n    options.audio.getDataURL(function (audioDataURL) {\n      options.gif.getDataURL(function (gifDataURL) {\n        DiskStorage.Store({\n          audioBlob: audioDataURL,\n          gifBlob: gifDataURL\n        });\n      });\n    });\n  } else if (options.video && options.gif) {\n    options.video.getDataURL(function (videoDataURL) {\n      options.gif.getDataURL(function (gifDataURL) {\n        DiskStorage.Store({\n          videoBlob: videoDataURL,\n          gifBlob: gifDataURL\n        });\n      });\n    });\n  } else if (options.audio) {\n    options.audio.getDataURL(function (audioDataURL) {\n      DiskStorage.Store({\n        audioBlob: audioDataURL\n      });\n    });\n  } else if (options.video) {\n    options.video.getDataURL(function (videoDataURL) {\n      DiskStorage.Store({\n        videoBlob: videoDataURL\n      });\n    });\n  } else if (options.gif) {\n    options.gif.getDataURL(function (gifDataURL) {\n      DiskStorage.Store({\n        gifBlob: gifDataURL\n      });\n    });\n  }\n};\n\n// __________________________\n// RecordRTC-Configuration.js\n\n/**\r\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCConfiguration\r\n * @class\r\n * @example\r\n * var options = RecordRTCConfiguration(mediaStream, options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\r\n */\n\nfunction RecordRTCConfiguration(mediaStream, config) {\n  if (!config.recorderType && !config.type) {\n    if (!!config.audio && !!config.video) {\n      config.type = 'video';\n    } else if (!!config.audio && !config.video) {\n      config.type = 'audio';\n    }\n  }\n  if (config.recorderType && !config.type) {\n    if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder || typeof WebAssemblyRecorder !== 'undefined' && config.recorderType === WebAssemblyRecorder) {\n      config.type = 'video';\n    } else if (config.recorderType === GifRecorder) {\n      config.type = 'gif';\n    } else if (config.recorderType === StereoAudioRecorder) {\n      config.type = 'audio';\n    } else if (config.recorderType === MediaStreamRecorder) {\n      if (getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n        config.type = 'video';\n      } else if (!getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n        config.type = 'video';\n      } else if (getTracks(mediaStream, 'audio').length && !getTracks(mediaStream, 'video').length) {\n        config.type = 'audio';\n      } else {\n        // config.type = 'UnKnown';\n      }\n    }\n  }\n  if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n    if (!config.mimeType) {\n      config.mimeType = 'video/webm';\n    }\n    if (!config.type) {\n      config.type = config.mimeType.split('/')[0];\n    }\n    if (!config.bitsPerSecond) {\n      // config.bitsPerSecond = 128000;\n    }\n  }\n\n  // consider default type=audio\n  if (!config.type) {\n    if (config.mimeType) {\n      config.type = config.mimeType.split('/')[0];\n    }\n    if (!config.type) {\n      config.type = 'audio';\n    }\n  }\n  return config;\n}\n\n// __________________\n// GetRecorderType.js\n\n/**\r\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It returns best recorder-type available for your browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GetRecorderType\r\n * @class\r\n * @example\r\n * var RecorderType = GetRecorderType(options);\r\n * var recorder = new RecorderType(options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n */\n\nfunction GetRecorderType(mediaStream, config) {\n  var recorder;\n\n  // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\n  // todo: detect if it is Edge, then auto use: StereoAudioRecorder\n  if (isChrome || isEdge || isOpera) {\n    // Media Stream Recording API has not been implemented in chrome yet;\n    // That's why using WebAudio API to record stereo audio in WAV format\n    recorder = StereoAudioRecorder;\n  }\n  if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\n    recorder = MediaStreamRecorder;\n  }\n\n  // video recorder (in WebM format)\n  if (config.type === 'video' && (isChrome || isOpera)) {\n    recorder = WhammyRecorder;\n    if (typeof WebAssemblyRecorder !== 'undefined' && typeof ReadableStream !== 'undefined') {\n      recorder = WebAssemblyRecorder;\n    }\n  }\n\n  // video recorder (in Gif format)\n  if (config.type === 'gif') {\n    recorder = GifRecorder;\n  }\n\n  // html2canvas recording!\n  if (config.type === 'canvas') {\n    recorder = CanvasRecorder;\n  }\n  if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n    if (getTracks(mediaStream, 'video').length || getTracks(mediaStream, 'audio').length) {\n      // audio-only recording\n      if (config.type === 'audio') {\n        if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\n          recorder = MediaStreamRecorder;\n        }\n        // else recorder = StereoAudioRecorder;\n      } else {\n        // video or screen tracks\n        if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\n          recorder = MediaStreamRecorder;\n        }\n      }\n    }\n  }\n  if (mediaStream instanceof Array && mediaStream.length) {\n    recorder = MultiStreamRecorder;\n  }\n  if (config.recorderType) {\n    recorder = config.recorderType;\n  }\n  if (!config.disableLogs && !!recorder && !!recorder.name) {\n    console.log('Using recorderType:', recorder.name || recorder.constructor.name);\n  }\n  if (!recorder && isSafari) {\n    recorder = MediaStreamRecorder;\n  }\n  return recorder;\n}\n\n// _____________\n// MRecordRTC.js\n\n/**\r\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\r\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MRecordRTC\r\n * @class\r\n * @example\r\n * var recorder = new MRecordRTC();\r\n * recorder.addStream(MediaStream);\r\n * recorder.mediaType = {\r\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\r\n *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n *     gif: true    // or GifRecorder\r\n * };\r\n * // mimeType is optional and should be set only in advance cases.\r\n * recorder.mimeType = {\r\n *     audio: 'audio/wav',\r\n *     video: 'video/webm',\r\n *     gif:   'image/gif'\r\n * };\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @requires {@link RecordRTC}\r\n */\n\nfunction MRecordRTC(mediaStream) {\n  /**\r\n   * This method attaches MediaStream object to {@link MRecordRTC}.\r\n   * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.addStream(MediaStream);\r\n   */\n  this.addStream = function (_mediaStream) {\n    if (_mediaStream) {\n      mediaStream = _mediaStream;\n    }\n  };\n\n  /**\r\n   * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\r\n   * @property {object} mediaType - {audio: true, video: true, gif: true}\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * var recorder = new MRecordRTC();\r\n   * recorder.mediaType = {\r\n   *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\r\n   *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n   *     gif  : true  // TRUE or GifRecorder\r\n   * };\r\n   */\n  this.mediaType = {\n    audio: true,\n    video: true\n  };\n\n  /**\r\n   * This method starts recording.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.startRecording();\r\n   */\n  this.startRecording = function () {\n    var mediaType = this.mediaType;\n    var recorderType;\n    var mimeType = this.mimeType || {\n      audio: null,\n      video: null,\n      gif: null\n    };\n    if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'audio').length) {\n      mediaType.audio = false;\n    }\n    if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n      mediaType.video = false;\n    }\n    if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n      mediaType.gif = false;\n    }\n    if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\n      throw 'MediaStream must have either audio or video tracks.';\n    }\n    if (!!mediaType.audio) {\n      recorderType = null;\n      if (typeof mediaType.audio === 'function') {\n        recorderType = mediaType.audio;\n      }\n      this.audioRecorder = new RecordRTC(mediaStream, {\n        type: 'audio',\n        bufferSize: this.bufferSize,\n        sampleRate: this.sampleRate,\n        numberOfAudioChannels: this.numberOfAudioChannels || 2,\n        disableLogs: this.disableLogs,\n        recorderType: recorderType,\n        mimeType: mimeType.audio,\n        timeSlice: this.timeSlice,\n        onTimeStamp: this.onTimeStamp\n      });\n      if (!mediaType.video) {\n        this.audioRecorder.startRecording();\n      }\n    }\n    if (!!mediaType.video) {\n      recorderType = null;\n      if (typeof mediaType.video === 'function') {\n        recorderType = mediaType.video;\n      }\n      var newStream = mediaStream;\n      if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\n        var videoTrack = getTracks(mediaStream, 'video')[0];\n        if (isFirefox) {\n          newStream = new MediaStream();\n          newStream.addTrack(videoTrack);\n          if (recorderType && recorderType === WhammyRecorder) {\n            // Firefox does NOT supports webp-encoding yet\n            // But Firefox do supports WebAssemblyRecorder\n            recorderType = MediaStreamRecorder;\n          }\n        } else {\n          newStream = new MediaStream();\n          newStream.addTrack(videoTrack);\n        }\n      }\n      this.videoRecorder = new RecordRTC(newStream, {\n        type: 'video',\n        video: this.video,\n        canvas: this.canvas,\n        frameInterval: this.frameInterval || 10,\n        disableLogs: this.disableLogs,\n        recorderType: recorderType,\n        mimeType: mimeType.video,\n        timeSlice: this.timeSlice,\n        onTimeStamp: this.onTimeStamp,\n        workerPath: this.workerPath,\n        webAssemblyPath: this.webAssemblyPath,\n        frameRate: this.frameRate,\n        // used by WebAssemblyRecorder; values: usually 30; accepts any.\n        bitrate: this.bitrate // used by WebAssemblyRecorder; values: 0 to 1000+\n      });\n\n      if (!mediaType.audio) {\n        this.videoRecorder.startRecording();\n      }\n    }\n    if (!!mediaType.audio && !!mediaType.video) {\n      var self = this;\n      var isSingleRecorder = isMediaRecorderCompatible() === true;\n      if (mediaType.audio instanceof StereoAudioRecorder && !!mediaType.video) {\n        isSingleRecorder = false;\n      } else if (mediaType.audio !== true && mediaType.video !== true && mediaType.audio !== mediaType.video) {\n        isSingleRecorder = false;\n      }\n      if (isSingleRecorder === true) {\n        self.audioRecorder = null;\n        self.videoRecorder.startRecording();\n      } else {\n        self.videoRecorder.initRecorder(function () {\n          self.audioRecorder.initRecorder(function () {\n            // Both recorders are ready to record things accurately\n            self.videoRecorder.startRecording();\n            self.audioRecorder.startRecording();\n          });\n        });\n      }\n    }\n    if (!!mediaType.gif) {\n      recorderType = null;\n      if (typeof mediaType.gif === 'function') {\n        recorderType = mediaType.gif;\n      }\n      this.gifRecorder = new RecordRTC(mediaStream, {\n        type: 'gif',\n        frameRate: this.frameRate || 200,\n        quality: this.quality || 10,\n        disableLogs: this.disableLogs,\n        recorderType: recorderType,\n        mimeType: mimeType.gif\n      });\n      this.gifRecorder.startRecording();\n    }\n  };\n\n  /**\r\n   * This method stops recording.\r\n   * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.stopRecording(function(recording){\r\n   *     var audioBlob = recording.audio;\r\n   *     var videoBlob = recording.video;\r\n   *     var gifBlob   = recording.gif;\r\n   * });\r\n   */\n  this.stopRecording = function (callback) {\n    callback = callback || function () {};\n    if (this.audioRecorder) {\n      this.audioRecorder.stopRecording(function (blobURL) {\n        callback(blobURL, 'audio');\n      });\n    }\n    if (this.videoRecorder) {\n      this.videoRecorder.stopRecording(function (blobURL) {\n        callback(blobURL, 'video');\n      });\n    }\n    if (this.gifRecorder) {\n      this.gifRecorder.stopRecording(function (blobURL) {\n        callback(blobURL, 'gif');\n      });\n    }\n  };\n\n  /**\r\n   * This method pauses recording.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.pauseRecording();\r\n   */\n  this.pauseRecording = function () {\n    if (this.audioRecorder) {\n      this.audioRecorder.pauseRecording();\n    }\n    if (this.videoRecorder) {\n      this.videoRecorder.pauseRecording();\n    }\n    if (this.gifRecorder) {\n      this.gifRecorder.pauseRecording();\n    }\n  };\n\n  /**\r\n   * This method resumes recording.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.resumeRecording();\r\n   */\n  this.resumeRecording = function () {\n    if (this.audioRecorder) {\n      this.audioRecorder.resumeRecording();\n    }\n    if (this.videoRecorder) {\n      this.videoRecorder.resumeRecording();\n    }\n    if (this.gifRecorder) {\n      this.gifRecorder.resumeRecording();\n    }\n  };\n\n  /**\r\n   * This method can be used to manually get all recorded blobs.\r\n   * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.getBlob(function(recording){\r\n   *     var audioBlob = recording.audio;\r\n   *     var videoBlob = recording.video;\r\n   *     var gifBlob   = recording.gif;\r\n   * });\r\n   * // or\r\n   * var audioBlob = recorder.getBlob().audio;\r\n   * var videoBlob = recorder.getBlob().video;\r\n   */\n  this.getBlob = function (callback) {\n    var output = {};\n    if (this.audioRecorder) {\n      output.audio = this.audioRecorder.getBlob();\n    }\n    if (this.videoRecorder) {\n      output.video = this.videoRecorder.getBlob();\n    }\n    if (this.gifRecorder) {\n      output.gif = this.gifRecorder.getBlob();\n    }\n    if (callback) {\n      callback(output);\n    }\n    return output;\n  };\n\n  /**\r\n   * Destroy all recorder instances.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.destroy();\r\n   */\n  this.destroy = function () {\n    if (this.audioRecorder) {\n      this.audioRecorder.destroy();\n      this.audioRecorder = null;\n    }\n    if (this.videoRecorder) {\n      this.videoRecorder.destroy();\n      this.videoRecorder = null;\n    }\n    if (this.gifRecorder) {\n      this.gifRecorder.destroy();\n      this.gifRecorder = null;\n    }\n  };\n\n  /**\r\n   * This method can be used to manually get all recorded blobs' DataURLs.\r\n   * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.getDataURL(function(recording){\r\n   *     var audioDataURL = recording.audio;\r\n   *     var videoDataURL = recording.video;\r\n   *     var gifDataURL   = recording.gif;\r\n   * });\r\n   */\n  this.getDataURL = function (callback) {\n    this.getBlob(function (blob) {\n      if (blob.audio && blob.video) {\n        getDataURL(blob.audio, function (_audioDataURL) {\n          getDataURL(blob.video, function (_videoDataURL) {\n            callback({\n              audio: _audioDataURL,\n              video: _videoDataURL\n            });\n          });\n        });\n      } else if (blob.audio) {\n        getDataURL(blob.audio, function (_audioDataURL) {\n          callback({\n            audio: _audioDataURL\n          });\n        });\n      } else if (blob.video) {\n        getDataURL(blob.video, function (_videoDataURL) {\n          callback({\n            video: _videoDataURL\n          });\n        });\n      }\n    });\n    function getDataURL(blob, callback00) {\n      if (typeof Worker !== 'undefined') {\n        var webWorker = processInWebWorker(function readFile(_blob) {\n          postMessage(new FileReaderSync().readAsDataURL(_blob));\n        });\n        webWorker.onmessage = function (event) {\n          callback00(event.data);\n        };\n        webWorker.postMessage(blob);\n      } else {\n        var reader = new FileReader();\n        reader.readAsDataURL(blob);\n        reader.onload = function (event) {\n          callback00(event.target.result);\n        };\n      }\n    }\n    function processInWebWorker(_function) {\n      var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n        type: 'application/javascript'\n      }));\n      var worker = new Worker(blob);\n      var url;\n      if (typeof URL !== 'undefined') {\n        url = URL;\n      } else if (typeof webkitURL !== 'undefined') {\n        url = webkitURL;\n      } else {\n        throw 'Neither URL nor webkitURL detected.';\n      }\n      url.revokeObjectURL(blob);\n      return worker;\n    }\n  };\n\n  /**\r\n   * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.writeToDisk();\r\n   */\n  this.writeToDisk = function () {\n    RecordRTC.writeToDisk({\n      audio: this.audioRecorder,\n      video: this.videoRecorder,\n      gif: this.gifRecorder\n    });\n  };\n\n  /**\r\n   * This method can be used to invoke a save-as dialog for all recorded blobs.\r\n   * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.save({\r\n   *     audio: 'audio-file-name',\r\n   *     video: 'video-file-name',\r\n   *     gif  : 'gif-file-name'\r\n   * });\r\n   */\n  this.save = function (args) {\n    args = args || {\n      audio: true,\n      video: true,\n      gif: true\n    };\n    if (!!args.audio && this.audioRecorder) {\n      this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\n    }\n    if (!!args.video && this.videoRecorder) {\n      this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\n    }\n    if (!!args.gif && this.gifRecorder) {\n      this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\n    }\n  };\n}\n\n/**\r\n * This method can be used to get all recorded blobs from IndexedDB storage.\r\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\r\n * @param {function} callback - Callback function to get all stored blobs.\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\r\n *     if(type === 'audio') { }\r\n *     if(type === 'video') { }\r\n *     if(type === 'gif')   { }\r\n * });\r\n */\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\n\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.MRecordRTC = MRecordRTC;\n}\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n(function (that) {\n  if (!that) {\n    return;\n  }\n  if (typeof window !== 'undefined') {\n    return;\n  }\n  if (typeof global === 'undefined') {\n    return;\n  }\n  global.navigator = {\n    userAgent: browserFakeUserAgent,\n    getUserMedia: function () {}\n  };\n  if (!global.console) {\n    global.console = {};\n  }\n  if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\n    global.console.error = global.console.log = global.console.log || function () {\n      console.log(arguments);\n    };\n  }\n  if (typeof document === 'undefined') {\n    /*global document:true */\n    that.document = {\n      documentElement: {\n        appendChild: function () {\n          return '';\n        }\n      }\n    };\n    document.createElement = document.captureStream = document.mozCaptureStream = function () {\n      var obj = {\n        getContext: function () {\n          return obj;\n        },\n        play: function () {},\n        pause: function () {},\n        drawImage: function () {},\n        toDataURL: function () {\n          return '';\n        },\n        style: {}\n      };\n      return obj;\n    };\n    that.HTMLVideoElement = function () {};\n  }\n  if (typeof location === 'undefined') {\n    /*global location:true */\n    that.location = {\n      protocol: 'file:',\n      href: '',\n      hash: ''\n    };\n  }\n  if (typeof screen === 'undefined') {\n    /*global screen:true */\n    that.screen = {\n      width: 0,\n      height: 0\n    };\n  }\n  if (typeof URL === 'undefined') {\n    /*global screen:true */\n    that.URL = {\n      createObjectURL: function () {\n        return '';\n      },\n      revokeObjectURL: function () {\n        return '';\n      }\n    };\n  }\n\n  /*global window:true */\n  that.window = global;\n})(typeof global !== 'undefined' ? global : null);\n\n// _____________________________\n// Cross-Browser-Declarations.js\n\n// animation-frame used in WebM recording\n\n/*jshint -W079 */\nvar requestAnimationFrame = window.requestAnimationFrame;\nif (typeof requestAnimationFrame === 'undefined') {\n  if (typeof webkitRequestAnimationFrame !== 'undefined') {\n    /*global requestAnimationFrame:true */\n    requestAnimationFrame = webkitRequestAnimationFrame;\n  } else if (typeof mozRequestAnimationFrame !== 'undefined') {\n    /*global requestAnimationFrame:true */\n    requestAnimationFrame = mozRequestAnimationFrame;\n  } else if (typeof msRequestAnimationFrame !== 'undefined') {\n    /*global requestAnimationFrame:true */\n    requestAnimationFrame = msRequestAnimationFrame;\n  } else if (typeof requestAnimationFrame === 'undefined') {\n    // via: https://gist.github.com/paulirish/1579671\n    var lastTime = 0;\n\n    /*global requestAnimationFrame:true */\n    requestAnimationFrame = function (callback, element) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n}\n\n/*jshint -W079 */\nvar cancelAnimationFrame = window.cancelAnimationFrame;\nif (typeof cancelAnimationFrame === 'undefined') {\n  if (typeof webkitCancelAnimationFrame !== 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = webkitCancelAnimationFrame;\n  } else if (typeof mozCancelAnimationFrame !== 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = mozCancelAnimationFrame;\n  } else if (typeof msCancelAnimationFrame !== 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = msCancelAnimationFrame;\n  } else if (typeof cancelAnimationFrame === 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  }\n}\n\n// WebAudio API representer\nvar AudioContext = window.AudioContext;\nif (typeof AudioContext === 'undefined') {\n  if (typeof webkitAudioContext !== 'undefined') {\n    /*global AudioContext:true */\n    AudioContext = webkitAudioContext;\n  }\n  if (typeof mozAudioContext !== 'undefined') {\n    /*global AudioContext:true */\n    AudioContext = mozAudioContext;\n  }\n}\n\n/*jshint -W079 */\nvar URL = window.URL;\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n  /*global URL:true */\n  URL = webkitURL;\n}\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') {\n  // maybe window.navigator?\n  if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n    navigator.getUserMedia = navigator.webkitGetUserMedia;\n  }\n  if (typeof navigator.mozGetUserMedia !== 'undefined') {\n    navigator.getUserMedia = navigator.mozGetUserMedia;\n  }\n}\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\nvar isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && 'netscape' in window && / rv:/.test(navigator.userAgent);\nvar isChrome = !isOpera && !isEdge && !!navigator.webkitGetUserMedia || isElectron() || navigator.userAgent.toLowerCase().indexOf('chrome/') !== -1;\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\nif (isSafari && !isChrome && navigator.userAgent.indexOf('CriOS') !== -1) {\n  isSafari = false;\n  isChrome = true;\n}\nvar MediaStream = window.MediaStream;\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n  MediaStream = webkitMediaStream;\n}\n\n/*global MediaStream:true */\nif (typeof MediaStream !== 'undefined') {\n  // override \"stop\" method for all browsers\n  if (typeof MediaStream.prototype.stop === 'undefined') {\n    MediaStream.prototype.stop = function () {\n      this.getTracks().forEach(function (track) {\n        track.stop();\n      });\n    };\n  }\n}\n\n// below function via: http://goo.gl/B3ae8c\n/**\r\n * Return human-readable file size.\r\n * @param {number} bytes - Pass bytes and get formatted string.\r\n * @returns {string} - formatted string\r\n * @example\r\n * bytesToSize(1024*1024*5) === '5 GB'\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\nfunction bytesToSize(bytes) {\n  var k = 1000;\n  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  if (bytes === 0) {\n    return '0 Bytes';\n  }\n  var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\n  return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\n}\n\n/**\r\n * @param {Blob} file - File or Blob object. This parameter is required.\r\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\r\n * @example\r\n * invokeSaveAsDialog(blob or file, [optional] fileName);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\nfunction invokeSaveAsDialog(file, fileName) {\n  if (!file) {\n    throw 'Blob object is required.';\n  }\n  if (!file.type) {\n    try {\n      file.type = 'video/webm';\n    } catch (e) {}\n  }\n  var fileExtension = (file.type || 'video/webm').split('/')[1];\n  if (fileExtension.indexOf(';') !== -1) {\n    // extended mimetype, e.g. 'video/webm;codecs=vp8,opus'\n    fileExtension = fileExtension.split(';')[0];\n  }\n  if (fileName && fileName.indexOf('.') !== -1) {\n    var splitted = fileName.split('.');\n    fileName = splitted[0];\n    fileExtension = splitted[1];\n  }\n  var fileFullName = (fileName || Math.round(Math.random() * 9999999999) + 888888888) + '.' + fileExtension;\n  if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\n    return navigator.msSaveOrOpenBlob(file, fileFullName);\n  } else if (typeof navigator.msSaveBlob !== 'undefined') {\n    return navigator.msSaveBlob(file, fileFullName);\n  }\n  var hyperlink = document.createElement('a');\n  hyperlink.href = URL.createObjectURL(file);\n  hyperlink.download = fileFullName;\n  hyperlink.style = 'display:none;opacity:0;color:transparent;';\n  (document.body || document.documentElement).appendChild(hyperlink);\n  if (typeof hyperlink.click === 'function') {\n    hyperlink.click();\n  } else {\n    hyperlink.target = '_blank';\n    hyperlink.dispatchEvent(new MouseEvent('click', {\n      view: window,\n      bubbles: true,\n      cancelable: true\n    }));\n  }\n  URL.revokeObjectURL(hyperlink.href);\n}\n\n/**\r\n * from: https://github.com/cheton/is-electron/blob/master/index.js\r\n **/\nfunction isElectron() {\n  // Renderer process\n  if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Main process\n  if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n    return true;\n  }\n\n  // Detect the user agent when the `nodeIntegration` option is set to true\n  if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n    return true;\n  }\n  return false;\n}\nfunction getTracks(stream, kind) {\n  if (!stream || !stream.getTracks) {\n    return [];\n  }\n  return stream.getTracks().filter(function (t) {\n    return t.kind === (kind || 'audio');\n  });\n}\nfunction setSrcObject(stream, element) {\n  if ('srcObject' in element) {\n    element.srcObject = stream;\n  } else if ('mozSrcObject' in element) {\n    element.mozSrcObject = stream;\n  } else {\n    element.srcObject = stream;\n  }\n}\n\n/**\r\n * @param {Blob} file - File or Blob object.\r\n * @param {function} callback - Callback function.\r\n * @example\r\n * getSeekableBlob(blob or file, callback);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\nfunction getSeekableBlob(inputBlob, callback) {\n  // EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml\n  if (typeof EBML === 'undefined') {\n    throw new Error('Please link: https://www.webrtc-experiment.com/EBML.js');\n  }\n  var reader = new EBML.Reader();\n  var decoder = new EBML.Decoder();\n  var tools = EBML.tools;\n  var fileReader = new FileReader();\n  fileReader.onload = function (e) {\n    var ebmlElms = decoder.decode(this.result);\n    ebmlElms.forEach(function (element) {\n      reader.read(element);\n    });\n    reader.stop();\n    var refinedMetadataBuf = tools.makeMetadataSeekable(reader.metadatas, reader.duration, reader.cues);\n    var body = this.result.slice(reader.metadataSize);\n    var newBlob = new Blob([refinedMetadataBuf, body], {\n      type: 'video/webm'\n    });\n    callback(newBlob);\n  };\n  fileReader.readAsArrayBuffer(inputBlob);\n}\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.invokeSaveAsDialog = invokeSaveAsDialog;\n  RecordRTC.getTracks = getTracks;\n  RecordRTC.getSeekableBlob = getSeekableBlob;\n  RecordRTC.bytesToSize = bytesToSize;\n  RecordRTC.isElectron = isElectron;\n}\n\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\n// Storage.js\n\n/**\r\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * Storage.AudioContext === webkitAudioContext\r\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\n\nvar Storage = {};\nif (typeof AudioContext !== 'undefined') {\n  Storage.AudioContext = AudioContext;\n} else if (typeof webkitAudioContext !== 'undefined') {\n  Storage.AudioContext = webkitAudioContext;\n}\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.Storage = Storage;\n}\nfunction isMediaRecorderCompatible() {\n  if (isFirefox || isSafari || isEdge) {\n    return true;\n  }\n  var nVer = navigator.appVersion;\n  var nAgt = navigator.userAgent;\n  var fullVersion = '' + parseFloat(navigator.appVersion);\n  var majorVersion = parseInt(navigator.appVersion, 10);\n  var nameOffset, verOffset, ix;\n  if (isChrome || isOpera) {\n    verOffset = nAgt.indexOf('Chrome');\n    fullVersion = nAgt.substring(verOffset + 7);\n  }\n\n  // trim the fullVersion string at semicolon/space if present\n  if ((ix = fullVersion.indexOf(';')) !== -1) {\n    fullVersion = fullVersion.substring(0, ix);\n  }\n  if ((ix = fullVersion.indexOf(' ')) !== -1) {\n    fullVersion = fullVersion.substring(0, ix);\n  }\n  majorVersion = parseInt('' + fullVersion, 10);\n  if (isNaN(majorVersion)) {\n    fullVersion = '' + parseFloat(navigator.appVersion);\n    majorVersion = parseInt(navigator.appVersion, 10);\n  }\n  return majorVersion >= 49;\n}\n\n// ______________________\n// MediaStreamRecorder.js\n\n/**\r\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\r\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\r\n * @typedef MediaStreamRecorder\r\n * @class\r\n * @example\r\n * var config = {\r\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\r\n *     audioBitsPerSecond : 256 * 8 * 1024,\r\n *     videoBitsPerSecond : 256 * 8 * 1024,\r\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\r\n *     checkForInactiveTracks: true,\r\n *     timeSlice: 1000, // concatenate intervals based blobs\r\n *     ondataavailable: function() {} // get intervals based blobs\r\n * }\r\n * var recorder = new MediaStreamRecorder(mediaStream, config);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\r\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\r\n */\n\nfunction MediaStreamRecorder(mediaStream, config) {\n  var self = this;\n  if (typeof mediaStream === 'undefined') {\n    throw 'First argument \"MediaStream\" is required.';\n  }\n  if (typeof MediaRecorder === 'undefined') {\n    throw 'Your browser does not support the Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\n  }\n  config = config || {\n    // bitsPerSecond: 256 * 8 * 1024,\n    mimeType: 'video/webm'\n  };\n  if (config.type === 'audio') {\n    if (getTracks(mediaStream, 'video').length && getTracks(mediaStream, 'audio').length) {\n      var stream;\n      if (!!navigator.mozGetUserMedia) {\n        stream = new MediaStream();\n        stream.addTrack(getTracks(mediaStream, 'audio')[0]);\n      } else {\n        // webkitMediaStream\n        stream = new MediaStream(getTracks(mediaStream, 'audio'));\n      }\n      mediaStream = stream;\n    }\n    if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\n      config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\n    }\n    if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\n      // forcing better codecs on Firefox (via #166)\n      config.mimeType = 'audio/ogg';\n    }\n  }\n  var arrayOfBlobs = [];\n\n  /**\r\n   * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * var arrayOfBlobs = recorder.getArrayOfBlobs();\r\n   * @returns {Array} Returns array of recorded blobs.\r\n   */\n  this.getArrayOfBlobs = function () {\n    return arrayOfBlobs;\n  };\n\n  /**\r\n   * This method records MediaStream.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n  this.record = function () {\n    // set defaults\n    self.blob = null;\n    self.clearRecordedData();\n    self.timestamps = [];\n    allStates = [];\n    arrayOfBlobs = [];\n    var recorderHints = config;\n    if (!config.disableLogs) {\n      console.log('Passing following config over MediaRecorder API.', recorderHints);\n    }\n    if (mediaRecorder) {\n      // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\n      mediaRecorder = null;\n    }\n    if (isChrome && !isMediaRecorderCompatible()) {\n      // to support video-only recording on stable\n      recorderHints = 'video/vp8';\n    }\n    if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\n      if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\n        if (!config.disableLogs) {\n          console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n        }\n        recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\n      }\n    }\n\n    // using MediaRecorder API here\n    try {\n      mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\n\n      // reset\n      config.mimeType = recorderHints.mimeType;\n    } catch (e) {\n      // chrome-based fallback\n      mediaRecorder = new MediaRecorder(mediaStream);\n    }\n\n    // old hack?\n    if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\n      if (!config.disableLogs) {\n        console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n      }\n    }\n\n    // Dispatching OnDataAvailable Handler\n    mediaRecorder.ondataavailable = function (e) {\n      if (e.data) {\n        allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\n      }\n      if (typeof config.timeSlice === 'number') {\n        if (e.data && e.data.size) {\n          arrayOfBlobs.push(e.data);\n          updateTimeStamp();\n          if (typeof config.ondataavailable === 'function') {\n            // intervals based blobs\n            var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n              type: getMimeType(recorderHints)\n            });\n            config.ondataavailable(blob);\n          }\n        }\n        return;\n      }\n      if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\n        // make sure that stopRecording always getting fired\n        // even if there is invalid data\n        if (self.recordingCallback) {\n          self.recordingCallback(new Blob([], {\n            type: getMimeType(recorderHints)\n          }));\n          self.recordingCallback = null;\n        }\n        return;\n      }\n      self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n        type: getMimeType(recorderHints)\n      });\n      if (self.recordingCallback) {\n        self.recordingCallback(self.blob);\n        self.recordingCallback = null;\n      }\n    };\n    mediaRecorder.onstart = function () {\n      allStates.push('started');\n    };\n    mediaRecorder.onpause = function () {\n      allStates.push('paused');\n    };\n    mediaRecorder.onresume = function () {\n      allStates.push('resumed');\n    };\n    mediaRecorder.onstop = function () {\n      allStates.push('stopped');\n    };\n    mediaRecorder.onerror = function (error) {\n      if (!error) {\n        return;\n      }\n      if (!error.name) {\n        error.name = 'UnknownError';\n      }\n      allStates.push('error: ' + error);\n      if (!config.disableLogs) {\n        // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\n        if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\n          console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\n        } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\n          console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\n        } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\n          console.error('MediaRecorder security error', error);\n        }\n\n        // older code below\n        else if (error.name === 'OutOfMemory') {\n          console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n        } else if (error.name === 'IllegalStreamModification') {\n          console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n        } else if (error.name === 'OtherRecordingError') {\n          console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n        } else if (error.name === 'GenericError') {\n          console.error('The UA cannot provide the codec or recording option that has been requested.', error);\n        } else {\n          console.error('MediaRecorder Error', error);\n        }\n      }\n      (function (looper) {\n        if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\n          delete config.timeslice;\n\n          // 10 minutes, enough?\n          mediaRecorder.start(10 * 60 * 1000);\n          return;\n        }\n        setTimeout(looper, 1000);\n      })();\n      if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\n        mediaRecorder.stop();\n      }\n    };\n    if (typeof config.timeSlice === 'number') {\n      updateTimeStamp();\n      mediaRecorder.start(config.timeSlice);\n    } else {\n      // default is 60 minutes; enough?\n      // use config => {timeSlice: 1000} otherwise\n\n      mediaRecorder.start(3.6e+6);\n    }\n    if (config.initCallback) {\n      config.initCallback(); // old code\n    }\n  };\n\n  /**\r\n   * @property {Array} timestamps - Array of time stamps\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * console.log(recorder.timestamps);\r\n   */\n  this.timestamps = [];\n  function updateTimeStamp() {\n    self.timestamps.push(new Date().getTime());\n    if (typeof config.onTimeStamp === 'function') {\n      config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\n    }\n  }\n  function getMimeType(secondObject) {\n    if (mediaRecorder && mediaRecorder.mimeType) {\n      return mediaRecorder.mimeType;\n    }\n    return secondObject.mimeType || 'video/webm';\n  }\n\n  /**\r\n   * This method stops recording MediaStream.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n  this.stop = function (callback) {\n    callback = callback || function () {};\n    self.manuallyStopped = true; // used inside the mediaRecorder.onerror\n\n    if (!mediaRecorder) {\n      return;\n    }\n    this.recordingCallback = callback;\n    if (mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n    }\n    if (typeof config.timeSlice === 'number') {\n      setTimeout(function () {\n        self.blob = new Blob(arrayOfBlobs, {\n          type: getMimeType(config)\n        });\n        self.recordingCallback(self.blob);\n      }, 100);\n    }\n  };\n\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n  this.pause = function () {\n    if (!mediaRecorder) {\n      return;\n    }\n    if (mediaRecorder.state === 'recording') {\n      mediaRecorder.pause();\n    }\n  };\n\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n  this.resume = function () {\n    if (!mediaRecorder) {\n      return;\n    }\n    if (mediaRecorder.state === 'paused') {\n      mediaRecorder.resume();\n    }\n  };\n\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n  this.clearRecordedData = function () {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      self.stop(clearRecordedDataCB);\n    }\n    clearRecordedDataCB();\n  };\n  function clearRecordedDataCB() {\n    arrayOfBlobs = [];\n    mediaRecorder = null;\n    self.timestamps = [];\n  }\n\n  // Reference to \"MediaRecorder\" object\n  var mediaRecorder;\n\n  /**\r\n   * Access to native MediaRecorder API\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @instance\r\n   * @example\r\n   * var internal = recorder.getInternalRecorder();\r\n   * internal.ondataavailable = function() {}; // override\r\n   * internal.stream, internal.onpause, internal.onstop, etc.\r\n   * @returns {Object} Returns internal recording object.\r\n   */\n  this.getInternalRecorder = function () {\n    return mediaRecorder;\n  };\n  function isMediaStreamActive() {\n    if ('active' in mediaStream) {\n      if (!mediaStream.active) {\n        return false;\n      }\n    } else if ('ended' in mediaStream) {\n      // old hack\n      if (mediaStream.ended) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\r\n   * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.stop(function() {\r\n   *     var blob = recorder.blob;\r\n   * });\r\n   */\n  this.blob = null;\n\n  /**\r\n   * Get MediaRecorder readonly state.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * var state = recorder.getState();\r\n   * @returns {String} Returns recording state.\r\n   */\n  this.getState = function () {\n    if (!mediaRecorder) {\n      return 'inactive';\n    }\n    return mediaRecorder.state || 'inactive';\n  };\n\n  // list of all recording states\n  var allStates = [];\n\n  /**\r\n   * Get MediaRecorder all recording states.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * var state = recorder.getAllStates();\r\n   * @returns {Array} Returns all recording states\r\n   */\n  this.getAllStates = function () {\n    return allStates;\n  };\n\n  // if any Track within the MediaStream is muted or not enabled at any time, \n  // the browser will only record black frames \n  // or silence since that is the content produced by the Track\n  // so we need to stopRecording as soon as any single track ends.\n  if (typeof config.checkForInactiveTracks === 'undefined') {\n    config.checkForInactiveTracks = false; // disable to minimize CPU usage\n  }\n\n  var self = this;\n\n  // this method checks if media stream is stopped\n  // or if any track is ended.\n  (function looper() {\n    if (!mediaRecorder || config.checkForInactiveTracks === false) {\n      return;\n    }\n    if (isMediaStreamActive() === false) {\n      if (!config.disableLogs) {\n        console.log('MediaStream seems stopped.');\n      }\n      self.stop();\n      return;\n    }\n    setTimeout(looper, 1000); // check every second\n  })();\n\n  // for debugging\n  this.name = 'MediaStreamRecorder';\n  this.toString = function () {\n    return this.name;\n  };\n}\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\n}\n\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\n// https://github.com/mattdiamond/Recorderjs#license-mit\n// ______________________\n// StereoAudioRecorder.js\n\n/**\r\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\r\n * @summary JavaScript standalone object for stereo audio recording.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef StereoAudioRecorder\r\n * @class\r\n * @example\r\n * var recorder = new StereoAudioRecorder(MediaStream, {\r\n *     sampleRate: 44100,\r\n *     bufferSize: 4096\r\n * });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\r\n */\n\nfunction StereoAudioRecorder(mediaStream, config) {\n  if (!getTracks(mediaStream, 'audio').length) {\n    throw 'Your stream has no audio tracks.';\n  }\n  config = config || {};\n  var self = this;\n\n  // variables\n  var leftchannel = [];\n  var rightchannel = [];\n  var recording = false;\n  var recordingLength = 0;\n  var jsAudioNode;\n  var numberOfAudioChannels = 2;\n\n  /**\r\n   * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\r\n   * @property {number} desiredSampRate - Desired Bits per sample * 1000\r\n   * @memberof StereoAudioRecorder\r\n   * @instance\r\n   * @example\r\n   * var recorder = StereoAudioRecorder(mediaStream, {\r\n   *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\r\n   * });\r\n   */\n  var desiredSampRate = config.desiredSampRate;\n\n  // backward compatibility\n  if (config.leftChannel === true) {\n    numberOfAudioChannels = 1;\n  }\n  if (config.numberOfAudioChannels === 1) {\n    numberOfAudioChannels = 1;\n  }\n  if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\n    numberOfAudioChannels = 2;\n  }\n  if (!config.disableLogs) {\n    console.log('StereoAudioRecorder is set to record number of channels: ' + numberOfAudioChannels);\n  }\n\n  // if any Track within the MediaStream is muted or not enabled at any time, \n  // the browser will only record black frames \n  // or silence since that is the content produced by the Track\n  // so we need to stopRecording as soon as any single track ends.\n  if (typeof config.checkForInactiveTracks === 'undefined') {\n    config.checkForInactiveTracks = true;\n  }\n  function isMediaStreamActive() {\n    if (config.checkForInactiveTracks === false) {\n      // always return \"true\"\n      return true;\n    }\n    if ('active' in mediaStream) {\n      if (!mediaStream.active) {\n        return false;\n      }\n    } else if ('ended' in mediaStream) {\n      // old hack\n      if (mediaStream.ended) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\r\n   * This method records MediaStream.\r\n   * @method\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n  this.record = function () {\n    if (isMediaStreamActive() === false) {\n      throw 'Please make sure MediaStream is active.';\n    }\n    resetVariables();\n    isAudioProcessStarted = isPaused = false;\n    recording = true;\n    if (typeof config.timeSlice !== 'undefined') {\n      looper();\n    }\n  };\n  function mergeLeftRightBuffers(config, callback) {\n    function mergeAudioBuffers(config, cb) {\n      var numberOfAudioChannels = config.numberOfAudioChannels;\n\n      // todo: \"slice(0)\" --- is it causes loop? Should be removed?\n      var leftBuffers = config.leftBuffers.slice(0);\n      var rightBuffers = config.rightBuffers.slice(0);\n      var sampleRate = config.sampleRate;\n      var internalInterleavedLength = config.internalInterleavedLength;\n      var desiredSampRate = config.desiredSampRate;\n      if (numberOfAudioChannels === 2) {\n        leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n        rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\n        if (desiredSampRate) {\n          leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n          rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\n        }\n      }\n      if (numberOfAudioChannels === 1) {\n        leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n        if (desiredSampRate) {\n          leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n        }\n      }\n\n      // set sample rate as desired sample rate\n      if (desiredSampRate) {\n        sampleRate = desiredSampRate;\n      }\n\n      // for changing the sampling rate, reference:\n      // http://stackoverflow.com/a/28977136/552182\n      function interpolateArray(data, newSampleRate, oldSampleRate) {\n        var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\n        var newData = [];\n        var springFactor = Number((data.length - 1) / (fitCount - 1));\n        newData[0] = data[0];\n        for (var i = 1; i < fitCount - 1; i++) {\n          var tmp = i * springFactor;\n          var before = Number(Math.floor(tmp)).toFixed();\n          var after = Number(Math.ceil(tmp)).toFixed();\n          var atPoint = tmp - before;\n          newData[i] = linearInterpolate(data[before], data[after], atPoint);\n        }\n        newData[fitCount - 1] = data[data.length - 1];\n        return newData;\n      }\n      function linearInterpolate(before, after, atPoint) {\n        return before + (after - before) * atPoint;\n      }\n      function mergeBuffers(channelBuffer, rLength) {\n        var result = new Float64Array(rLength);\n        var offset = 0;\n        var lng = channelBuffer.length;\n        for (var i = 0; i < lng; i++) {\n          var buffer = channelBuffer[i];\n          result.set(buffer, offset);\n          offset += buffer.length;\n        }\n        return result;\n      }\n      function interleave(leftChannel, rightChannel) {\n        var length = leftChannel.length + rightChannel.length;\n        var result = new Float64Array(length);\n        var inputIndex = 0;\n        for (var index = 0; index < length;) {\n          result[index++] = leftChannel[inputIndex];\n          result[index++] = rightChannel[inputIndex];\n          inputIndex++;\n        }\n        return result;\n      }\n      function writeUTFBytes(view, offset, string) {\n        var lng = string.length;\n        for (var i = 0; i < lng; i++) {\n          view.setUint8(offset + i, string.charCodeAt(i));\n        }\n      }\n\n      // interleave both channels together\n      var interleaved;\n      if (numberOfAudioChannels === 2) {\n        interleaved = interleave(leftBuffers, rightBuffers);\n      }\n      if (numberOfAudioChannels === 1) {\n        interleaved = leftBuffers;\n      }\n      var interleavedLength = interleaved.length;\n\n      // create wav file\n      var resultingBufferLength = 44 + interleavedLength * 2;\n      var buffer = new ArrayBuffer(resultingBufferLength);\n      var view = new DataView(buffer);\n\n      // RIFF chunk descriptor/identifier \n      writeUTFBytes(view, 0, 'RIFF');\n\n      // RIFF chunk length\n      // changed \"44\" to \"36\" via #401\n      view.setUint32(4, 36 + interleavedLength * 2, true);\n\n      // RIFF type \n      writeUTFBytes(view, 8, 'WAVE');\n\n      // format chunk identifier \n      // FMT sub-chunk\n      writeUTFBytes(view, 12, 'fmt ');\n\n      // format chunk length \n      view.setUint32(16, 16, true);\n\n      // sample format (raw)\n      view.setUint16(20, 1, true);\n\n      // stereo (2 channels)\n      view.setUint16(22, numberOfAudioChannels, true);\n\n      // sample rate \n      view.setUint32(24, sampleRate, true);\n\n      // byte rate (sample rate * block align)\n      view.setUint32(28, sampleRate * numberOfAudioChannels * 2, true);\n\n      // block align (channel count * bytes per sample) \n      view.setUint16(32, numberOfAudioChannels * 2, true);\n\n      // bits per sample \n      view.setUint16(34, 16, true);\n\n      // data sub-chunk\n      // data chunk identifier \n      writeUTFBytes(view, 36, 'data');\n\n      // data chunk length \n      view.setUint32(40, interleavedLength * 2, true);\n\n      // write the PCM samples\n      var lng = interleavedLength;\n      var index = 44;\n      var volume = 1;\n      for (var i = 0; i < lng; i++) {\n        view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\n        index += 2;\n      }\n      if (cb) {\n        return cb({\n          buffer: buffer,\n          view: view\n        });\n      }\n      postMessage({\n        buffer: buffer,\n        view: view\n      });\n    }\n    if (config.noWorker) {\n      mergeAudioBuffers(config, function (data) {\n        callback(data.buffer, data.view);\n      });\n      return;\n    }\n    var webWorker = processInWebWorker(mergeAudioBuffers);\n    webWorker.onmessage = function (event) {\n      callback(event.data.buffer, event.data.view);\n\n      // release memory\n      URL.revokeObjectURL(webWorker.workerURL);\n\n      // kill webworker (or Chrome will kill your page after ~25 calls)\n      webWorker.terminate();\n    };\n    webWorker.postMessage(config);\n  }\n  function processInWebWorker(_function) {\n    var workerURL = URL.createObjectURL(new Blob([_function.toString(), ';this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n      type: 'application/javascript'\n    }));\n    var worker = new Worker(workerURL);\n    worker.workerURL = workerURL;\n    return worker;\n  }\n\n  /**\r\n   * This method stops recording MediaStream.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n  this.stop = function (callback) {\n    callback = callback || function () {};\n\n    // stop recording\n    recording = false;\n    mergeLeftRightBuffers({\n      desiredSampRate: desiredSampRate,\n      sampleRate: sampleRate,\n      numberOfAudioChannels: numberOfAudioChannels,\n      internalInterleavedLength: recordingLength,\n      leftBuffers: leftchannel,\n      rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel,\n      noWorker: config.noWorker\n    }, function (buffer, view) {\n      /**\r\n       * @property {Blob} blob - The recorded blob object.\r\n       * @memberof StereoAudioRecorder\r\n       * @example\r\n       * recorder.stop(function(){\r\n       *     var blob = recorder.blob;\r\n       * });\r\n       */\n      self.blob = new Blob([view], {\n        type: 'audio/wav'\n      });\n\n      /**\r\n       * @property {ArrayBuffer} buffer - The recorded buffer object.\r\n       * @memberof StereoAudioRecorder\r\n       * @example\r\n       * recorder.stop(function(){\r\n       *     var buffer = recorder.buffer;\r\n       * });\r\n       */\n      self.buffer = new ArrayBuffer(view.buffer.byteLength);\n\n      /**\r\n       * @property {DataView} view - The recorded data-view object.\r\n       * @memberof StereoAudioRecorder\r\n       * @example\r\n       * recorder.stop(function(){\r\n       *     var view = recorder.view;\r\n       * });\r\n       */\n      self.view = view;\n      self.sampleRate = desiredSampRate || sampleRate;\n      self.bufferSize = bufferSize;\n\n      // recorded audio length\n      self.length = recordingLength;\n      isAudioProcessStarted = false;\n      if (callback) {\n        callback(self.blob);\n      }\n    });\n  };\n  if (typeof RecordRTC.Storage === 'undefined') {\n    RecordRTC.Storage = {\n      AudioContextConstructor: null,\n      AudioContext: window.AudioContext || window.webkitAudioContext\n    };\n  }\n  if (!RecordRTC.Storage.AudioContextConstructor || RecordRTC.Storage.AudioContextConstructor.state === 'closed') {\n    RecordRTC.Storage.AudioContextConstructor = new RecordRTC.Storage.AudioContext();\n  }\n  var context = RecordRTC.Storage.AudioContextConstructor;\n\n  // creates an audio node from the microphone incoming stream\n  var audioInput = context.createMediaStreamSource(mediaStream);\n  var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\n\n  /**\r\n   * From the spec: This value controls how frequently the audioprocess event is\r\n   * dispatched and how many sample-frames need to be processed each call.\r\n   * Lower values for buffer size will result in a lower (better) latency.\r\n   * Higher values will be necessary to avoid audio breakup and glitches\r\n   * The size of the buffer (in sample-frames) which needs to\r\n   * be processed each time onprocessaudio is called.\r\n   * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n   * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder = new StereoAudioRecorder(mediaStream, {\r\n   *     bufferSize: 4096\r\n   * });\r\n   */\n\n  // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\n  var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\n  if (legalBufferValues.indexOf(bufferSize) === -1) {\n    if (!config.disableLogs) {\n      console.log('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\n    }\n  }\n  if (context.createJavaScriptNode) {\n    jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n  } else if (context.createScriptProcessor) {\n    jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n  } else {\n    throw 'WebAudio API has no support on this browser.';\n  }\n\n  // connect the stream to the script processor\n  audioInput.connect(jsAudioNode);\n  if (!config.bufferSize) {\n    bufferSize = jsAudioNode.bufferSize; // device buffer-size\n  }\n\n  /**\r\n   * The sample rate (in sample-frames per second) at which the\r\n   * AudioContext handles audio. It is assumed that all AudioNodes\r\n   * in the context run at this rate. In making this assumption,\r\n   * sample-rate converters or \"varispeed\" processors are not supported\r\n   * in real-time processing.\r\n   * The sampleRate parameter describes the sample-rate of the\r\n   * linear PCM audio data in the buffer in sample-frames per second.\r\n   * An implementation must support sample-rates in at least\r\n   * the range 22050 to 96000.\r\n   * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder = new StereoAudioRecorder(mediaStream, {\r\n   *     sampleRate: 44100\r\n   * });\r\n   */\n  var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\n  if (sampleRate < 22050 || sampleRate > 96000) {\n    // Ref: http://stackoverflow.com/a/26303918/552182\n    if (!config.disableLogs) {\n      console.log('sample-rate must be under range 22050 and 96000.');\n    }\n  }\n  if (!config.disableLogs) {\n    if (config.desiredSampRate) {\n      console.log('Desired sample-rate: ' + config.desiredSampRate);\n    }\n  }\n  var isPaused = false;\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n  this.pause = function () {\n    isPaused = true;\n  };\n\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n  this.resume = function () {\n    if (isMediaStreamActive() === false) {\n      throw 'Please make sure MediaStream is active.';\n    }\n    if (!recording) {\n      if (!config.disableLogs) {\n        console.log('Seems recording has been restarted.');\n      }\n      this.record();\n      return;\n    }\n    isPaused = false;\n  };\n\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n  this.clearRecordedData = function () {\n    config.checkForInactiveTracks = false;\n    if (recording) {\n      this.stop(clearRecordedDataCB);\n    }\n    clearRecordedDataCB();\n  };\n  function resetVariables() {\n    leftchannel = [];\n    rightchannel = [];\n    recordingLength = 0;\n    isAudioProcessStarted = false;\n    recording = false;\n    isPaused = false;\n    context = null;\n    self.leftchannel = leftchannel;\n    self.rightchannel = rightchannel;\n    self.numberOfAudioChannels = numberOfAudioChannels;\n    self.desiredSampRate = desiredSampRate;\n    self.sampleRate = sampleRate;\n    self.recordingLength = recordingLength;\n    intervalsBasedBuffers = {\n      left: [],\n      right: [],\n      recordingLength: 0\n    };\n  }\n  function clearRecordedDataCB() {\n    if (jsAudioNode) {\n      jsAudioNode.onaudioprocess = null;\n      jsAudioNode.disconnect();\n      jsAudioNode = null;\n    }\n    if (audioInput) {\n      audioInput.disconnect();\n      audioInput = null;\n    }\n    resetVariables();\n  }\n\n  // for debugging\n  this.name = 'StereoAudioRecorder';\n  this.toString = function () {\n    return this.name;\n  };\n  var isAudioProcessStarted = false;\n  function onAudioProcessDataAvailable(e) {\n    if (isPaused) {\n      return;\n    }\n    if (isMediaStreamActive() === false) {\n      if (!config.disableLogs) {\n        console.log('MediaStream seems stopped.');\n      }\n      jsAudioNode.disconnect();\n      recording = false;\n    }\n    if (!recording) {\n      if (audioInput) {\n        audioInput.disconnect();\n        audioInput = null;\n      }\n      return;\n    }\n\n    /**\r\n     * This method is called on \"onaudioprocess\" event's first invocation.\r\n     * @method {function} onAudioProcessStarted\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.onAudioProcessStarted: function() { };\r\n     */\n    if (!isAudioProcessStarted) {\n      isAudioProcessStarted = true;\n      if (config.onAudioProcessStarted) {\n        config.onAudioProcessStarted();\n      }\n      if (config.initCallback) {\n        config.initCallback();\n      }\n    }\n    var left = e.inputBuffer.getChannelData(0);\n\n    // we clone the samples\n    var chLeft = new Float32Array(left);\n    leftchannel.push(chLeft);\n    if (numberOfAudioChannels === 2) {\n      var right = e.inputBuffer.getChannelData(1);\n      var chRight = new Float32Array(right);\n      rightchannel.push(chRight);\n    }\n    recordingLength += bufferSize;\n\n    // export raw PCM\n    self.recordingLength = recordingLength;\n    if (typeof config.timeSlice !== 'undefined') {\n      intervalsBasedBuffers.recordingLength += bufferSize;\n      intervalsBasedBuffers.left.push(chLeft);\n      if (numberOfAudioChannels === 2) {\n        intervalsBasedBuffers.right.push(chRight);\n      }\n    }\n  }\n  jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\n\n  // to prevent self audio to be connected with speakers\n  if (context.createMediaStreamDestination) {\n    jsAudioNode.connect(context.createMediaStreamDestination());\n  } else {\n    jsAudioNode.connect(context.destination);\n  }\n\n  // export raw PCM\n  this.leftchannel = leftchannel;\n  this.rightchannel = rightchannel;\n  this.numberOfAudioChannels = numberOfAudioChannels;\n  this.desiredSampRate = desiredSampRate;\n  this.sampleRate = sampleRate;\n  self.recordingLength = recordingLength;\n\n  // helper for intervals based blobs\n  var intervalsBasedBuffers = {\n    left: [],\n    right: [],\n    recordingLength: 0\n  };\n\n  // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\n  function looper() {\n    if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\n      return;\n    }\n    if (intervalsBasedBuffers.left.length) {\n      mergeLeftRightBuffers({\n        desiredSampRate: desiredSampRate,\n        sampleRate: sampleRate,\n        numberOfAudioChannels: numberOfAudioChannels,\n        internalInterleavedLength: intervalsBasedBuffers.recordingLength,\n        leftBuffers: intervalsBasedBuffers.left,\n        rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\n      }, function (buffer, view) {\n        var blob = new Blob([view], {\n          type: 'audio/wav'\n        });\n        config.ondataavailable(blob);\n        setTimeout(looper, config.timeSlice);\n      });\n      intervalsBasedBuffers = {\n        left: [],\n        right: [],\n        recordingLength: 0\n      };\n    } else {\n      setTimeout(looper, config.timeSlice);\n    }\n  }\n}\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\n}\n\n// _________________\n// CanvasRecorder.js\n\n/**\r\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\r\n * @summary HTML2Canvas recording into video WebM.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef CanvasRecorder\r\n * @class\r\n * @example\r\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\r\n * @param {object} config - {disableLogs:true, initCallback: function}\r\n */\n\nfunction CanvasRecorder(htmlElement, config) {\n  if (typeof html2canvas === 'undefined') {\n    throw 'Please link: https://www.webrtc-experiment.com/screenshot.js';\n  }\n  config = config || {};\n  if (!config.frameInterval) {\n    config.frameInterval = 10;\n  }\n\n  // via DetectRTC.js\n  var isCanvasSupportsStreamCapturing = false;\n  ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function (item) {\n    if (item in document.createElement('canvas')) {\n      isCanvasSupportsStreamCapturing = true;\n    }\n  });\n  var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\n  var chromeVersion = 50;\n  var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n  if (_isChrome && matchArray && matchArray[2]) {\n    chromeVersion = parseInt(matchArray[2], 10);\n  }\n  if (_isChrome && chromeVersion < 52) {\n    isCanvasSupportsStreamCapturing = false;\n  }\n  if (config.useWhammyRecorder) {\n    isCanvasSupportsStreamCapturing = false;\n  }\n  var globalCanvas, mediaStreamRecorder;\n  if (isCanvasSupportsStreamCapturing) {\n    if (!config.disableLogs) {\n      console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\n    }\n    if (htmlElement instanceof HTMLCanvasElement) {\n      globalCanvas = htmlElement;\n    } else if (htmlElement instanceof CanvasRenderingContext2D) {\n      globalCanvas = htmlElement.canvas;\n    } else {\n      throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\n    }\n  } else if (!!navigator.mozGetUserMedia) {\n    if (!config.disableLogs) {\n      console.error('Canvas recording is NOT supported in Firefox.');\n    }\n  }\n  var isRecording;\n\n  /**\r\n   * This method records Canvas.\r\n   * @method\r\n   * @memberof CanvasRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n  this.record = function () {\n    isRecording = true;\n    if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\n      // CanvasCaptureMediaStream\n      var canvasMediaStream;\n      if ('captureStream' in globalCanvas) {\n        canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\n      } else if ('mozCaptureStream' in globalCanvas) {\n        canvasMediaStream = globalCanvas.mozCaptureStream(25);\n      } else if ('webkitCaptureStream' in globalCanvas) {\n        canvasMediaStream = globalCanvas.webkitCaptureStream(25);\n      }\n      try {\n        var mdStream = new MediaStream();\n        mdStream.addTrack(getTracks(canvasMediaStream, 'video')[0]);\n        canvasMediaStream = mdStream;\n      } catch (e) {}\n      if (!canvasMediaStream) {\n        throw 'captureStream API are NOT available.';\n      }\n\n      // Note: Jan 18, 2016 status is that, \n      // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\n      mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\n        mimeType: config.mimeType || 'video/webm'\n      });\n      mediaStreamRecorder.record();\n    } else {\n      whammy.frames = [];\n      lastTime = new Date().getTime();\n      drawCanvasFrame();\n    }\n    if (config.initCallback) {\n      config.initCallback();\n    }\n  };\n  this.getWebPImages = function (callback) {\n    if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\n      callback();\n      return;\n    }\n    var framesLength = whammy.frames.length;\n    whammy.frames.forEach(function (frame, idx) {\n      var framesRemaining = framesLength - idx;\n      if (!config.disableLogs) {\n        console.log(framesRemaining + '/' + framesLength + ' frames remaining');\n      }\n      if (config.onEncodingCallback) {\n        config.onEncodingCallback(framesRemaining, framesLength);\n      }\n      var webp = frame.image.toDataURL('image/webp', 1);\n      whammy.frames[idx].image = webp;\n    });\n    if (!config.disableLogs) {\n      console.log('Generating WebM');\n    }\n    callback();\n  };\n\n  /**\r\n   * This method stops recording Canvas.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof CanvasRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n  this.stop = function (callback) {\n    isRecording = false;\n    var that = this;\n    if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\n      mediaStreamRecorder.stop(callback);\n      return;\n    }\n    this.getWebPImages(function () {\n      /**\r\n       * @property {Blob} blob - Recorded frames in video/webm blob.\r\n       * @memberof CanvasRecorder\r\n       * @example\r\n       * recorder.stop(function() {\r\n       *     var blob = recorder.blob;\r\n       * });\r\n       */\n      whammy.compile(function (blob) {\n        if (!config.disableLogs) {\n          console.log('Recording finished!');\n        }\n        that.blob = blob;\n        if (that.blob.forEach) {\n          that.blob = new Blob([], {\n            type: 'video/webm'\n          });\n        }\n        if (callback) {\n          callback(that.blob);\n        }\n        whammy.frames = [];\n      });\n    });\n  };\n  var isPausedRecording = false;\n\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof CanvasRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n  this.pause = function () {\n    isPausedRecording = true;\n    if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n      mediaStreamRecorder.pause();\n      return;\n    }\n  };\n\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof CanvasRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n  this.resume = function () {\n    isPausedRecording = false;\n    if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n      mediaStreamRecorder.resume();\n      return;\n    }\n    if (!isRecording) {\n      this.record();\n    }\n  };\n\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof CanvasRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n  this.clearRecordedData = function () {\n    if (isRecording) {\n      this.stop(clearRecordedDataCB);\n    }\n    clearRecordedDataCB();\n  };\n  function clearRecordedDataCB() {\n    whammy.frames = [];\n    isRecording = false;\n    isPausedRecording = false;\n  }\n\n  // for debugging\n  this.name = 'CanvasRecorder';\n  this.toString = function () {\n    return this.name;\n  };\n  function cloneCanvas() {\n    //create a new canvas\n    var newCanvas = document.createElement('canvas');\n    var context = newCanvas.getContext('2d');\n\n    //set dimensions\n    newCanvas.width = htmlElement.width;\n    newCanvas.height = htmlElement.height;\n\n    //apply the old canvas to the new one\n    context.drawImage(htmlElement, 0, 0);\n\n    //return the new canvas\n    return newCanvas;\n  }\n  function drawCanvasFrame() {\n    if (isPausedRecording) {\n      lastTime = new Date().getTime();\n      return setTimeout(drawCanvasFrame, 500);\n    }\n    if (htmlElement.nodeName.toLowerCase() === 'canvas') {\n      var duration = new Date().getTime() - lastTime;\n      // via #206, by Jack i.e. @Seymourr\n      lastTime = new Date().getTime();\n      whammy.frames.push({\n        image: cloneCanvas(),\n        duration: duration\n      });\n      if (isRecording) {\n        setTimeout(drawCanvasFrame, config.frameInterval);\n      }\n      return;\n    }\n    html2canvas(htmlElement, {\n      grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\n      onrendered: function (canvas) {\n        var duration = new Date().getTime() - lastTime;\n        if (!duration) {\n          return setTimeout(drawCanvasFrame, config.frameInterval);\n        }\n\n        // via #206, by Jack i.e. @Seymourr\n        lastTime = new Date().getTime();\n        whammy.frames.push({\n          image: canvas.toDataURL('image/webp', 1),\n          duration: duration\n        });\n        if (isRecording) {\n          setTimeout(drawCanvasFrame, config.frameInterval);\n        }\n      }\n    });\n  }\n  var lastTime = new Date().getTime();\n  var whammy = new Whammy.Video(100);\n}\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.CanvasRecorder = CanvasRecorder;\n}\n\n// _________________\n// WhammyRecorder.js\n\n/**\r\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\r\n * @summary Video recording feature in Chrome.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WhammyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WhammyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\r\n */\n\nfunction WhammyRecorder(mediaStream, config) {\n  config = config || {};\n  if (!config.frameInterval) {\n    config.frameInterval = 10;\n  }\n  if (!config.disableLogs) {\n    console.log('Using frames-interval:', config.frameInterval);\n  }\n\n  /**\r\n   * This method records video.\r\n   * @method\r\n   * @memberof WhammyRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n  this.record = function () {\n    if (!config.width) {\n      config.width = 320;\n    }\n    if (!config.height) {\n      config.height = 240;\n    }\n    if (!config.video) {\n      config.video = {\n        width: config.width,\n        height: config.height\n      };\n    }\n    if (!config.canvas) {\n      config.canvas = {\n        width: config.width,\n        height: config.height\n      };\n    }\n    canvas.width = config.canvas.width || 320;\n    canvas.height = config.canvas.height || 240;\n    context = canvas.getContext('2d');\n\n    // setting defaults\n    if (config.video && config.video instanceof HTMLVideoElement) {\n      video = config.video.cloneNode();\n      if (config.initCallback) {\n        config.initCallback();\n      }\n    } else {\n      video = document.createElement('video');\n      setSrcObject(mediaStream, video);\n      video.onloadedmetadata = function () {\n        // \"onloadedmetadata\" may NOT work in FF?\n        if (config.initCallback) {\n          config.initCallback();\n        }\n      };\n      video.width = config.video.width;\n      video.height = config.video.height;\n    }\n    video.muted = true;\n    video.play();\n    lastTime = new Date().getTime();\n    whammy = new Whammy.Video();\n    if (!config.disableLogs) {\n      console.log('canvas resolutions', canvas.width, '*', canvas.height);\n      console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\n    }\n    drawFrames(config.frameInterval);\n  };\n\n  /**\r\n   * Draw and push frames to Whammy\r\n   * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\r\n   */\n  function drawFrames(frameInterval) {\n    frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\n    var duration = new Date().getTime() - lastTime;\n    if (!duration) {\n      return setTimeout(drawFrames, frameInterval, frameInterval);\n    }\n    if (isPausedRecording) {\n      lastTime = new Date().getTime();\n      return setTimeout(drawFrames, 100);\n    }\n\n    // via #206, by Jack i.e. @Seymourr\n    lastTime = new Date().getTime();\n    if (video.paused) {\n      // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n      // Tweak for Android Chrome\n      video.play();\n    }\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    whammy.frames.push({\n      duration: duration,\n      image: canvas.toDataURL('image/webp')\n    });\n    if (!isStopDrawing) {\n      setTimeout(drawFrames, frameInterval, frameInterval);\n    }\n  }\n  function asyncLoop(o) {\n    var i = -1,\n      length = o.length;\n    (function loop() {\n      i++;\n      if (i === length) {\n        o.callback();\n        return;\n      }\n\n      // \"setTimeout\" added by Jim McLeod\n      setTimeout(function () {\n        o.functionToLoop(loop, i);\n      }, 1);\n    })();\n  }\n\n  /**\r\n   * remove black frames from the beginning to the specified frame\r\n   * @param {Array} _frames - array of frames to be checked\r\n   * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\r\n   * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\r\n   * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\r\n   * @returns {Array} - array of frames\r\n   */\n  // pull#293 by @volodalexey\n  function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\n    var localCanvas = document.createElement('canvas');\n    localCanvas.width = canvas.width;\n    localCanvas.height = canvas.height;\n    var context2d = localCanvas.getContext('2d');\n    var resultFrames = [];\n    var checkUntilNotBlack = _framesToCheck === -1;\n    var endCheckFrame = _framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length ? _framesToCheck : _frames.length;\n    var sampleColor = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var maxColorDifference = Math.sqrt(Math.pow(255, 2) + Math.pow(255, 2) + Math.pow(255, 2));\n    var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\n    var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\n    var doNotCheckNext = false;\n    asyncLoop({\n      length: endCheckFrame,\n      functionToLoop: function (loop, f) {\n        var matchPixCount, endPixCheck, maxPixCount;\n        var finishImage = function () {\n          if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\n            // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\n          } else {\n            // console.log('frame is passed : ' + f);\n            if (checkUntilNotBlack) {\n              doNotCheckNext = true;\n            }\n            resultFrames.push(_frames[f]);\n          }\n          loop();\n        };\n        if (!doNotCheckNext) {\n          var image = new Image();\n          image.onload = function () {\n            context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\n            var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\n            matchPixCount = 0;\n            endPixCheck = imageData.data.length;\n            maxPixCount = imageData.data.length / 4;\n            for (var pix = 0; pix < endPixCheck; pix += 4) {\n              var currentColor = {\n                r: imageData.data[pix],\n                g: imageData.data[pix + 1],\n                b: imageData.data[pix + 2]\n              };\n              var colorDifference = Math.sqrt(Math.pow(currentColor.r - sampleColor.r, 2) + Math.pow(currentColor.g - sampleColor.g, 2) + Math.pow(currentColor.b - sampleColor.b, 2));\n              // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\n              if (colorDifference <= maxColorDifference * pixTolerance) {\n                matchPixCount++;\n              }\n            }\n            finishImage();\n          };\n          image.src = _frames[f].image;\n        } else {\n          finishImage();\n        }\n      },\n      callback: function () {\n        resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\n        if (resultFrames.length <= 0) {\n          // at least one last frame should be available for next manipulation\n          // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\n          resultFrames.push(_frames[_frames.length - 1]);\n        }\n        callback(resultFrames);\n      }\n    });\n  }\n  var isStopDrawing = false;\n\n  /**\r\n   * This method stops recording video.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof WhammyRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n  this.stop = function (callback) {\n    callback = callback || function () {};\n    isStopDrawing = true;\n    var _this = this;\n    // analyse of all frames takes some time!\n    setTimeout(function () {\n      // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\n      // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\n      // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\n      dropBlackFrames(whammy.frames, -1, null, null, function (frames) {\n        whammy.frames = frames;\n\n        // to display advertisement images!\n        if (config.advertisement && config.advertisement.length) {\n          whammy.frames = config.advertisement.concat(whammy.frames);\n        }\n\n        /**\r\n         * @property {Blob} blob - Recorded frames in video/webm blob.\r\n         * @memberof WhammyRecorder\r\n         * @example\r\n         * recorder.stop(function() {\r\n         *     var blob = recorder.blob;\r\n         * });\r\n         */\n        whammy.compile(function (blob) {\n          _this.blob = blob;\n          if (_this.blob.forEach) {\n            _this.blob = new Blob([], {\n              type: 'video/webm'\n            });\n          }\n          if (callback) {\n            callback(_this.blob);\n          }\n        });\n      });\n    }, 10);\n  };\n  var isPausedRecording = false;\n\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof WhammyRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n  this.pause = function () {\n    isPausedRecording = true;\n  };\n\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof WhammyRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n  this.resume = function () {\n    isPausedRecording = false;\n    if (isStopDrawing) {\n      this.record();\n    }\n  };\n\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof WhammyRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n  this.clearRecordedData = function () {\n    if (!isStopDrawing) {\n      this.stop(clearRecordedDataCB);\n    }\n    clearRecordedDataCB();\n  };\n  function clearRecordedDataCB() {\n    whammy.frames = [];\n    isStopDrawing = true;\n    isPausedRecording = false;\n  }\n\n  // for debugging\n  this.name = 'WhammyRecorder';\n  this.toString = function () {\n    return this.name;\n  };\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  var video;\n  var lastTime;\n  var whammy;\n}\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.WhammyRecorder = WhammyRecorder;\n}\n\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\n// _________\n// Whammy.js\n\n// todo: Firefox now supports webp for webm containers!\n// their MediaRecorder implementation works well!\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\n\n/**\r\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\r\n * @summary A real time javascript webm encoder based on a canvas hack.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef Whammy\r\n * @class\r\n * @example\r\n * var recorder = new Whammy().Video(15);\r\n * recorder.add(context || canvas || dataURL);\r\n * var output = recorder.compile();\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\n\nvar Whammy = function () {\n  // a more abstract-ish API\n\n  function WhammyVideo(duration) {\n    this.frames = [];\n    this.duration = duration || 1;\n    this.quality = 0.8;\n  }\n\n  /**\r\n   * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\r\n   * @method\r\n   * @memberof Whammy\r\n   * @example\r\n   * recorder = new Whammy().Video(0.8, 100);\r\n   * recorder.add(canvas || context || 'image/webp');\r\n   * @param {string} frame - Canvas || Context || image/webp\r\n   * @param {number} duration - Stick a duration (in milliseconds)\r\n   */\n  WhammyVideo.prototype.add = function (frame, duration) {\n    if ('canvas' in frame) {\n      //CanvasRenderingContext2D\n      frame = frame.canvas;\n    }\n    if ('toDataURL' in frame) {\n      frame = frame.toDataURL('image/webp', this.quality);\n    }\n    if (!/^data:image\\/webp;base64,/ig.test(frame)) {\n      throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\n    }\n    this.frames.push({\n      image: frame,\n      duration: duration || this.duration\n    });\n  };\n  function processInWebWorker(_function) {\n    var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n      type: 'application/javascript'\n    }));\n    var worker = new Worker(blob);\n    URL.revokeObjectURL(blob);\n    return worker;\n  }\n  function whammyInWebWorker(frames) {\n    function ArrayToWebM(frames) {\n      var info = checkFrames(frames);\n      if (!info) {\n        return [];\n      }\n      var clusterMaxDuration = 30000;\n      var EBML = [{\n        'id': 0x1a45dfa3,\n        // EBML\n        'data': [{\n          'data': 1,\n          'id': 0x4286 // EBMLVersion\n        }, {\n          'data': 1,\n          'id': 0x42f7 // EBMLReadVersion\n        }, {\n          'data': 4,\n          'id': 0x42f2 // EBMLMaxIDLength\n        }, {\n          'data': 8,\n          'id': 0x42f3 // EBMLMaxSizeLength\n        }, {\n          'data': 'webm',\n          'id': 0x4282 // DocType\n        }, {\n          'data': 2,\n          'id': 0x4287 // DocTypeVersion\n        }, {\n          'data': 2,\n          'id': 0x4285 // DocTypeReadVersion\n        }]\n      }, {\n        'id': 0x18538067,\n        // Segment\n        'data': [{\n          'id': 0x1549a966,\n          // Info\n          'data': [{\n            'data': 1e6,\n            //do things in millisecs (num of nanosecs for duration scale)\n            'id': 0x2ad7b1 // TimecodeScale\n          }, {\n            'data': 'whammy',\n            'id': 0x4d80 // MuxingApp\n          }, {\n            'data': 'whammy',\n            'id': 0x5741 // WritingApp\n          }, {\n            'data': doubleToString(info.duration),\n            'id': 0x4489 // Duration\n          }]\n        }, {\n          'id': 0x1654ae6b,\n          // Tracks\n          'data': [{\n            'id': 0xae,\n            // TrackEntry\n            'data': [{\n              'data': 1,\n              'id': 0xd7 // TrackNumber\n            }, {\n              'data': 1,\n              'id': 0x73c5 // TrackUID\n            }, {\n              'data': 0,\n              'id': 0x9c // FlagLacing\n            }, {\n              'data': 'und',\n              'id': 0x22b59c // Language\n            }, {\n              'data': 'V_VP8',\n              'id': 0x86 // CodecID\n            }, {\n              'data': 'VP8',\n              'id': 0x258688 // CodecName\n            }, {\n              'data': 1,\n              'id': 0x83 // TrackType\n            }, {\n              'id': 0xe0,\n              // Video\n              'data': [{\n                'data': info.width,\n                'id': 0xb0 // PixelWidth\n              }, {\n                'data': info.height,\n                'id': 0xba // PixelHeight\n              }]\n            }]\n          }]\n        }]\n      }];\n\n      //Generate clusters (max duration)\n      var frameNumber = 0;\n      var clusterTimecode = 0;\n      while (frameNumber < frames.length) {\n        var clusterFrames = [];\n        var clusterDuration = 0;\n        do {\n          clusterFrames.push(frames[frameNumber]);\n          clusterDuration += frames[frameNumber].duration;\n          frameNumber++;\n        } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\n        var clusterCounter = 0;\n        var cluster = {\n          'id': 0x1f43b675,\n          // Cluster\n          'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\n        }; //Add cluster to segment\n        EBML[1].data.push(cluster);\n        clusterTimecode += clusterDuration;\n      }\n      return generateEBML(EBML);\n    }\n    function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\n      return [{\n        'data': clusterTimecode,\n        'id': 0xe7 // Timecode\n      }].concat(clusterFrames.map(function (webp) {\n        var block = makeSimpleBlock({\n          discardable: 0,\n          frame: webp.data.slice(4),\n          invisible: 0,\n          keyframe: 1,\n          lacing: 0,\n          trackNum: 1,\n          timecode: Math.round(clusterCounter)\n        });\n        clusterCounter += webp.duration;\n        return {\n          data: block,\n          id: 0xa3\n        };\n      }));\n    }\n\n    // sums the lengths of all the frames and gets the duration\n\n    function checkFrames(frames) {\n      if (!frames[0]) {\n        postMessage({\n          error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\n        });\n        return;\n      }\n      var width = frames[0].width,\n        height = frames[0].height,\n        duration = frames[0].duration;\n      for (var i = 1; i < frames.length; i++) {\n        duration += frames[i].duration;\n      }\n      return {\n        duration: duration,\n        width: width,\n        height: height\n      };\n    }\n    function numToBuffer(num) {\n      var parts = [];\n      while (num > 0) {\n        parts.push(num & 0xff);\n        num = num >> 8;\n      }\n      return new Uint8Array(parts.reverse());\n    }\n    function strToBuffer(str) {\n      return new Uint8Array(str.split('').map(function (e) {\n        return e.charCodeAt(0);\n      }));\n    }\n    function bitsToBuffer(bits) {\n      var data = [];\n      var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n      bits = pad + bits;\n      for (var i = 0; i < bits.length; i += 8) {\n        data.push(parseInt(bits.substr(i, 8), 2));\n      }\n      return new Uint8Array(data);\n    }\n    function generateEBML(json) {\n      var ebml = [];\n      for (var i = 0; i < json.length; i++) {\n        var data = json[i].data;\n        if (typeof data === 'object') {\n          data = generateEBML(data);\n        }\n        if (typeof data === 'number') {\n          data = bitsToBuffer(data.toString(2));\n        }\n        if (typeof data === 'string') {\n          data = strToBuffer(data);\n        }\n        var len = data.size || data.byteLength || data.length;\n        var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\n        var sizeToString = len.toString(2);\n        var padded = new Array(zeroes * 7 + 7 + 1 - sizeToString.length).join('0') + sizeToString;\n        var size = new Array(zeroes).join('0') + '1' + padded;\n        ebml.push(numToBuffer(json[i].id));\n        ebml.push(bitsToBuffer(size));\n        ebml.push(data);\n      }\n      return new Blob(ebml, {\n        type: 'video/webm'\n      });\n    }\n    function toBinStrOld(bits) {\n      var data = '';\n      var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n      bits = pad + bits;\n      for (var i = 0; i < bits.length; i += 8) {\n        data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\n      }\n      return data;\n    }\n    function makeSimpleBlock(data) {\n      var flags = 0;\n      if (data.keyframe) {\n        flags |= 128;\n      }\n      if (data.invisible) {\n        flags |= 8;\n      }\n      if (data.lacing) {\n        flags |= data.lacing << 1;\n      }\n      if (data.discardable) {\n        flags |= 1;\n      }\n      if (data.trackNum > 127) {\n        throw 'TrackNumber > 127 not supported';\n      }\n      var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function (e) {\n        return String.fromCharCode(e);\n      }).join('') + data.frame;\n      return out;\n    }\n    function parseWebP(riff) {\n      var VP8 = riff.RIFF[0].WEBP[0];\n      var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\n      for (var i = 0, c = []; i < 4; i++) {\n        c[i] = VP8.charCodeAt(frameStart + 3 + i);\n      }\n      var width, height, tmp;\n\n      //the code below is literally copied verbatim from the bitstream spec\n      tmp = c[1] << 8 | c[0];\n      width = tmp & 0x3FFF;\n      tmp = c[3] << 8 | c[2];\n      height = tmp & 0x3FFF;\n      return {\n        width: width,\n        height: height,\n        data: VP8,\n        riff: riff\n      };\n    }\n    function getStrLength(string, offset) {\n      return parseInt(string.substr(offset + 4, 4).split('').map(function (i) {\n        var unpadded = i.charCodeAt(0).toString(2);\n        return new Array(8 - unpadded.length + 1).join('0') + unpadded;\n      }).join(''), 2);\n    }\n    function parseRIFF(string) {\n      var offset = 0;\n      var chunks = {};\n      while (offset < string.length) {\n        var id = string.substr(offset, 4);\n        var len = getStrLength(string, offset);\n        var data = string.substr(offset + 4 + 4, len);\n        offset += 4 + 4 + len;\n        chunks[id] = chunks[id] || [];\n        if (id === 'RIFF' || id === 'LIST') {\n          chunks[id].push(parseRIFF(data));\n        } else {\n          chunks[id].push(data);\n        }\n      }\n      return chunks;\n    }\n    function doubleToString(num) {\n      return [].slice.call(new Uint8Array(new Float64Array([num]).buffer), 0).map(function (e) {\n        return String.fromCharCode(e);\n      }).reverse().join('');\n    }\n    var webm = new ArrayToWebM(frames.map(function (frame) {\n      var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\n      webp.duration = frame.duration;\n      return webp;\n    }));\n    postMessage(webm);\n  }\n\n  /**\r\n   * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof Whammy\r\n   * @example\r\n   * recorder = new Whammy().Video(0.8, 100);\r\n   * recorder.compile(function(blob) {\r\n   *    // blob.size - blob.type\r\n   * });\r\n   */\n  WhammyVideo.prototype.compile = function (callback) {\n    var webWorker = processInWebWorker(whammyInWebWorker);\n    webWorker.onmessage = function (event) {\n      if (event.data.error) {\n        console.error(event.data.error);\n        return;\n      }\n      callback(event.data);\n    };\n    webWorker.postMessage(this.frames);\n  };\n  return {\n    /**\r\n     * A more abstract-ish API.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * @param {?number} speed - 0.8\r\n     * @param {?number} quality - 100\r\n     */\n    Video: WhammyVideo\n  };\n}();\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.Whammy = Whammy;\n}\n\n// ______________ (indexed-db)\n// DiskStorage.js\n\n/**\r\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\r\n * @summary Writing blobs into IndexedDB.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * DiskStorage.Store({\r\n *     audioBlob: yourAudioBlob,\r\n *     videoBlob: yourVideoBlob,\r\n *     gifBlob  : yourGifBlob\r\n * });\r\n * DiskStorage.Fetch(function(dataURL, type) {\r\n *     if(type === 'audioBlob') { }\r\n *     if(type === 'videoBlob') { }\r\n *     if(type === 'gifBlob')   { }\r\n * });\r\n * // DiskStorage.dataStoreName = 'recordRTC';\r\n * // DiskStorage.onError = function(error) { };\r\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\r\n * @property {function} Store - This method stores blobs in IndexedDB.\r\n * @property {function} onError - This function is invoked for any known/unknown error.\r\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\n\nvar DiskStorage = {\n  /**\r\n   * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n   * @method\r\n   * @memberof DiskStorage\r\n   * @internal\r\n   * @example\r\n   * DiskStorage.init();\r\n   */\n  init: function () {\n    var self = this;\n    if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\n      console.error('IndexedDB API are not available in this browser.');\n      return;\n    }\n    var dbVersion = 1;\n    var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\n      db;\n    var request = indexedDB.open(dbName, dbVersion);\n    function createObjectStore(dataBase) {\n      dataBase.createObjectStore(self.dataStoreName);\n    }\n    function putInDB() {\n      var transaction = db.transaction([self.dataStoreName], 'readwrite');\n      if (self.videoBlob) {\n        transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\n      }\n      if (self.gifBlob) {\n        transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\n      }\n      if (self.audioBlob) {\n        transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\n      }\n      function getFromStore(portionName) {\n        transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function (event) {\n          if (self.callback) {\n            self.callback(event.target.result, portionName);\n          }\n        };\n      }\n      getFromStore('audioBlob');\n      getFromStore('videoBlob');\n      getFromStore('gifBlob');\n    }\n    request.onerror = self.onError;\n    request.onsuccess = function () {\n      db = request.result;\n      db.onerror = self.onError;\n      if (db.setVersion) {\n        if (db.version !== dbVersion) {\n          var setVersion = db.setVersion(dbVersion);\n          setVersion.onsuccess = function () {\n            createObjectStore(db);\n            putInDB();\n          };\n        } else {\n          putInDB();\n        }\n      } else {\n        putInDB();\n      }\n    };\n    request.onupgradeneeded = function (event) {\n      createObjectStore(event.target.result);\n    };\n  },\n  /**\r\n   * This method fetches stored blobs from IndexedDB.\r\n   * @method\r\n   * @memberof DiskStorage\r\n   * @internal\r\n   * @example\r\n   * DiskStorage.Fetch(function(dataURL, type) {\r\n   *     if(type === 'audioBlob') { }\r\n   *     if(type === 'videoBlob') { }\r\n   *     if(type === 'gifBlob')   { }\r\n   * });\r\n   */\n  Fetch: function (callback) {\n    this.callback = callback;\n    this.init();\n    return this;\n  },\n  /**\r\n   * This method stores blobs in IndexedDB.\r\n   * @method\r\n   * @memberof DiskStorage\r\n   * @internal\r\n   * @example\r\n   * DiskStorage.Store({\r\n   *     audioBlob: yourAudioBlob,\r\n   *     videoBlob: yourVideoBlob,\r\n   *     gifBlob  : yourGifBlob\r\n   * });\r\n   */\n  Store: function (config) {\n    this.audioBlob = config.audioBlob;\n    this.videoBlob = config.videoBlob;\n    this.gifBlob = config.gifBlob;\n    this.init();\n    return this;\n  },\n  /**\r\n   * This function is invoked for any known/unknown error.\r\n   * @method\r\n   * @memberof DiskStorage\r\n   * @internal\r\n   * @example\r\n   * DiskStorage.onError = function(error){\r\n   *     alerot( JSON.stringify(error) );\r\n   * };\r\n   */\n  onError: function (error) {\n    console.error(JSON.stringify(error, null, '\\t'));\n  },\n  /**\r\n   * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n   * @memberof DiskStorage\r\n   * @internal\r\n   * @example\r\n   * DiskStorage.dataStoreName = 'recordRTC';\r\n   */\n  dataStoreName: 'recordRTC',\n  dbName: null\n};\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.DiskStorage = DiskStorage;\n}\n\n// ______________\n// GifRecorder.js\n\n/**\r\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GifRecorder\r\n * @class\r\n * @example\r\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     img.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\r\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\r\n */\n\nfunction GifRecorder(mediaStream, config) {\n  if (typeof GIFEncoder === 'undefined') {\n    var script = document.createElement('script');\n    script.src = 'https://www.webrtc-experiment.com/gif-recorder.js';\n    (document.body || document.documentElement).appendChild(script);\n  }\n  config = config || {};\n  var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\n\n  /**\r\n   * This method records MediaStream.\r\n   * @method\r\n   * @memberof GifRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n  this.record = function () {\n    if (typeof GIFEncoder === 'undefined') {\n      setTimeout(self.record, 1000);\n      return;\n    }\n    if (!isLoadedMetaData) {\n      setTimeout(self.record, 1000);\n      return;\n    }\n    if (!isHTMLObject) {\n      if (!config.width) {\n        config.width = video.offsetWidth || 320;\n      }\n      if (!config.height) {\n        config.height = video.offsetHeight || 240;\n      }\n      if (!config.video) {\n        config.video = {\n          width: config.width,\n          height: config.height\n        };\n      }\n      if (!config.canvas) {\n        config.canvas = {\n          width: config.width,\n          height: config.height\n        };\n      }\n      canvas.width = config.canvas.width || 320;\n      canvas.height = config.canvas.height || 240;\n      video.width = config.video.width || 320;\n      video.height = config.video.height || 240;\n    }\n\n    // external library to record as GIF images\n    gifEncoder = new GIFEncoder();\n\n    // void setRepeat(int iter) \n    // Sets the number of times the set of GIF frames should be played. \n    // Default is 1; 0 means play indefinitely.\n    gifEncoder.setRepeat(0);\n\n    // void setFrameRate(Number fps) \n    // Sets frame rate in frames per second. \n    // Equivalent to setDelay(1000/fps).\n    // Using \"setDelay\" instead of \"setFrameRate\"\n    gifEncoder.setDelay(config.frameRate || 200);\n\n    // void setQuality(int quality) \n    // Sets quality of color quantization (conversion of images to the \n    // maximum 256 colors allowed by the GIF specification). \n    // Lower values (minimum = 1) produce better colors, \n    // but slow processing significantly. 10 is the default, \n    // and produces good color mapping at reasonable speeds. \n    // Values greater than 20 do not yield significant improvements in speed.\n    gifEncoder.setQuality(config.quality || 10);\n\n    // Boolean start() \n    // This writes the GIF Header and returns false if it fails.\n    gifEncoder.start();\n    if (typeof config.onGifRecordingStarted === 'function') {\n      config.onGifRecordingStarted();\n    }\n    startTime = Date.now();\n    function drawVideoFrame(time) {\n      if (self.clearedRecordedData === true) {\n        return;\n      }\n      if (isPausedRecording) {\n        return setTimeout(function () {\n          drawVideoFrame(time);\n        }, 100);\n      }\n      lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n      if (typeof lastFrameTime === undefined) {\n        lastFrameTime = time;\n      }\n\n      // ~10 fps\n      if (time - lastFrameTime < 90) {\n        return;\n      }\n      if (!isHTMLObject && video.paused) {\n        // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n        // Tweak for Android Chrome\n        video.play();\n      }\n      if (!isHTMLObject) {\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n      }\n      if (config.onGifPreview) {\n        config.onGifPreview(canvas.toDataURL('image/png'));\n      }\n      gifEncoder.addFrame(context);\n      lastFrameTime = time;\n    }\n    lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n    if (config.initCallback) {\n      config.initCallback();\n    }\n  };\n\n  /**\r\n   * This method stops recording MediaStream.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof GifRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     img.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n  this.stop = function (callback) {\n    callback = callback || function () {};\n    if (lastAnimationFrame) {\n      cancelAnimationFrame(lastAnimationFrame);\n    }\n    endTime = Date.now();\n\n    /**\r\n     * @property {Blob} blob - The recorded blob object.\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.stop(function(){\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\n    this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\n      type: 'image/gif'\n    });\n    callback(this.blob);\n\n    // bug: find a way to clear old recorded blobs\n    gifEncoder.stream().bin = [];\n  };\n  var isPausedRecording = false;\n\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof GifRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n  this.pause = function () {\n    isPausedRecording = true;\n  };\n\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof GifRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n  this.resume = function () {\n    isPausedRecording = false;\n  };\n\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof GifRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n  this.clearRecordedData = function () {\n    self.clearedRecordedData = true;\n    clearRecordedDataCB();\n  };\n  function clearRecordedDataCB() {\n    if (gifEncoder) {\n      gifEncoder.stream().bin = [];\n    }\n  }\n\n  // for debugging\n  this.name = 'GifRecorder';\n  this.toString = function () {\n    return this.name;\n  };\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  if (isHTMLObject) {\n    if (mediaStream instanceof CanvasRenderingContext2D) {\n      context = mediaStream;\n      canvas = context.canvas;\n    } else if (mediaStream instanceof HTMLCanvasElement) {\n      context = mediaStream.getContext('2d');\n      canvas = mediaStream;\n    }\n  }\n  var isLoadedMetaData = true;\n  if (!isHTMLObject) {\n    var video = document.createElement('video');\n    video.muted = true;\n    video.autoplay = true;\n    video.playsInline = true;\n    isLoadedMetaData = false;\n    video.onloadedmetadata = function () {\n      isLoadedMetaData = true;\n    };\n    setSrcObject(mediaStream, video);\n    video.play();\n  }\n  var lastAnimationFrame = null;\n  var startTime, endTime, lastFrameTime;\n  var gifEncoder;\n  var self = this;\n}\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.GifRecorder = GifRecorder;\n}\n\n// Last time updated: 2019-06-21 4:09:42 AM UTC\n\n// ________________________\n// MultiStreamsMixer v1.2.2\n\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\n\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\nfunction MultiStreamsMixer(arrayOfMediaStreams, elementClass) {\n  var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n  (function (that) {\n    if (typeof RecordRTC !== 'undefined') {\n      return;\n    }\n    if (!that) {\n      return;\n    }\n    if (typeof window !== 'undefined') {\n      return;\n    }\n    if (typeof global === 'undefined') {\n      return;\n    }\n    global.navigator = {\n      userAgent: browserFakeUserAgent,\n      getUserMedia: function () {}\n    };\n    if (!global.console) {\n      global.console = {};\n    }\n    if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\n      global.console.error = global.console.log = global.console.log || function () {\n        console.log(arguments);\n      };\n    }\n    if (typeof document === 'undefined') {\n      /*global document:true */\n      that.document = {\n        documentElement: {\n          appendChild: function () {\n            return '';\n          }\n        }\n      };\n      document.createElement = document.captureStream = document.mozCaptureStream = function () {\n        var obj = {\n          getContext: function () {\n            return obj;\n          },\n          play: function () {},\n          pause: function () {},\n          drawImage: function () {},\n          toDataURL: function () {\n            return '';\n          },\n          style: {}\n        };\n        return obj;\n      };\n      that.HTMLVideoElement = function () {};\n    }\n    if (typeof location === 'undefined') {\n      /*global location:true */\n      that.location = {\n        protocol: 'file:',\n        href: '',\n        hash: ''\n      };\n    }\n    if (typeof screen === 'undefined') {\n      /*global screen:true */\n      that.screen = {\n        width: 0,\n        height: 0\n      };\n    }\n    if (typeof URL === 'undefined') {\n      /*global screen:true */\n      that.URL = {\n        createObjectURL: function () {\n          return '';\n        },\n        revokeObjectURL: function () {\n          return '';\n        }\n      };\n    }\n\n    /*global window:true */\n    that.window = global;\n  })(typeof global !== 'undefined' ? global : null);\n\n  // requires: chrome://flags/#enable-experimental-web-platform-features\n\n  elementClass = elementClass || 'multi-streams-mixer';\n  var videos = [];\n  var isStopDrawingFrames = false;\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  canvas.style.opacity = 0;\n  canvas.style.position = 'absolute';\n  canvas.style.zIndex = -1;\n  canvas.style.top = '-1000em';\n  canvas.style.left = '-1000em';\n  canvas.className = elementClass;\n  (document.body || document.documentElement).appendChild(canvas);\n  this.disableLogs = false;\n  this.frameInterval = 10;\n  this.width = 360;\n  this.height = 240;\n\n  // use gain node to prevent echo\n  this.useGainNode = true;\n  var self = this;\n\n  // _____________________________\n  // Cross-Browser-Declarations.js\n\n  // WebAudio API representer\n  var AudioContext = window.AudioContext;\n  if (typeof AudioContext === 'undefined') {\n    if (typeof webkitAudioContext !== 'undefined') {\n      /*global AudioContext:true */\n      AudioContext = webkitAudioContext;\n    }\n    if (typeof mozAudioContext !== 'undefined') {\n      /*global AudioContext:true */\n      AudioContext = mozAudioContext;\n    }\n  }\n\n  /*jshint -W079 */\n  var URL = window.URL;\n  if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n    /*global URL:true */\n    URL = webkitURL;\n  }\n  if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') {\n    // maybe window.navigator?\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n      navigator.getUserMedia = navigator.webkitGetUserMedia;\n    }\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\n      navigator.getUserMedia = navigator.mozGetUserMedia;\n    }\n  }\n  var MediaStream = window.MediaStream;\n  if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n    MediaStream = webkitMediaStream;\n  }\n\n  /*global MediaStream:true */\n  if (typeof MediaStream !== 'undefined') {\n    // override \"stop\" method for all browsers\n    if (typeof MediaStream.prototype.stop === 'undefined') {\n      MediaStream.prototype.stop = function () {\n        this.getTracks().forEach(function (track) {\n          track.stop();\n        });\n      };\n    }\n  }\n  var Storage = {};\n  if (typeof AudioContext !== 'undefined') {\n    Storage.AudioContext = AudioContext;\n  } else if (typeof webkitAudioContext !== 'undefined') {\n    Storage.AudioContext = webkitAudioContext;\n  }\n  function setSrcObject(stream, element) {\n    if ('srcObject' in element) {\n      element.srcObject = stream;\n    } else if ('mozSrcObject' in element) {\n      element.mozSrcObject = stream;\n    } else {\n      element.srcObject = stream;\n    }\n  }\n  this.startDrawingFrames = function () {\n    drawVideosToCanvas();\n  };\n  function drawVideosToCanvas() {\n    if (isStopDrawingFrames) {\n      return;\n    }\n    var videosLength = videos.length;\n    var fullcanvas = false;\n    var remaining = [];\n    videos.forEach(function (video) {\n      if (!video.stream) {\n        video.stream = {};\n      }\n      if (video.stream.fullcanvas) {\n        fullcanvas = video;\n      } else {\n        // todo: video.stream.active or video.stream.live to fix blank frames issues?\n        remaining.push(video);\n      }\n    });\n    if (fullcanvas) {\n      canvas.width = fullcanvas.stream.width;\n      canvas.height = fullcanvas.stream.height;\n    } else if (remaining.length) {\n      canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\n      var height = 1;\n      if (videosLength === 3 || videosLength === 4) {\n        height = 2;\n      }\n      if (videosLength === 5 || videosLength === 6) {\n        height = 3;\n      }\n      if (videosLength === 7 || videosLength === 8) {\n        height = 4;\n      }\n      if (videosLength === 9 || videosLength === 10) {\n        height = 5;\n      }\n      canvas.height = remaining[0].height * height;\n    } else {\n      canvas.width = self.width || 360;\n      canvas.height = self.height || 240;\n    }\n    if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\n      drawImage(fullcanvas);\n    }\n    remaining.forEach(function (video, idx) {\n      drawImage(video, idx);\n    });\n    setTimeout(drawVideosToCanvas, self.frameInterval);\n  }\n  function drawImage(video, idx) {\n    if (isStopDrawingFrames) {\n      return;\n    }\n    var x = 0;\n    var y = 0;\n    var width = video.width;\n    var height = video.height;\n    if (idx === 1) {\n      x = video.width;\n    }\n    if (idx === 2) {\n      y = video.height;\n    }\n    if (idx === 3) {\n      x = video.width;\n      y = video.height;\n    }\n    if (idx === 4) {\n      y = video.height * 2;\n    }\n    if (idx === 5) {\n      x = video.width;\n      y = video.height * 2;\n    }\n    if (idx === 6) {\n      y = video.height * 3;\n    }\n    if (idx === 7) {\n      x = video.width;\n      y = video.height * 3;\n    }\n    if (typeof video.stream.left !== 'undefined') {\n      x = video.stream.left;\n    }\n    if (typeof video.stream.top !== 'undefined') {\n      y = video.stream.top;\n    }\n    if (typeof video.stream.width !== 'undefined') {\n      width = video.stream.width;\n    }\n    if (typeof video.stream.height !== 'undefined') {\n      height = video.stream.height;\n    }\n    context.drawImage(video, x, y, width, height);\n    if (typeof video.stream.onRender === 'function') {\n      video.stream.onRender(context, x, y, width, height, idx);\n    }\n  }\n  function getMixedStream() {\n    isStopDrawingFrames = false;\n    var mixedVideoStream = getMixedVideoStream();\n    var mixedAudioStream = getMixedAudioStream();\n    if (mixedAudioStream) {\n      mixedAudioStream.getTracks().filter(function (t) {\n        return t.kind === 'audio';\n      }).forEach(function (track) {\n        mixedVideoStream.addTrack(track);\n      });\n    }\n    var fullcanvas;\n    arrayOfMediaStreams.forEach(function (stream) {\n      if (stream.fullcanvas) {\n        fullcanvas = true;\n      }\n    });\n\n    // mixedVideoStream.prototype.appendStreams = appendStreams;\n    // mixedVideoStream.prototype.resetVideoStreams = resetVideoStreams;\n    // mixedVideoStream.prototype.clearRecordedData = clearRecordedData;\n\n    return mixedVideoStream;\n  }\n  function getMixedVideoStream() {\n    resetVideoStreams();\n    var capturedStream;\n    if ('captureStream' in canvas) {\n      capturedStream = canvas.captureStream();\n    } else if ('mozCaptureStream' in canvas) {\n      capturedStream = canvas.mozCaptureStream();\n    } else if (!self.disableLogs) {\n      console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\n    }\n    var videoStream = new MediaStream();\n    capturedStream.getTracks().filter(function (t) {\n      return t.kind === 'video';\n    }).forEach(function (track) {\n      videoStream.addTrack(track);\n    });\n    canvas.stream = videoStream;\n    return videoStream;\n  }\n  function getMixedAudioStream() {\n    // via: @pehrsons\n    if (!Storage.AudioContextConstructor) {\n      Storage.AudioContextConstructor = new Storage.AudioContext();\n    }\n    self.audioContext = Storage.AudioContextConstructor;\n    self.audioSources = [];\n    if (self.useGainNode === true) {\n      self.gainNode = self.audioContext.createGain();\n      self.gainNode.connect(self.audioContext.destination);\n      self.gainNode.gain.value = 0; // don't hear self\n    }\n\n    var audioTracksLength = 0;\n    arrayOfMediaStreams.forEach(function (stream) {\n      if (!stream.getTracks().filter(function (t) {\n        return t.kind === 'audio';\n      }).length) {\n        return;\n      }\n      audioTracksLength++;\n      var audioSource = self.audioContext.createMediaStreamSource(stream);\n      if (self.useGainNode === true) {\n        audioSource.connect(self.gainNode);\n      }\n      self.audioSources.push(audioSource);\n    });\n    if (!audioTracksLength) {\n      // because \"self.audioContext\" is not initialized\n      // that's why we've to ignore rest of the code\n      return;\n    }\n    self.audioDestination = self.audioContext.createMediaStreamDestination();\n    self.audioSources.forEach(function (audioSource) {\n      audioSource.connect(self.audioDestination);\n    });\n    return self.audioDestination.stream;\n  }\n  function getVideo(stream) {\n    var video = document.createElement('video');\n    setSrcObject(stream, video);\n    video.className = elementClass;\n    video.muted = true;\n    video.volume = 0;\n    video.width = stream.width || self.width || 360;\n    video.height = stream.height || self.height || 240;\n    video.play();\n    return video;\n  }\n  this.appendStreams = function (streams) {\n    if (!streams) {\n      throw 'First parameter is required.';\n    }\n    if (!(streams instanceof Array)) {\n      streams = [streams];\n    }\n    streams.forEach(function (stream) {\n      var newStream = new MediaStream();\n      if (stream.getTracks().filter(function (t) {\n        return t.kind === 'video';\n      }).length) {\n        var video = getVideo(stream);\n        video.stream = stream;\n        videos.push(video);\n        newStream.addTrack(stream.getTracks().filter(function (t) {\n          return t.kind === 'video';\n        })[0]);\n      }\n      if (stream.getTracks().filter(function (t) {\n        return t.kind === 'audio';\n      }).length) {\n        var audioSource = self.audioContext.createMediaStreamSource(stream);\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\n        audioSource.connect(self.audioDestination);\n        newStream.addTrack(self.audioDestination.stream.getTracks().filter(function (t) {\n          return t.kind === 'audio';\n        })[0]);\n      }\n      arrayOfMediaStreams.push(newStream);\n    });\n  };\n  this.releaseStreams = function () {\n    videos = [];\n    isStopDrawingFrames = true;\n    if (self.gainNode) {\n      self.gainNode.disconnect();\n      self.gainNode = null;\n    }\n    if (self.audioSources.length) {\n      self.audioSources.forEach(function (source) {\n        source.disconnect();\n      });\n      self.audioSources = [];\n    }\n    if (self.audioDestination) {\n      self.audioDestination.disconnect();\n      self.audioDestination = null;\n    }\n    if (self.audioContext) {\n      self.audioContext.close();\n    }\n    self.audioContext = null;\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    if (canvas.stream) {\n      canvas.stream.stop();\n      canvas.stream = null;\n    }\n  };\n  this.resetVideoStreams = function (streams) {\n    if (streams && !(streams instanceof Array)) {\n      streams = [streams];\n    }\n    resetVideoStreams(streams);\n  };\n  function resetVideoStreams(streams) {\n    videos = [];\n    streams = streams || arrayOfMediaStreams;\n\n    // via: @adrian-ber\n    streams.forEach(function (stream) {\n      if (!stream.getTracks().filter(function (t) {\n        return t.kind === 'video';\n      }).length) {\n        return;\n      }\n      var video = getVideo(stream);\n      video.stream = stream;\n      videos.push(video);\n    });\n  }\n\n  // for debugging\n  this.name = 'MultiStreamsMixer';\n  this.toString = function () {\n    return this.name;\n  };\n  this.getMixedStream = getMixedStream;\n}\nif (typeof RecordRTC === 'undefined') {\n  if (typeof module !== 'undefined' /* && !!module.exports*/) {\n    module.exports = MultiStreamsMixer;\n  }\n  if (typeof define === 'function' && define.amd) {\n    define('MultiStreamsMixer', [], function () {\n      return MultiStreamsMixer;\n    });\n  }\n}\n\n// ______________________\n// MultiStreamRecorder.js\n\n/*\r\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\r\n */\n\n/**\r\n * MultiStreamRecorder can record multiple videos in single container.\r\n * @summary Multi-videos recorder.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MultiStreamRecorder\r\n * @class\r\n * @example\r\n * var options = {\r\n *     mimeType: 'video/webm'\r\n * }\r\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\r\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\r\n */\n\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\n  arrayOfMediaStreams = arrayOfMediaStreams || [];\n  var self = this;\n  var mixer;\n  var mediaRecorder;\n  options = options || {\n    elementClass: 'multi-streams-mixer',\n    mimeType: 'video/webm',\n    video: {\n      width: 360,\n      height: 240\n    }\n  };\n  if (!options.frameInterval) {\n    options.frameInterval = 10;\n  }\n  if (!options.video) {\n    options.video = {};\n  }\n  if (!options.video.width) {\n    options.video.width = 360;\n  }\n  if (!options.video.height) {\n    options.video.height = 240;\n  }\n\n  /**\r\n   * This method records all MediaStreams.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n  this.record = function () {\n    // github/muaz-khan/MultiStreamsMixer\n    mixer = new MultiStreamsMixer(arrayOfMediaStreams, options.elementClass || 'multi-streams-mixer');\n    if (getAllVideoTracks().length) {\n      mixer.frameInterval = options.frameInterval || 10;\n      mixer.width = options.video.width || 360;\n      mixer.height = options.video.height || 240;\n      mixer.startDrawingFrames();\n    }\n    if (options.previewStream && typeof options.previewStream === 'function') {\n      options.previewStream(mixer.getMixedStream());\n    }\n\n    // record using MediaRecorder API\n    mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\n    mediaRecorder.record();\n  };\n  function getAllVideoTracks() {\n    var tracks = [];\n    arrayOfMediaStreams.forEach(function (stream) {\n      getTracks(stream, 'video').forEach(function (track) {\n        tracks.push(track);\n      });\n    });\n    return tracks;\n  }\n\n  /**\r\n   * This method stops recording MediaStream.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n  this.stop = function (callback) {\n    if (!mediaRecorder) {\n      return;\n    }\n    mediaRecorder.stop(function (blob) {\n      self.blob = blob;\n      callback(blob);\n      self.clearRecordedData();\n    });\n  };\n\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n  this.pause = function () {\n    if (mediaRecorder) {\n      mediaRecorder.pause();\n    }\n  };\n\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n  this.resume = function () {\n    if (mediaRecorder) {\n      mediaRecorder.resume();\n    }\n  };\n\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n  this.clearRecordedData = function () {\n    if (mediaRecorder) {\n      mediaRecorder.clearRecordedData();\n      mediaRecorder = null;\n    }\n    if (mixer) {\n      mixer.releaseStreams();\n      mixer = null;\n    }\n  };\n\n  /**\r\n   * Add extra media-streams to existing recordings.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n   * @example\r\n   * recorder.addStreams([newAudioStream, newVideoStream]);\r\n   */\n  this.addStreams = function (streams) {\n    if (!streams) {\n      throw 'First parameter is required.';\n    }\n    if (!(streams instanceof Array)) {\n      streams = [streams];\n    }\n    arrayOfMediaStreams.concat(streams);\n    if (!mediaRecorder || !mixer) {\n      return;\n    }\n    mixer.appendStreams(streams);\n    if (options.previewStream && typeof options.previewStream === 'function') {\n      options.previewStream(mixer.getMixedStream());\n    }\n  };\n\n  /**\r\n   * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n   * @example\r\n   * recorder.resetVideoStreams([newVideo1, newVideo2]);\r\n   */\n  this.resetVideoStreams = function (streams) {\n    if (!mixer) {\n      return;\n    }\n    if (streams && !(streams instanceof Array)) {\n      streams = [streams];\n    }\n    mixer.resetVideoStreams(streams);\n  };\n\n  /**\r\n   * Returns MultiStreamsMixer\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * let mixer = recorder.getMixer();\r\n   * mixer.appendStreams([newStream]);\r\n   */\n  this.getMixer = function () {\n    return mixer;\n  };\n\n  // for debugging\n  this.name = 'MultiStreamRecorder';\n  this.toString = function () {\n    return this.name;\n  };\n}\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\n}\n\n// _____________________\n// RecordRTC.promises.js\n\n/**\r\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\r\n * @summary Promises for {@link RecordRTC}\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCPromisesHandler\r\n * @class\r\n * @example\r\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\r\n * recorder.startRecording()\r\n *         .then(successCB)\r\n *         .catch(errorCB);\r\n * // Note: You can access all RecordRTC API using \"recorder.recordRTC\" e.g. \r\n * recorder.recordRTC.onStateChanged = function(state) {};\r\n * recorder.recordRTC.setRecordingDuration(5000);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\r\n * @requires {@link RecordRTC}\r\n */\n\nfunction RecordRTCPromisesHandler(mediaStream, options) {\n  if (!this) {\n    throw 'Use \"new RecordRTCPromisesHandler()\"';\n  }\n  if (typeof mediaStream === 'undefined') {\n    throw 'First argument \"MediaStream\" is required.';\n  }\n  var self = this;\n\n  /**\r\n   * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * let internal = recorder.recordRTC.getInternalRecorder();\r\n   * alert(internal instanceof MediaStreamRecorder);\r\n   * recorder.recordRTC.onStateChanged = function(state) {};\r\n   */\n  self.recordRTC = new RecordRTC(mediaStream, options);\n\n  /**\r\n   * This method records MediaStream.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.startRecording()\r\n   *         .then(successCB)\r\n   *         .catch(errorCB);\r\n   */\n  this.startRecording = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.startRecording();\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\r\n   * This method stops the recording.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.stopRecording().then(function() {\r\n   *     var blob = recorder.getBlob();\r\n   * }).catch(errorCB);\r\n   */\n  this.stopRecording = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.stopRecording(function (url) {\n          self.blob = self.recordRTC.getBlob();\n          if (!self.blob || !self.blob.size) {\n            reject('Empty blob.', self.blob);\n            return;\n          }\n          resolve(url);\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\r\n   * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.pauseRecording()\r\n   *         .then(successCB)\r\n   *         .catch(errorCB);\r\n   */\n  this.pauseRecording = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.pauseRecording();\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\r\n   * This method resumes the recording.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.resumeRecording()\r\n   *         .then(successCB)\r\n   *         .catch(errorCB);\r\n   */\n  this.resumeRecording = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.resumeRecording();\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\r\n   * This method returns data-url for the recorded blob.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.stopRecording().then(function() {\r\n   *     recorder.getDataURL().then(function(dataURL) {\r\n   *         window.open(dataURL);\r\n   *     }).catch(errorCB);;\r\n   * }).catch(errorCB);\r\n   */\n  this.getDataURL = function (callback) {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.getDataURL(function (dataURL) {\n          resolve(dataURL);\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\r\n   * This method returns the recorded blob.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.stopRecording().then(function() {\r\n   *     recorder.getBlob().then(function(blob) {})\r\n   * }).catch(errorCB);\r\n   */\n  this.getBlob = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(self.recordRTC.getBlob());\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\r\n   * This method returns the internal recording object.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * let internalRecorder = await recorder.getInternalRecorder();\r\n   * if(internalRecorder instanceof MultiStreamRecorder) {\r\n   *     internalRecorder.addStreams([newAudioStream]);\r\n   *     internalRecorder.resetVideoStreams([screenStream]);\r\n   * }\r\n   * @returns {Object} \r\n   */\n  this.getInternalRecorder = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(self.recordRTC.getInternalRecorder());\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\r\n   * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * await recorder.reset();\r\n   * recorder.startRecording(); // record again\r\n   */\n  this.reset = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(self.recordRTC.reset());\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\r\n   * Destroy RecordRTC instance. Clear all recorders and objects.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.destroy().then(successCB).catch(errorCB);\r\n   */\n  this.destroy = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(self.recordRTC.destroy());\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\r\n   * Get recorder's readonly state.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * let state = await recorder.getState();\r\n   * // or\r\n   * recorder.getState().then(state => { console.log(state); })\r\n   * @returns {String} Returns recording state.\r\n   */\n  this.getState = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(self.recordRTC.getState());\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\r\n   * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * await recorder.stopRecording();\r\n   * let blob = recorder.getBlob(); // or \"recorder.recordRTC.blob\"\r\n   * invokeSaveAsDialog(blob);\r\n   */\n  this.blob = null;\n\n  /**\r\n   * RecordRTC version number\r\n   * @property {String} version - Release version number.\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @static\r\n   * @readonly\r\n   * @example\r\n   * alert(recorder.version);\r\n   */\n  this.version = '5.6.2';\n}\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\n}\n\n// ______________________\n// WebAssemblyRecorder.js\n\n/**\r\n * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.\r\n * @summary Video recording feature in Chrome, Firefox and maybe Edge.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WebAssemblyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WebAssemblyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024, realtime: true}\r\n */\nfunction WebAssemblyRecorder(stream, config) {\n  // based on: github.com/GoogleChromeLabs/webm-wasm\n\n  if (typeof ReadableStream === 'undefined' || typeof WritableStream === 'undefined') {\n    // because it fixes readable/writable streams issues\n    console.error('Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js');\n  }\n  config = config || {};\n  config.width = config.width || 640;\n  config.height = config.height || 480;\n  config.frameRate = config.frameRate || 30;\n  config.bitrate = config.bitrate || 1200;\n  config.realtime = config.realtime || true;\n  function createBufferURL(buffer, type) {\n    return URL.createObjectURL(new Blob([buffer], {\n      type: type || ''\n    }));\n  }\n  var finished;\n  function cameraStream() {\n    return new ReadableStream({\n      start: function (controller) {\n        var cvs = document.createElement('canvas');\n        var video = document.createElement('video');\n        var first = true;\n        video.srcObject = stream;\n        video.muted = true;\n        video.height = config.height;\n        video.width = config.width;\n        video.volume = 0;\n        video.onplaying = function () {\n          cvs.width = config.width;\n          cvs.height = config.height;\n          var ctx = cvs.getContext('2d');\n          var frameTimeout = 1000 / config.frameRate;\n          var cameraTimer = setInterval(function f() {\n            if (finished) {\n              clearInterval(cameraTimer);\n              controller.close();\n            }\n            if (first) {\n              first = false;\n              if (config.onVideoProcessStarted) {\n                config.onVideoProcessStarted();\n              }\n            }\n            ctx.drawImage(video, 0, 0);\n            if (controller._controlledReadableStream.state !== 'closed') {\n              try {\n                controller.enqueue(ctx.getImageData(0, 0, config.width, config.height));\n              } catch (e) {}\n            }\n          }, frameTimeout);\n        };\n        video.play();\n      }\n    });\n  }\n  var worker;\n  function startRecording(stream, buffer) {\n    if (!config.workerPath && !buffer) {\n      finished = false;\n\n      // is it safe to use @latest ?\n\n      fetch('https://unpkg.com/webm-wasm@latest/dist/webm-worker.js').then(function (r) {\n        r.arrayBuffer().then(function (buffer) {\n          startRecording(stream, buffer);\n        });\n      });\n      return;\n    }\n    if (!config.workerPath && buffer instanceof ArrayBuffer) {\n      var blob = new Blob([buffer], {\n        type: 'text/javascript'\n      });\n      config.workerPath = URL.createObjectURL(blob);\n    }\n    if (!config.workerPath) {\n      console.error('workerPath parameter is missing.');\n    }\n    worker = new Worker(config.workerPath);\n    worker.postMessage(config.webAssemblyPath || 'https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm');\n    worker.addEventListener('message', function (event) {\n      if (event.data === 'READY') {\n        worker.postMessage({\n          width: config.width,\n          height: config.height,\n          bitrate: config.bitrate || 1200,\n          timebaseDen: config.frameRate || 30,\n          realtime: config.realtime\n        });\n        cameraStream().pipeTo(new WritableStream({\n          write: function (image) {\n            if (finished) {\n              console.error('Got image, but recorder is finished!');\n              return;\n            }\n            worker.postMessage(image.data.buffer, [image.data.buffer]);\n          }\n        }));\n      } else if (!!event.data) {\n        if (!isPaused) {\n          arrayOfBuffers.push(event.data);\n        }\n      }\n    });\n  }\n\n  /**\r\n   * This method records video.\r\n   * @method\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n  this.record = function () {\n    arrayOfBuffers = [];\n    isPaused = false;\n    this.blob = null;\n    startRecording(stream);\n    if (typeof config.initCallback === 'function') {\n      config.initCallback();\n    }\n  };\n  var isPaused;\n\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n  this.pause = function () {\n    isPaused = true;\n  };\n\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n  this.resume = function () {\n    isPaused = false;\n  };\n  function terminate(callback) {\n    if (!worker) {\n      if (callback) {\n        callback();\n      }\n      return;\n    }\n\n    // Wait for null event data to indicate that the encoding is complete\n    worker.addEventListener('message', function (event) {\n      if (event.data === null) {\n        worker.terminate();\n        worker = null;\n        if (callback) {\n          callback();\n        }\n      }\n    });\n    worker.postMessage(null);\n  }\n  var arrayOfBuffers = [];\n\n  /**\r\n   * This method stops recording video.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n  this.stop = function (callback) {\n    finished = true;\n    var recorder = this;\n    terminate(function () {\n      recorder.blob = new Blob(arrayOfBuffers, {\n        type: 'video/webm'\n      });\n      callback(recorder.blob);\n    });\n  };\n\n  // for debugging\n  this.name = 'WebAssemblyRecorder';\n  this.toString = function () {\n    return this.name;\n  };\n\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n  this.clearRecordedData = function () {\n    arrayOfBuffers = [];\n    isPaused = false;\n    this.blob = null;\n\n    // todo: if recording-ON then STOP it first\n  };\n\n  /**\r\n   * @property {Blob} blob - The recorded blob object.\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.stop(function(){\r\n   *     var blob = recorder.blob;\r\n   * });\r\n   */\n  this.blob = null;\n}\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.WebAssemblyRecorder = WebAssemblyRecorder;\n}","map":{"version":3,"names":["RecordRTC","mediaStream","config","type","RecordRTCConfiguration","self","startRecording","config2","disableLogs","console","log","version","mediaRecorder","clearRecordedData","record","setState","recordingDuration","handleRecordingDuration","initRecorder","initCallback","Recorder","GetRecorderType","constructor","name","stopRecording","callback","warningLog","state","resumeRecording","setTimeout","warn","stop","_callback","__blob","call","Object","keys","forEach","key","blob","bytesToSize","size","url","URL","createObjectURL","e","autoWriteToDisk","getDataURL","dataURL","parameter","DiskStorage","Store","pauseRecording","pause","resume","readFile","_blob","postMessage","FileReaderSync","readAsDataURL","_mediaRecorder","Worker","navigator","mozGetUserMedia","webWorker","processInWebWorker","onmessage","event","data","reader","FileReader","onload","target","result","_function","Blob","toString","worker","revokeObjectURL","counter","onRecordingStopped","onStateChanged","WARNING","returnObject","setRecordingDuration","getBlob","toURL","getInternalRecorder","save","fileName","invokeSaveAsDialog","getFromDisk","setAdvertisementArray","arrayOfWebPImages","advertisement","length","i","push","duration","image","bufferSize","sampleRate","buffer","reset","getState","destroy","disableLogsCache","Storage","AudioContextConstructor","close","prop","module","exports","define","amd","Fetch","_type","replace","writeToDisk","options","audio","video","gif","audioDataURL","videoDataURL","gifDataURL","audioBlob","videoBlob","gifBlob","recorderType","WhammyRecorder","CanvasRecorder","WebAssemblyRecorder","GifRecorder","StereoAudioRecorder","MediaStreamRecorder","getTracks","MediaRecorder","prototype","mimeType","split","bitsPerSecond","recorder","isChrome","isEdge","isOpera","ReadableStream","isMediaRecorderCompatible","isTypeSupported","Array","MultiStreamRecorder","isSafari","MRecordRTC","addStream","_mediaStream","mediaType","audioRecorder","numberOfAudioChannels","timeSlice","onTimeStamp","newStream","videoTrack","isFirefox","MediaStream","addTrack","videoRecorder","canvas","frameInterval","workerPath","webAssemblyPath","frameRate","bitrate","isSingleRecorder","gifRecorder","quality","blobURL","output","_audioDataURL","_videoDataURL","callback00","webkitURL","args","browserFakeUserAgent","that","window","global","userAgent","getUserMedia","error","arguments","document","documentElement","appendChild","createElement","captureStream","mozCaptureStream","obj","getContext","play","drawImage","toDataURL","style","HTMLVideoElement","location","protocol","href","hash","screen","width","height","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","lastTime","element","currTime","Date","getTime","timeToCall","Math","max","id","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","AudioContext","webkitAudioContext","mozAudioContext","webkitGetUserMedia","indexOf","msSaveBlob","msSaveOrOpenBlob","opera","toLowerCase","test","isElectron","webkitMediaStream","track","bytes","k","sizes","parseInt","floor","pow","toPrecision","file","fileExtension","splitted","fileFullName","round","random","hyperlink","download","body","click","dispatchEvent","MouseEvent","view","bubbles","cancelable","process","versions","electron","stream","kind","filter","t","setSrcObject","srcObject","mozSrcObject","getSeekableBlob","inputBlob","EBML","Error","Reader","decoder","Decoder","tools","fileReader","ebmlElms","decode","read","refinedMetadataBuf","makeMetadataSeekable","metadatas","cues","slice","metadataSize","newBlob","readAsArrayBuffer","nVer","appVersion","nAgt","fullVersion","parseFloat","majorVersion","nameOffset","verOffset","ix","substring","isNaN","arrayOfBlobs","getArrayOfBlobs","timestamps","allStates","recorderHints","canRecordMimeType","ondataavailable","updateTimeStamp","getNativeBlob","getMimeType","recordingCallback","onstart","onpause","onresume","onstop","onerror","looper","manuallyStopped","timeslice","start","secondObject","clearRecordedDataCB","isMediaStreamActive","active","ended","getAllStates","checkForInactiveTracks","leftchannel","rightchannel","recording","recordingLength","jsAudioNode","desiredSampRate","leftChannel","resetVariables","isAudioProcessStarted","isPaused","mergeLeftRightBuffers","mergeAudioBuffers","cb","leftBuffers","rightBuffers","internalInterleavedLength","mergeBuffers","interpolateArray","newSampleRate","oldSampleRate","fitCount","newData","springFactor","Number","tmp","before","toFixed","after","ceil","atPoint","linearInterpolate","channelBuffer","rLength","Float64Array","offset","lng","set","interleave","rightChannel","inputIndex","index","writeUTFBytes","string","setUint8","charCodeAt","interleaved","interleavedLength","resultingBufferLength","ArrayBuffer","DataView","setUint32","setUint16","volume","setInt16","noWorker","workerURL","terminate","byteLength","context","audioInput","createMediaStreamSource","legalBufferValues","JSON","stringify","createJavaScriptNode","createScriptProcessor","connect","intervalsBasedBuffers","left","right","onaudioprocess","disconnect","onAudioProcessDataAvailable","onAudioProcessStarted","inputBuffer","getChannelData","chLeft","Float32Array","chRight","createMediaStreamDestination","destination","htmlElement","html2canvas","isCanvasSupportsStreamCapturing","item","_isChrome","webkitRTCPeerConnection","chrome","chromeVersion","matchArray","match","useWhammyRecorder","globalCanvas","mediaStreamRecorder","HTMLCanvasElement","CanvasRenderingContext2D","isRecording","canvasMediaStream","webkitCaptureStream","mdStream","whammy","frames","drawCanvasFrame","getWebPImages","nodeName","framesLength","frame","idx","framesRemaining","onEncodingCallback","webp","compile","isPausedRecording","cloneCanvas","newCanvas","grabMouse","showMousePointer","onrendered","Whammy","Video","cloneNode","onloadedmetadata","muted","drawFrames","paused","isStopDrawing","asyncLoop","o","loop","functionToLoop","dropBlackFrames","_frames","_framesToCheck","_pixTolerance","_frameTolerance","localCanvas","context2d","resultFrames","checkUntilNotBlack","endCheckFrame","sampleColor","r","g","b","maxColorDifference","sqrt","pixTolerance","frameTolerance","doNotCheckNext","f","matchPixCount","endPixCheck","maxPixCount","finishImage","Image","imageData","getImageData","pix","currentColor","colorDifference","src","concat","_this","WhammyVideo","add","whammyInWebWorker","ArrayToWebM","info","checkFrames","clusterMaxDuration","doubleToString","frameNumber","clusterTimecode","clusterFrames","clusterDuration","clusterCounter","cluster","getClusterData","generateEBML","map","block","makeSimpleBlock","discardable","invisible","keyframe","lacing","trackNum","timecode","numToBuffer","num","parts","Uint8Array","reverse","strToBuffer","str","bitsToBuffer","bits","pad","join","substr","json","ebml","len","zeroes","sizeToString","padded","toBinStrOld","String","fromCharCode","flags","out","parseWebP","riff","VP8","RIFF","WEBP","frameStart","c","getStrLength","unpadded","parseRIFF","chunks","webm","atob","init","indexedDB","open","dbVersion","dbName","db","request","createObjectStore","dataBase","dataStoreName","putInDB","transaction","objectStore","put","getFromStore","portionName","get","onsuccess","onError","setVersion","onupgradeneeded","GIFEncoder","script","isHTMLObject","isLoadedMetaData","offsetWidth","offsetHeight","gifEncoder","setRepeat","setDelay","setQuality","onGifRecordingStarted","startTime","now","drawVideoFrame","time","clearedRecordedData","lastAnimationFrame","lastFrameTime","undefined","onGifPreview","addFrame","endTime","bin","autoplay","playsInline","MultiStreamsMixer","arrayOfMediaStreams","elementClass","videos","isStopDrawingFrames","opacity","position","zIndex","top","className","useGainNode","startDrawingFrames","drawVideosToCanvas","videosLength","fullcanvas","remaining","x","y","onRender","getMixedStream","mixedVideoStream","getMixedVideoStream","mixedAudioStream","getMixedAudioStream","resetVideoStreams","capturedStream","videoStream","audioContext","audioSources","gainNode","createGain","gain","value","audioTracksLength","audioSource","audioDestination","getVideo","appendStreams","streams","releaseStreams","source","clearRect","mixer","getAllVideoTracks","previewStream","tracks","addStreams","getMixer","RecordRTCPromisesHandler","recordRTC","Promise","resolve","reject","WritableStream","realtime","createBufferURL","finished","cameraStream","controller","cvs","first","onplaying","ctx","frameTimeout","cameraTimer","setInterval","clearInterval","onVideoProcessStarted","_controlledReadableStream","enqueue","fetch","then","arrayBuffer","addEventListener","timebaseDen","pipeTo","write","arrayOfBuffers"],"sources":["/Users/ruchireddy/Downloads/trick-tracker/node_modules/recordrtc/RecordRTC.js"],"sourcesContent":["'use strict';\r\n\r\n// Last time updated: 2021-03-09 3:20:22 AM UTC\r\n\r\n// ________________\r\n// RecordRTC v5.6.2\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\n// ____________\r\n// RecordRTC.js\r\n\r\n/**\r\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \r\n * @summary Record audio, video or screen inside the browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTC\r\n * @class\r\n * @example\r\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\r\n *     type: 'video', // audio or video or gif or canvas\r\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\r\n * });\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction RecordRTC(mediaStream, config) {\r\n    if (!mediaStream) {\r\n        throw 'First parameter is required.';\r\n    }\r\n\r\n    config = config || {\r\n        type: 'video'\r\n    };\r\n\r\n    config = new RecordRTCConfiguration(mediaStream, config);\r\n\r\n    // a reference to user's recordRTC object\r\n    var self = this;\r\n\r\n    function startRecording(config2) {\r\n        if (!config.disableLogs) {\r\n            console.log('RecordRTC version: ', self.version);\r\n        }\r\n\r\n        if (!!config2) {\r\n            // allow users to set options using startRecording method\r\n            // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\r\n            config = new RecordRTCConfiguration(mediaStream, config2);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('started recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder.record();\r\n\r\n            setState('recording');\r\n\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n            return self;\r\n        }\r\n\r\n        initRecorder(function() {\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    function initRecorder(initCallback) {\r\n        if (initCallback) {\r\n            config.initCallback = function() {\r\n                initCallback();\r\n                initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\r\n            };\r\n        }\r\n\r\n        var Recorder = new GetRecorderType(mediaStream, config);\r\n\r\n        mediaRecorder = new Recorder(mediaStream, config);\r\n        mediaRecorder.record();\r\n\r\n        setState('recording');\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\r\n        }\r\n    }\r\n\r\n    function stopRecording(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'paused') {\r\n            self.resumeRecording();\r\n\r\n            setTimeout(function() {\r\n                stopRecording(callback);\r\n            }, 1);\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording' && !config.disableLogs) {\r\n            console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Stopped recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (config.type !== 'gif') {\r\n            mediaRecorder.stop(_callback);\r\n        } else {\r\n            mediaRecorder.stop();\r\n            _callback();\r\n        }\r\n\r\n        setState('stopped');\r\n\r\n        function _callback(__blob) {\r\n            if (!mediaRecorder) {\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, '');\r\n                } else {\r\n                    callback('');\r\n                }\r\n                return;\r\n            }\r\n\r\n            Object.keys(mediaRecorder).forEach(function(key) {\r\n                if (typeof mediaRecorder[key] === 'function') {\r\n                    return;\r\n                }\r\n\r\n                self[key] = mediaRecorder[key];\r\n            });\r\n\r\n            var blob = mediaRecorder.blob;\r\n\r\n            if (!blob) {\r\n                if (__blob) {\r\n                    mediaRecorder.blob = blob = __blob;\r\n                } else {\r\n                    throw 'Recording failed.';\r\n                }\r\n            }\r\n\r\n            if (blob && !config.disableLogs) {\r\n                console.log(blob.type, '->', bytesToSize(blob.size));\r\n            }\r\n\r\n            if (callback) {\r\n                var url;\r\n\r\n                try {\r\n                    url = URL.createObjectURL(blob);\r\n                } catch (e) {}\r\n\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, url);\r\n                } else {\r\n                    callback(url);\r\n                }\r\n            }\r\n\r\n            if (!config.autoWriteToDisk) {\r\n                return;\r\n            }\r\n\r\n            getDataURL(function(dataURL) {\r\n                var parameter = {};\r\n                parameter[config.type + 'Blob'] = dataURL;\r\n                DiskStorage.Store(parameter);\r\n            });\r\n        }\r\n    }\r\n\r\n    function pauseRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to pause the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('paused');\r\n\r\n        mediaRecorder.pause();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Paused recording.');\r\n        }\r\n    }\r\n\r\n    function resumeRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'paused') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to resume the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('recording');\r\n\r\n        // not all libs have this method yet\r\n        mediaRecorder.resume();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Resumed recording.');\r\n        }\r\n    }\r\n\r\n    function readFile(_blob) {\r\n        postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n    }\r\n\r\n    function getDataURL(callback, _mediaRecorder) {\r\n        if (!callback) {\r\n            throw 'Pass a callback function over getDataURL.';\r\n        }\r\n\r\n        var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\r\n\r\n        if (!blob) {\r\n            if (!config.disableLogs) {\r\n                console.warn('Blob encoder did not finish its job yet.');\r\n            }\r\n\r\n            setTimeout(function() {\r\n                getDataURL(callback, _mediaRecorder);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\r\n            var webWorker = processInWebWorker(readFile);\r\n\r\n            webWorker.onmessage = function(event) {\r\n                callback(event.data);\r\n            };\r\n\r\n            webWorker.postMessage(blob);\r\n        } else {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(blob);\r\n            reader.onload = function(event) {\r\n                callback(event.target.result);\r\n            };\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            try {\r\n                var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                    'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n                ], {\r\n                    type: 'application/javascript'\r\n                }));\r\n\r\n                var worker = new Worker(blob);\r\n                URL.revokeObjectURL(blob);\r\n                return worker;\r\n            } catch (e) {}\r\n        }\r\n    }\r\n\r\n    function handleRecordingDuration(counter) {\r\n        counter = counter || 0;\r\n\r\n        if (self.state === 'paused') {\r\n            setTimeout(function() {\r\n                handleRecordingDuration(counter);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'stopped') {\r\n            return;\r\n        }\r\n\r\n        if (counter >= self.recordingDuration) {\r\n            stopRecording(self.onRecordingStopped);\r\n            return;\r\n        }\r\n\r\n        counter += 1000; // 1-second\r\n\r\n        setTimeout(function() {\r\n            handleRecordingDuration(counter);\r\n        }, 1000);\r\n    }\r\n\r\n    function setState(state) {\r\n        if (!self) {\r\n            return;\r\n        }\r\n\r\n        self.state = state;\r\n\r\n        if (typeof self.onStateChanged.call === 'function') {\r\n            self.onStateChanged.call(self, state);\r\n        } else {\r\n            self.onStateChanged(state);\r\n        }\r\n    }\r\n\r\n    var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\r\n\r\n    function warningLog() {\r\n        if (config.disableLogs === true) {\r\n            return;\r\n        }\r\n\r\n        console.warn(WARNING);\r\n    }\r\n\r\n    var mediaRecorder;\r\n\r\n    var returnObject = {\r\n        /**\r\n         * This method starts the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var recorder = RecordRTC(mediaStream, {\r\n         *     type: 'video'\r\n         * });\r\n         * recorder.startRecording();\r\n         */\r\n        startRecording: startRecording,\r\n\r\n        /**\r\n         * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     // use either \"this\" or \"recorder\" object; both are identical\r\n         *     video.src = this.toURL();\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        stopRecording: stopRecording,\r\n\r\n        /**\r\n         * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Firefox is unable to pause the recording. Fix it.\r\n         * @example\r\n         * recorder.pauseRecording();  // pause the recording\r\n         * recorder.resumeRecording(); // resume again\r\n         */\r\n        pauseRecording: pauseRecording,\r\n\r\n        /**\r\n         * This method resumes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.pauseRecording();  // first of all, pause the recording\r\n         * recorder.resumeRecording(); // now resume it\r\n         */\r\n        resumeRecording: resumeRecording,\r\n\r\n        /**\r\n         * This method initializes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * recorder.initRecorder();\r\n         */\r\n        initRecorder: initRecorder,\r\n\r\n        /**\r\n         * Ask RecordRTC to auto-stop the recording after 5 minutes.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var fiveMinutes = 5 * 1000 * 60;\r\n         * recorder.setRecordingDuration(fiveMinutes, function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         * \r\n         * // or otherwise\r\n         * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         */\r\n        setRecordingDuration: function(recordingDuration, callback) {\r\n            if (typeof recordingDuration === 'undefined') {\r\n                throw 'recordingDuration is required.';\r\n            }\r\n\r\n            if (typeof recordingDuration !== 'number') {\r\n                throw 'recordingDuration must be a number.';\r\n            }\r\n\r\n            self.recordingDuration = recordingDuration;\r\n            self.onRecordingStopped = callback || function() {};\r\n\r\n            return {\r\n                onRecordingStopped: function(callback) {\r\n                    self.onRecordingStopped = callback;\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * This method can be used to clear/reset all the recorded data.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\r\n         * @example\r\n         * recorder.clearRecordedData();\r\n         */\r\n        clearRecordedData: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            mediaRecorder.clearRecordedData();\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('Cleared old recorded data.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.getBlob();\r\n         *\r\n         *     var file = new File([blob], 'filename.webm', {\r\n         *         type: 'video/webm'\r\n         *     });\r\n         *\r\n         *     var formData = new FormData();\r\n         *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\r\n         *     uploadToServer(formData);\r\n         * });\r\n         * @returns {Blob} Returns recorded data as \"Blob\" object.\r\n         */\r\n        getBlob: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return mediaRecorder.blob;\r\n        },\r\n\r\n        /**\r\n         * Get data-URI instead of Blob.\r\n         * @param {function} callback - Callback to get the Data-URI.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     recorder.getDataURL(function(dataURI) {\r\n         *         video.src = dataURI;\r\n         *     });\r\n         * });\r\n         */\r\n        getDataURL: getDataURL,\r\n\r\n        /**\r\n         * Get virtual/temporary URL. Usage of this URL is limited to current tab.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     video.src = this.toURL();\r\n         * });\r\n         * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\r\n         */\r\n        toURL: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return URL.createObjectURL(mediaRecorder.blob);\r\n        },\r\n\r\n        /**\r\n         * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var internalRecorder = recorder.getInternalRecorder();\r\n         * if(internalRecorder instanceof MultiStreamRecorder) {\r\n         *     internalRecorder.addStreams([newAudioStream]);\r\n         *     internalRecorder.resetVideoStreams([screenStream]);\r\n         * }\r\n         * @returns {Object} Returns internal recording object.\r\n         */\r\n        getInternalRecorder: function() {\r\n            return mediaRecorder;\r\n        },\r\n\r\n        /**\r\n         * Invoke save-as dialog to save the recorded blob into your disk.\r\n         * @param {string} fileName - Set your own file name.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     this.save('file-name');\r\n         *\r\n         *     // or manually:\r\n         *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\r\n         * });\r\n         */\r\n        save: function(fileName) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            invokeSaveAsDialog(mediaRecorder.blob, fileName);\r\n        },\r\n\r\n        /**\r\n         * This method gets a blob from indexed-DB storage.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.getFromDisk(function(dataURL) {\r\n         *     video.src = dataURL;\r\n         * });\r\n         */\r\n        getFromDisk: function(callback) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            RecordRTC.getFromDisk(config.type, callback);\r\n        },\r\n\r\n        /**\r\n         * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\r\n         * @type {Array.<Array>}\r\n         * @param {Array} arrayOfWebPImages - Array of webp images.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * var arrayOfWebPImages = [];\r\n         * arrayOfWebPImages.push({\r\n         *     duration: index,\r\n         *     image: 'data:image/webp;base64,...'\r\n         * });\r\n         * recorder.setAdvertisementArray(arrayOfWebPImages);\r\n         */\r\n        setAdvertisementArray: function(arrayOfWebPImages) {\r\n            config.advertisement = [];\r\n\r\n            var length = arrayOfWebPImages.length;\r\n            for (var i = 0; i < length; i++) {\r\n                config.advertisement.push({\r\n                    duration: i,\r\n                    image: arrayOfWebPImages[i]\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\r\n         * @property {Blob} blob - Recorded Blob can be accessed using this property.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.blob;\r\n         *\r\n         *     // below one is recommended\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        blob: null,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} bufferSize - Buffer-size used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used this buffer-size: ' + this.bufferSize);\r\n         * });\r\n         */\r\n        bufferSize: 0,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} sampleRate - Sample-rates used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used these sample-rates: ' + this.sampleRate);\r\n         * });\r\n         */\r\n        sampleRate: 0,\r\n\r\n        /**\r\n         * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\r\n         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var arrayBuffer = this.buffer;\r\n         *     alert(arrayBuffer.byteLength);\r\n         * });\r\n         */\r\n        buffer: null,\r\n\r\n        /**\r\n         * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.reset();\r\n         * recorder.startRecording();\r\n         */\r\n        reset: function() {\r\n            if (self.state === 'recording' && !config.disableLogs) {\r\n                console.warn('Stop an active recorder.');\r\n            }\r\n\r\n            if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\r\n                mediaRecorder.clearRecordedData();\r\n            }\r\n            mediaRecorder = null;\r\n            setState('inactive');\r\n            self.blob = null;\r\n        },\r\n\r\n        /**\r\n         * This method is called whenever recorder's state changes. Use this as an \"event\".\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.onStateChanged = function(state) {\r\n         *     console.log('Recorder state: ', state);\r\n         * };\r\n         */\r\n        onStateChanged: function(state) {\r\n            if (!config.disableLogs) {\r\n                console.log('Recorder state changed:', state);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * A recorder can have inactive, recording, paused or stopped states.\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * // this looper function will keep you updated about the recorder's states.\r\n         * (function looper() {\r\n         *     document.querySelector('h1').innerHTML = 'Recorder\\'s state is: ' + recorder.state;\r\n         *     if(recorder.state === 'stopped') return; // ignore+stop\r\n         *     setTimeout(looper, 1000); // update after every 3-seconds\r\n         * })();\r\n         * recorder.startRecording();\r\n         */\r\n        state: 'inactive',\r\n\r\n        /**\r\n         * Get recorder's readonly state.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * var state = recorder.getState();\r\n         * @returns {String} Returns recording state.\r\n         */\r\n        getState: function() {\r\n            return self.state;\r\n        },\r\n\r\n        /**\r\n         * Destroy RecordRTC instance. Clear all recorders and objects.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * recorder.destroy();\r\n         */\r\n        destroy: function() {\r\n            var disableLogsCache = config.disableLogs;\r\n\r\n            config = {\r\n                disableLogs: true\r\n            };\r\n            self.reset();\r\n            setState('destroyed');\r\n            returnObject = self = null;\r\n\r\n            if (Storage.AudioContextConstructor) {\r\n                Storage.AudioContextConstructor.close();\r\n                Storage.AudioContextConstructor = null;\r\n            }\r\n\r\n            config.disableLogs = disableLogsCache;\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('RecordRTC is destroyed.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * RecordRTC version number\r\n         * @property {String} version - Release version number.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * alert(recorder.version);\r\n         */\r\n        version: '5.6.2'\r\n    };\r\n\r\n    if (!this) {\r\n        self = returnObject;\r\n        return returnObject;\r\n    }\r\n\r\n    // if someone wants to use RecordRTC with the \"new\" keyword.\r\n    for (var prop in returnObject) {\r\n        this[prop] = returnObject[prop];\r\n    }\r\n\r\n    self = this;\r\n\r\n    return returnObject;\r\n}\r\n\r\nRecordRTC.version = '5.6.2';\r\n\r\nif (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n    module.exports = RecordRTC;\r\n}\r\n\r\nif (typeof define === 'function' && define.amd) {\r\n    define('RecordRTC', [], function() {\r\n        return RecordRTC;\r\n    });\r\n}\n\r\nRecordRTC.getFromDisk = function(type, callback) {\r\n    if (!callback) {\r\n        throw 'callback is mandatory.';\r\n    }\r\n\r\n    console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\r\n    DiskStorage.Fetch(function(dataURL, _type) {\r\n        if (type !== 'all' && _type === type + 'Blob' && callback) {\r\n            callback(dataURL);\r\n        }\r\n\r\n        if (type === 'all' && callback) {\r\n            callback(dataURL, _type.replace('Blob', ''));\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof RecordRTC\r\n * @example\r\n * RecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nRecordRTC.writeToDisk = function(options) {\r\n    console.log('Writing recorded blob(s) to disk!');\r\n    options = options || {};\r\n    if (options.audio && options.video && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                options.gif.getDataURL(function(gifDataURL) {\r\n                    DiskStorage.Store({\r\n                        audioBlob: audioDataURL,\r\n                        videoBlob: videoDataURL,\r\n                        gifBlob: gifDataURL\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.video) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    videoBlob: videoDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.video && options.gif) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    videoBlob: videoDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            DiskStorage.Store({\r\n                audioBlob: audioDataURL\r\n            });\r\n        });\r\n    } else if (options.video) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            DiskStorage.Store({\r\n                videoBlob: videoDataURL\r\n            });\r\n        });\r\n    } else if (options.gif) {\r\n        options.gif.getDataURL(function(gifDataURL) {\r\n            DiskStorage.Store({\r\n                gifBlob: gifDataURL\r\n            });\r\n        });\r\n    }\r\n};\n\r\n// __________________________\r\n// RecordRTC-Configuration.js\r\n\r\n/**\r\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCConfiguration\r\n * @class\r\n * @example\r\n * var options = RecordRTCConfiguration(mediaStream, options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\r\n */\r\n\r\nfunction RecordRTCConfiguration(mediaStream, config) {\r\n    if (!config.recorderType && !config.type) {\r\n        if (!!config.audio && !!config.video) {\r\n            config.type = 'video';\r\n        } else if (!!config.audio && !config.video) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    if (config.recorderType && !config.type) {\r\n        if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder || (typeof WebAssemblyRecorder !== 'undefined' && config.recorderType === WebAssemblyRecorder)) {\r\n            config.type = 'video';\r\n        } else if (config.recorderType === GifRecorder) {\r\n            config.type = 'gif';\r\n        } else if (config.recorderType === StereoAudioRecorder) {\r\n            config.type = 'audio';\r\n        } else if (config.recorderType === MediaStreamRecorder) {\r\n            if (getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\r\n                config.type = 'video';\r\n            } else if (!getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\r\n                config.type = 'video';\r\n            } else if (getTracks(mediaStream, 'audio').length && !getTracks(mediaStream, 'video').length) {\r\n                config.type = 'audio';\r\n            } else {\r\n                // config.type = 'UnKnown';\r\n            }\r\n        }\r\n    }\r\n\r\n    if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (!config.mimeType) {\r\n            config.mimeType = 'video/webm';\r\n        }\r\n\r\n        if (!config.type) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n\r\n        if (!config.bitsPerSecond) {\r\n            // config.bitsPerSecond = 128000;\r\n        }\r\n    }\r\n\r\n    // consider default type=audio\r\n    if (!config.type) {\r\n        if (config.mimeType) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n        if (!config.type) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    return config;\r\n}\n\r\n// __________________\r\n// GetRecorderType.js\r\n\r\n/**\r\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It returns best recorder-type available for your browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GetRecorderType\r\n * @class\r\n * @example\r\n * var RecorderType = GetRecorderType(options);\r\n * var recorder = new RecorderType(options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction GetRecorderType(mediaStream, config) {\r\n    var recorder;\r\n\r\n    // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\r\n    // todo: detect if it is Edge, then auto use: StereoAudioRecorder\r\n    if (isChrome || isEdge || isOpera) {\r\n        // Media Stream Recording API has not been implemented in chrome yet;\r\n        // That's why using WebAudio API to record stereo audio in WAV format\r\n        recorder = StereoAudioRecorder;\r\n    }\r\n\r\n    if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    // video recorder (in WebM format)\r\n    if (config.type === 'video' && (isChrome || isOpera)) {\r\n        recorder = WhammyRecorder;\r\n\r\n        if (typeof WebAssemblyRecorder !== 'undefined' && typeof ReadableStream !== 'undefined') {\r\n            recorder = WebAssemblyRecorder;\r\n        }\r\n    }\r\n\r\n    // video recorder (in Gif format)\r\n    if (config.type === 'gif') {\r\n        recorder = GifRecorder;\r\n    }\r\n\r\n    // html2canvas recording!\r\n    if (config.type === 'canvas') {\r\n        recorder = CanvasRecorder;\r\n    }\r\n\r\n    if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (getTracks(mediaStream, 'video').length || getTracks(mediaStream, 'audio').length) {\r\n            // audio-only recording\r\n            if (config.type === 'audio') {\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n                // else recorder = StereoAudioRecorder;\r\n            } else {\r\n                // video or screen tracks\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (mediaStream instanceof Array && mediaStream.length) {\r\n        recorder = MultiStreamRecorder;\r\n    }\r\n\r\n    if (config.recorderType) {\r\n        recorder = config.recorderType;\r\n    }\r\n\r\n    if (!config.disableLogs && !!recorder && !!recorder.name) {\r\n        console.log('Using recorderType:', recorder.name || recorder.constructor.name);\r\n    }\r\n\r\n    if (!recorder && isSafari) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    return recorder;\r\n}\n\r\n// _____________\r\n// MRecordRTC.js\r\n\r\n/**\r\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\r\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MRecordRTC\r\n * @class\r\n * @example\r\n * var recorder = new MRecordRTC();\r\n * recorder.addStream(MediaStream);\r\n * recorder.mediaType = {\r\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\r\n *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n *     gif: true    // or GifRecorder\r\n * };\r\n * // mimeType is optional and should be set only in advance cases.\r\n * recorder.mimeType = {\r\n *     audio: 'audio/wav',\r\n *     video: 'video/webm',\r\n *     gif:   'image/gif'\r\n * };\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction MRecordRTC(mediaStream) {\r\n\r\n    /**\r\n     * This method attaches MediaStream object to {@link MRecordRTC}.\r\n     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.addStream(MediaStream);\r\n     */\r\n    this.addStream = function(_mediaStream) {\r\n        if (_mediaStream) {\r\n            mediaStream = _mediaStream;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\r\n     * @property {object} mediaType - {audio: true, video: true, gif: true}\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * var recorder = new MRecordRTC();\r\n     * recorder.mediaType = {\r\n     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\r\n     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n     *     gif  : true  // TRUE or GifRecorder\r\n     * };\r\n     */\r\n    this.mediaType = {\r\n        audio: true,\r\n        video: true\r\n    };\r\n\r\n    /**\r\n     * This method starts recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.startRecording();\r\n     */\r\n    this.startRecording = function() {\r\n        var mediaType = this.mediaType;\r\n        var recorderType;\r\n        var mimeType = this.mimeType || {\r\n            audio: null,\r\n            video: null,\r\n            gif: null\r\n        };\r\n\r\n        if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'audio').length) {\r\n            mediaType.audio = false;\r\n        }\r\n\r\n        if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\r\n            mediaType.video = false;\r\n        }\r\n\r\n        if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\r\n            mediaType.gif = false;\r\n        }\r\n\r\n        if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\r\n            throw 'MediaStream must have either audio or video tracks.';\r\n        }\r\n\r\n        if (!!mediaType.audio) {\r\n            recorderType = null;\r\n            if (typeof mediaType.audio === 'function') {\r\n                recorderType = mediaType.audio;\r\n            }\r\n\r\n            this.audioRecorder = new RecordRTC(mediaStream, {\r\n                type: 'audio',\r\n                bufferSize: this.bufferSize,\r\n                sampleRate: this.sampleRate,\r\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.audio,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp\r\n            });\r\n\r\n            if (!mediaType.video) {\r\n                this.audioRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.video) {\r\n            recorderType = null;\r\n            if (typeof mediaType.video === 'function') {\r\n                recorderType = mediaType.video;\r\n            }\r\n\r\n            var newStream = mediaStream;\r\n\r\n            if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\r\n                var videoTrack = getTracks(mediaStream, 'video')[0];\r\n\r\n                if (isFirefox) {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n\r\n                    if (recorderType && recorderType === WhammyRecorder) {\r\n                        // Firefox does NOT supports webp-encoding yet\r\n                        // But Firefox do supports WebAssemblyRecorder\r\n                        recorderType = MediaStreamRecorder;\r\n                    }\r\n                } else {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n                }\r\n            }\r\n\r\n            this.videoRecorder = new RecordRTC(newStream, {\r\n                type: 'video',\r\n                video: this.video,\r\n                canvas: this.canvas,\r\n                frameInterval: this.frameInterval || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.video,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp,\r\n                workerPath: this.workerPath,\r\n                webAssemblyPath: this.webAssemblyPath,\r\n                frameRate: this.frameRate, // used by WebAssemblyRecorder; values: usually 30; accepts any.\r\n                bitrate: this.bitrate // used by WebAssemblyRecorder; values: 0 to 1000+\r\n            });\r\n\r\n            if (!mediaType.audio) {\r\n                this.videoRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.audio && !!mediaType.video) {\r\n            var self = this;\r\n\r\n            var isSingleRecorder = isMediaRecorderCompatible() === true;\r\n\r\n            if (mediaType.audio instanceof StereoAudioRecorder && !!mediaType.video) {\r\n                isSingleRecorder = false;\r\n            } else if (mediaType.audio !== true && mediaType.video !== true && mediaType.audio !== mediaType.video) {\r\n                isSingleRecorder = false;\r\n            }\r\n\r\n            if (isSingleRecorder === true) {\r\n                self.audioRecorder = null;\r\n                self.videoRecorder.startRecording();\r\n            } else {\r\n                self.videoRecorder.initRecorder(function() {\r\n                    self.audioRecorder.initRecorder(function() {\r\n                        // Both recorders are ready to record things accurately\r\n                        self.videoRecorder.startRecording();\r\n                        self.audioRecorder.startRecording();\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.gif) {\r\n            recorderType = null;\r\n            if (typeof mediaType.gif === 'function') {\r\n                recorderType = mediaType.gif;\r\n            }\r\n            this.gifRecorder = new RecordRTC(mediaStream, {\r\n                type: 'gif',\r\n                frameRate: this.frameRate || 200,\r\n                quality: this.quality || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.gif\r\n            });\r\n            this.gifRecorder.startRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording.\r\n     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.stopRecording(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     */\r\n    this.stopRecording = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'audio');\r\n            });\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'video');\r\n            });\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'gif');\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.pauseRecording();\r\n     */\r\n    this.pauseRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.pauseRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.resumeRecording();\r\n     */\r\n    this.resumeRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.resumeRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs.\r\n     * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getBlob(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     * // or\r\n     * var audioBlob = recorder.getBlob().audio;\r\n     * var videoBlob = recorder.getBlob().video;\r\n     */\r\n    this.getBlob = function(callback) {\r\n        var output = {};\r\n\r\n        if (this.audioRecorder) {\r\n            output.audio = this.audioRecorder.getBlob();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            output.video = this.videoRecorder.getBlob();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            output.gif = this.gifRecorder.getBlob();\r\n        }\r\n\r\n        if (callback) {\r\n            callback(output);\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Destroy all recorder instances.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.destroy();\r\n     */\r\n    this.destroy = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.destroy();\r\n            this.audioRecorder = null;\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.destroy();\r\n            this.videoRecorder = null;\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.destroy();\r\n            this.gifRecorder = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs' DataURLs.\r\n     * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getDataURL(function(recording){\r\n     *     var audioDataURL = recording.audio;\r\n     *     var videoDataURL = recording.video;\r\n     *     var gifDataURL   = recording.gif;\r\n     * });\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        this.getBlob(function(blob) {\r\n            if (blob.audio && blob.video) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    getDataURL(blob.video, function(_videoDataURL) {\r\n                        callback({\r\n                            audio: _audioDataURL,\r\n                            video: _videoDataURL\r\n                        });\r\n                    });\r\n                });\r\n            } else if (blob.audio) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    callback({\r\n                        audio: _audioDataURL\r\n                    });\r\n                });\r\n            } else if (blob.video) {\r\n                getDataURL(blob.video, function(_videoDataURL) {\r\n                    callback({\r\n                        video: _videoDataURL\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        function getDataURL(blob, callback00) {\r\n            if (typeof Worker !== 'undefined') {\r\n                var webWorker = processInWebWorker(function readFile(_blob) {\r\n                    postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n                });\r\n\r\n                webWorker.onmessage = function(event) {\r\n                    callback00(event.data);\r\n                };\r\n\r\n                webWorker.postMessage(blob);\r\n            } else {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(blob);\r\n                reader.onload = function(event) {\r\n                    callback00(event.target.result);\r\n                };\r\n            }\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n            ], {\r\n                type: 'application/javascript'\r\n            }));\r\n\r\n            var worker = new Worker(blob);\r\n            var url;\r\n            if (typeof URL !== 'undefined') {\r\n                url = URL;\r\n            } else if (typeof webkitURL !== 'undefined') {\r\n                url = webkitURL;\r\n            } else {\r\n                throw 'Neither URL nor webkitURL detected.';\r\n            }\r\n            url.revokeObjectURL(blob);\r\n            return worker;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.writeToDisk();\r\n     */\r\n    this.writeToDisk = function() {\r\n        RecordRTC.writeToDisk({\r\n            audio: this.audioRecorder,\r\n            video: this.videoRecorder,\r\n            gif: this.gifRecorder\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method can be used to invoke a save-as dialog for all recorded blobs.\r\n     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.save({\r\n     *     audio: 'audio-file-name',\r\n     *     video: 'video-file-name',\r\n     *     gif  : 'gif-file-name'\r\n     * });\r\n     */\r\n    this.save = function(args) {\r\n        args = args || {\r\n            audio: true,\r\n            video: true,\r\n            gif: true\r\n        };\r\n\r\n        if (!!args.audio && this.audioRecorder) {\r\n            this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\r\n        }\r\n\r\n        if (!!args.video && this.videoRecorder) {\r\n            this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\r\n        }\r\n        if (!!args.gif && this.gifRecorder) {\r\n            this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * This method can be used to get all recorded blobs from IndexedDB storage.\r\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\r\n * @param {function} callback - Callback function to get all stored blobs.\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\r\n *     if(type === 'audio') { }\r\n *     if(type === 'video') { }\r\n *     if(type === 'gif')   { }\r\n * });\r\n */\r\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MRecordRTC = MRecordRTC;\r\n}\n\r\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n(function(that) {\r\n    if (!that) {\r\n        return;\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n        return;\r\n    }\r\n\r\n    if (typeof global === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    global.navigator = {\r\n        userAgent: browserFakeUserAgent,\r\n        getUserMedia: function() {}\r\n    };\r\n\r\n    if (!global.console) {\r\n        global.console = {};\r\n    }\r\n\r\n    if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\r\n        global.console.error = global.console.log = global.console.log || function() {\r\n            console.log(arguments);\r\n        };\r\n    }\r\n\r\n    if (typeof document === 'undefined') {\r\n        /*global document:true */\r\n        that.document = {\r\n            documentElement: {\r\n                appendChild: function() {\r\n                    return '';\r\n                }\r\n            }\r\n        };\r\n\r\n        document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n            var obj = {\r\n                getContext: function() {\r\n                    return obj;\r\n                },\r\n                play: function() {},\r\n                pause: function() {},\r\n                drawImage: function() {},\r\n                toDataURL: function() {\r\n                    return '';\r\n                },\r\n                style: {}\r\n            };\r\n            return obj;\r\n        };\r\n\r\n        that.HTMLVideoElement = function() {};\r\n    }\r\n\r\n    if (typeof location === 'undefined') {\r\n        /*global location:true */\r\n        that.location = {\r\n            protocol: 'file:',\r\n            href: '',\r\n            hash: ''\r\n        };\r\n    }\r\n\r\n    if (typeof screen === 'undefined') {\r\n        /*global screen:true */\r\n        that.screen = {\r\n            width: 0,\r\n            height: 0\r\n        };\r\n    }\r\n\r\n    if (typeof URL === 'undefined') {\r\n        /*global screen:true */\r\n        that.URL = {\r\n            createObjectURL: function() {\r\n                return '';\r\n            },\r\n            revokeObjectURL: function() {\r\n                return '';\r\n            }\r\n        };\r\n    }\r\n\r\n    /*global window:true */\r\n    that.window = global;\r\n})(typeof global !== 'undefined' ? global : null);\n\r\n// _____________________________\r\n// Cross-Browser-Declarations.js\r\n\r\n// animation-frame used in WebM recording\r\n\r\n/*jshint -W079 */\r\nvar requestAnimationFrame = window.requestAnimationFrame;\r\nif (typeof requestAnimationFrame === 'undefined') {\r\n    if (typeof webkitRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = webkitRequestAnimationFrame;\r\n    } else if (typeof mozRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = mozRequestAnimationFrame;\r\n    } else if (typeof msRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = msRequestAnimationFrame;\r\n    } else if (typeof requestAnimationFrame === 'undefined') {\r\n        // via: https://gist.github.com/paulirish/1579671\r\n        var lastTime = 0;\r\n\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = function(callback, element) {\r\n            var currTime = new Date().getTime();\r\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n            var id = setTimeout(function() {\r\n                callback(currTime + timeToCall);\r\n            }, timeToCall);\r\n            lastTime = currTime + timeToCall;\r\n            return id;\r\n        };\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar cancelAnimationFrame = window.cancelAnimationFrame;\r\nif (typeof cancelAnimationFrame === 'undefined') {\r\n    if (typeof webkitCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = webkitCancelAnimationFrame;\r\n    } else if (typeof mozCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = mozCancelAnimationFrame;\r\n    } else if (typeof msCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = msCancelAnimationFrame;\r\n    } else if (typeof cancelAnimationFrame === 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = function(id) {\r\n            clearTimeout(id);\r\n        };\r\n    }\r\n}\r\n\r\n// WebAudio API representer\r\nvar AudioContext = window.AudioContext;\r\n\r\nif (typeof AudioContext === 'undefined') {\r\n    if (typeof webkitAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    if (typeof mozAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = mozAudioContext;\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar URL = window.URL;\r\n\r\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n    /*global URL:true */\r\n    URL = webkitURL;\r\n}\r\n\r\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n    }\r\n\r\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.mozGetUserMedia;\r\n    }\r\n}\r\n\r\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\r\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\r\nvar isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && ('netscape' in window) && / rv:/.test(navigator.userAgent);\r\nvar isChrome = (!isOpera && !isEdge && !!navigator.webkitGetUserMedia) || isElectron() || navigator.userAgent.toLowerCase().indexOf('chrome/') !== -1;\r\n\r\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n\r\nif (isSafari && !isChrome && navigator.userAgent.indexOf('CriOS') !== -1) {\r\n    isSafari = false;\r\n    isChrome = true;\r\n}\r\n\r\nvar MediaStream = window.MediaStream;\r\n\r\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n    MediaStream = webkitMediaStream;\r\n}\r\n\r\n/*global MediaStream:true */\r\nif (typeof MediaStream !== 'undefined') {\r\n    // override \"stop\" method for all browsers\r\n    if (typeof MediaStream.prototype.stop === 'undefined') {\r\n        MediaStream.prototype.stop = function() {\r\n            this.getTracks().forEach(function(track) {\r\n                track.stop();\r\n            });\r\n        };\r\n    }\r\n}\r\n\r\n// below function via: http://goo.gl/B3ae8c\r\n/**\r\n * Return human-readable file size.\r\n * @param {number} bytes - Pass bytes and get formatted string.\r\n * @returns {string} - formatted string\r\n * @example\r\n * bytesToSize(1024*1024*5) === '5 GB'\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction bytesToSize(bytes) {\r\n    var k = 1000;\r\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    if (bytes === 0) {\r\n        return '0 Bytes';\r\n    }\r\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\r\n    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object. This parameter is required.\r\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\r\n * @example\r\n * invokeSaveAsDialog(blob or file, [optional] fileName);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction invokeSaveAsDialog(file, fileName) {\r\n    if (!file) {\r\n        throw 'Blob object is required.';\r\n    }\r\n\r\n    if (!file.type) {\r\n        try {\r\n            file.type = 'video/webm';\r\n        } catch (e) {}\r\n    }\r\n\r\n    var fileExtension = (file.type || 'video/webm').split('/')[1];\r\n    if (fileExtension.indexOf(';') !== -1) {\r\n        // extended mimetype, e.g. 'video/webm;codecs=vp8,opus'\r\n        fileExtension = fileExtension.split(';')[0];\r\n    }\r\n    if (fileName && fileName.indexOf('.') !== -1) {\r\n        var splitted = fileName.split('.');\r\n        fileName = splitted[0];\r\n        fileExtension = splitted[1];\r\n    }\r\n\r\n    var fileFullName = (fileName || (Math.round(Math.random() * 9999999999) + 888888888)) + '.' + fileExtension;\r\n\r\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\r\n        return navigator.msSaveOrOpenBlob(file, fileFullName);\r\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\r\n        return navigator.msSaveBlob(file, fileFullName);\r\n    }\r\n\r\n    var hyperlink = document.createElement('a');\r\n    hyperlink.href = URL.createObjectURL(file);\r\n    hyperlink.download = fileFullName;\r\n\r\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\r\n    (document.body || document.documentElement).appendChild(hyperlink);\r\n\r\n    if (typeof hyperlink.click === 'function') {\r\n        hyperlink.click();\r\n    } else {\r\n        hyperlink.target = '_blank';\r\n        hyperlink.dispatchEvent(new MouseEvent('click', {\r\n            view: window,\r\n            bubbles: true,\r\n            cancelable: true\r\n        }));\r\n    }\r\n\r\n    URL.revokeObjectURL(hyperlink.href);\r\n}\r\n\r\n/**\r\n * from: https://github.com/cheton/is-electron/blob/master/index.js\r\n **/\r\nfunction isElectron() {\r\n    // Renderer process\r\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\r\n        return true;\r\n    }\r\n\r\n    // Main process\r\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\r\n        return true;\r\n    }\r\n\r\n    // Detect the user agent when the `nodeIntegration` option is set to true\r\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction getTracks(stream, kind) {\r\n    if (!stream || !stream.getTracks) {\r\n        return [];\r\n    }\r\n\r\n    return stream.getTracks().filter(function(t) {\r\n        return t.kind === (kind || 'audio');\r\n    });\r\n}\r\n\r\nfunction setSrcObject(stream, element) {\r\n    if ('srcObject' in element) {\r\n        element.srcObject = stream;\r\n    } else if ('mozSrcObject' in element) {\r\n        element.mozSrcObject = stream;\r\n    } else {\r\n        element.srcObject = stream;\r\n    }\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object.\r\n * @param {function} callback - Callback function.\r\n * @example\r\n * getSeekableBlob(blob or file, callback);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction getSeekableBlob(inputBlob, callback) {\r\n    // EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml\r\n    if (typeof EBML === 'undefined') {\r\n        throw new Error('Please link: https://www.webrtc-experiment.com/EBML.js');\r\n    }\r\n\r\n    var reader = new EBML.Reader();\r\n    var decoder = new EBML.Decoder();\r\n    var tools = EBML.tools;\r\n\r\n    var fileReader = new FileReader();\r\n    fileReader.onload = function(e) {\r\n        var ebmlElms = decoder.decode(this.result);\r\n        ebmlElms.forEach(function(element) {\r\n            reader.read(element);\r\n        });\r\n        reader.stop();\r\n        var refinedMetadataBuf = tools.makeMetadataSeekable(reader.metadatas, reader.duration, reader.cues);\r\n        var body = this.result.slice(reader.metadataSize);\r\n        var newBlob = new Blob([refinedMetadataBuf, body], {\r\n            type: 'video/webm'\r\n        });\r\n\r\n        callback(newBlob);\r\n    };\r\n    fileReader.readAsArrayBuffer(inputBlob);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.invokeSaveAsDialog = invokeSaveAsDialog;\r\n    RecordRTC.getTracks = getTracks;\r\n    RecordRTC.getSeekableBlob = getSeekableBlob;\r\n    RecordRTC.bytesToSize = bytesToSize;\r\n    RecordRTC.isElectron = isElectron;\r\n}\r\n\r\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\r\n// Storage.js\r\n\r\n/**\r\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * Storage.AudioContext === webkitAudioContext\r\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Storage = {};\r\n\r\nif (typeof AudioContext !== 'undefined') {\r\n    Storage.AudioContext = AudioContext;\r\n} else if (typeof webkitAudioContext !== 'undefined') {\r\n    Storage.AudioContext = webkitAudioContext;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Storage = Storage;\r\n}\n\r\nfunction isMediaRecorderCompatible() {\r\n    if (isFirefox || isSafari || isEdge) {\r\n        return true;\r\n    }\r\n\r\n    var nVer = navigator.appVersion;\r\n    var nAgt = navigator.userAgent;\r\n    var fullVersion = '' + parseFloat(navigator.appVersion);\r\n    var majorVersion = parseInt(navigator.appVersion, 10);\r\n    var nameOffset, verOffset, ix;\r\n\r\n    if (isChrome || isOpera) {\r\n        verOffset = nAgt.indexOf('Chrome');\r\n        fullVersion = nAgt.substring(verOffset + 7);\r\n    }\r\n\r\n    // trim the fullVersion string at semicolon/space if present\r\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    majorVersion = parseInt('' + fullVersion, 10);\r\n\r\n    if (isNaN(majorVersion)) {\r\n        fullVersion = '' + parseFloat(navigator.appVersion);\r\n        majorVersion = parseInt(navigator.appVersion, 10);\r\n    }\r\n\r\n    return majorVersion >= 49;\r\n}\n\r\n// ______________________\r\n// MediaStreamRecorder.js\r\n\r\n/**\r\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\r\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\r\n * @typedef MediaStreamRecorder\r\n * @class\r\n * @example\r\n * var config = {\r\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\r\n *     audioBitsPerSecond : 256 * 8 * 1024,\r\n *     videoBitsPerSecond : 256 * 8 * 1024,\r\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\r\n *     checkForInactiveTracks: true,\r\n *     timeSlice: 1000, // concatenate intervals based blobs\r\n *     ondataavailable: function() {} // get intervals based blobs\r\n * }\r\n * var recorder = new MediaStreamRecorder(mediaStream, config);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\r\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\r\n */\r\n\r\nfunction MediaStreamRecorder(mediaStream, config) {\r\n    var self = this;\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    if (typeof MediaRecorder === 'undefined') {\r\n        throw 'Your browser does not support the Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\r\n    }\r\n\r\n    config = config || {\r\n        // bitsPerSecond: 256 * 8 * 1024,\r\n        mimeType: 'video/webm'\r\n    };\r\n\r\n    if (config.type === 'audio') {\r\n        if (getTracks(mediaStream, 'video').length && getTracks(mediaStream, 'audio').length) {\r\n            var stream;\r\n            if (!!navigator.mozGetUserMedia) {\r\n                stream = new MediaStream();\r\n                stream.addTrack(getTracks(mediaStream, 'audio')[0]);\r\n            } else {\r\n                // webkitMediaStream\r\n                stream = new MediaStream(getTracks(mediaStream, 'audio'));\r\n            }\r\n            mediaStream = stream;\r\n        }\r\n\r\n        if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\r\n            config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\r\n        }\r\n\r\n        if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\r\n            // forcing better codecs on Firefox (via #166)\r\n            config.mimeType = 'audio/ogg';\r\n        }\r\n    }\r\n\r\n    var arrayOfBlobs = [];\r\n\r\n    /**\r\n     * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var arrayOfBlobs = recorder.getArrayOfBlobs();\r\n     * @returns {Array} Returns array of recorded blobs.\r\n     */\r\n    this.getArrayOfBlobs = function() {\r\n        return arrayOfBlobs;\r\n    };\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // set defaults\r\n        self.blob = null;\r\n        self.clearRecordedData();\r\n        self.timestamps = [];\r\n        allStates = [];\r\n        arrayOfBlobs = [];\r\n\r\n        var recorderHints = config;\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Passing following config over MediaRecorder API.', recorderHints);\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (isChrome && !isMediaRecorderCompatible()) {\r\n            // to support video-only recording on stable\r\n            recorderHints = 'video/vp8';\r\n        }\r\n\r\n        if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\r\n            if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\r\n                if (!config.disableLogs) {\r\n                    console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\r\n                }\r\n\r\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\r\n            }\r\n        }\r\n\r\n        // using MediaRecorder API here\r\n        try {\r\n            mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\r\n\r\n            // reset\r\n            config.mimeType = recorderHints.mimeType;\r\n        } catch (e) {\r\n            // chrome-based fallback\r\n            mediaRecorder = new MediaRecorder(mediaStream);\r\n        }\r\n\r\n        // old hack?\r\n        if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\r\n            if (!config.disableLogs) {\r\n                console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\r\n            }\r\n        }\r\n\r\n        // Dispatching OnDataAvailable Handler\r\n        mediaRecorder.ondataavailable = function(e) {\r\n            if (e.data) {\r\n                allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\r\n            }\r\n\r\n            if (typeof config.timeSlice === 'number') {\r\n                if (e.data && e.data.size) {\r\n                    arrayOfBlobs.push(e.data);\r\n                    updateTimeStamp();\r\n\r\n                    if (typeof config.ondataavailable === 'function') {\r\n                        // intervals based blobs\r\n                        var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\r\n                            type: getMimeType(recorderHints)\r\n                        });\r\n                        config.ondataavailable(blob);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\r\n                // make sure that stopRecording always getting fired\r\n                // even if there is invalid data\r\n                if (self.recordingCallback) {\r\n                    self.recordingCallback(new Blob([], {\r\n                        type: getMimeType(recorderHints)\r\n                    }));\r\n                    self.recordingCallback = null;\r\n                }\r\n                return;\r\n            }\r\n\r\n            self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\r\n                type: getMimeType(recorderHints)\r\n            });\r\n\r\n            if (self.recordingCallback) {\r\n                self.recordingCallback(self.blob);\r\n                self.recordingCallback = null;\r\n            }\r\n        };\r\n\r\n        mediaRecorder.onstart = function() {\r\n            allStates.push('started');\r\n        };\r\n\r\n        mediaRecorder.onpause = function() {\r\n            allStates.push('paused');\r\n        };\r\n\r\n        mediaRecorder.onresume = function() {\r\n            allStates.push('resumed');\r\n        };\r\n\r\n        mediaRecorder.onstop = function() {\r\n            allStates.push('stopped');\r\n        };\r\n\r\n        mediaRecorder.onerror = function(error) {\r\n            if (!error) {\r\n                return;\r\n            }\r\n\r\n            if (!error.name) {\r\n                error.name = 'UnknownError';\r\n            }\r\n\r\n            allStates.push('error: ' + error);\r\n\r\n            if (!config.disableLogs) {\r\n                // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\r\n                if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\r\n                    console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\r\n                } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\r\n                    console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\r\n                } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\r\n                    console.error('MediaRecorder security error', error);\r\n                }\r\n\r\n                // older code below\r\n                else if (error.name === 'OutOfMemory') {\r\n                    console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'IllegalStreamModification') {\r\n                    console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'OtherRecordingError') {\r\n                    console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'GenericError') {\r\n                    console.error('The UA cannot provide the codec or recording option that has been requested.', error);\r\n                } else {\r\n                    console.error('MediaRecorder Error', error);\r\n                }\r\n            }\r\n\r\n            (function(looper) {\r\n                if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\r\n                    delete config.timeslice;\r\n\r\n                    // 10 minutes, enough?\r\n                    mediaRecorder.start(10 * 60 * 1000);\r\n                    return;\r\n                }\r\n\r\n                setTimeout(looper, 1000);\r\n            })();\r\n\r\n            if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\r\n                mediaRecorder.stop();\r\n            }\r\n        };\r\n\r\n        if (typeof config.timeSlice === 'number') {\r\n            updateTimeStamp();\r\n            mediaRecorder.start(config.timeSlice);\r\n        } else {\r\n            // default is 60 minutes; enough?\r\n            // use config => {timeSlice: 1000} otherwise\r\n\r\n            mediaRecorder.start(3.6e+6);\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback(); // old code\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @property {Array} timestamps - Array of time stamps\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * console.log(recorder.timestamps);\r\n     */\r\n    this.timestamps = [];\r\n\r\n    function updateTimeStamp() {\r\n        self.timestamps.push(new Date().getTime());\r\n\r\n        if (typeof config.onTimeStamp === 'function') {\r\n            config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\r\n        }\r\n    }\r\n\r\n    function getMimeType(secondObject) {\r\n        if (mediaRecorder && mediaRecorder.mimeType) {\r\n            return mediaRecorder.mimeType;\r\n        }\r\n\r\n        return secondObject.mimeType || 'video/webm';\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        self.manuallyStopped = true; // used inside the mediaRecorder.onerror\r\n\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        this.recordingCallback = callback;\r\n\r\n        if (mediaRecorder.state === 'recording') {\r\n            mediaRecorder.stop();\r\n        }\r\n\r\n        if (typeof config.timeSlice === 'number') {\r\n            setTimeout(function() {\r\n                self.blob = new Blob(arrayOfBlobs, {\r\n                    type: getMimeType(config)\r\n                });\r\n\r\n                self.recordingCallback(self.blob);\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        if (mediaRecorder.state === 'recording') {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        if (mediaRecorder.state === 'paused') {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder && mediaRecorder.state === 'recording') {\r\n            self.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        arrayOfBlobs = [];\r\n        mediaRecorder = null;\r\n        self.timestamps = [];\r\n    }\r\n\r\n    // Reference to \"MediaRecorder\" object\r\n    var mediaRecorder;\r\n\r\n    /**\r\n     * Access to native MediaRecorder API\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @instance\r\n     * @example\r\n     * var internal = recorder.getInternalRecorder();\r\n     * internal.ondataavailable = function() {}; // override\r\n     * internal.stream, internal.onpause, internal.onstop, etc.\r\n     * @returns {Object} Returns internal recording object.\r\n     */\r\n    this.getInternalRecorder = function() {\r\n        return mediaRecorder;\r\n    };\r\n\r\n    function isMediaStreamActive() {\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.stop(function() {\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\r\n    this.blob = null;\r\n\r\n\r\n    /**\r\n     * Get MediaRecorder readonly state.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var state = recorder.getState();\r\n     * @returns {String} Returns recording state.\r\n     */\r\n    this.getState = function() {\r\n        if (!mediaRecorder) {\r\n            return 'inactive';\r\n        }\r\n\r\n        return mediaRecorder.state || 'inactive';\r\n    };\r\n\r\n    // list of all recording states\r\n    var allStates = [];\r\n\r\n    /**\r\n     * Get MediaRecorder all recording states.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var state = recorder.getAllStates();\r\n     * @returns {Array} Returns all recording states\r\n     */\r\n    this.getAllStates = function() {\r\n        return allStates;\r\n    };\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = false; // disable to minimize CPU usage\r\n    }\r\n\r\n    var self = this;\r\n\r\n    // this method checks if media stream is stopped\r\n    // or if any track is ended.\r\n    (function looper() {\r\n        if (!mediaRecorder || config.checkForInactiveTracks === false) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            self.stop();\r\n            return;\r\n        }\r\n\r\n        setTimeout(looper, 1000); // check every second\r\n    })();\r\n\r\n    // for debugging\r\n    this.name = 'MediaStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\r\n}\r\n\r\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\r\n// https://github.com/mattdiamond/Recorderjs#license-mit\r\n// ______________________\r\n// StereoAudioRecorder.js\r\n\r\n/**\r\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\r\n * @summary JavaScript standalone object for stereo audio recording.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef StereoAudioRecorder\r\n * @class\r\n * @example\r\n * var recorder = new StereoAudioRecorder(MediaStream, {\r\n *     sampleRate: 44100,\r\n *     bufferSize: 4096\r\n * });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\r\n */\r\n\r\nfunction StereoAudioRecorder(mediaStream, config) {\r\n    if (!getTracks(mediaStream, 'audio').length) {\r\n        throw 'Your stream has no audio tracks.';\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var self = this;\r\n\r\n    // variables\r\n    var leftchannel = [];\r\n    var rightchannel = [];\r\n    var recording = false;\r\n    var recordingLength = 0;\r\n    var jsAudioNode;\r\n\r\n    var numberOfAudioChannels = 2;\r\n\r\n    /**\r\n     * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\r\n     * @property {number} desiredSampRate - Desired Bits per sample * 1000\r\n     * @memberof StereoAudioRecorder\r\n     * @instance\r\n     * @example\r\n     * var recorder = StereoAudioRecorder(mediaStream, {\r\n     *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\r\n     * });\r\n     */\r\n    var desiredSampRate = config.desiredSampRate;\r\n\r\n    // backward compatibility\r\n    if (config.leftChannel === true) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (config.numberOfAudioChannels === 1) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\r\n        numberOfAudioChannels = 2;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('StereoAudioRecorder is set to record number of channels: ' + numberOfAudioChannels);\r\n    }\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = true;\r\n    }\r\n\r\n    function isMediaStreamActive() {\r\n        if (config.checkForInactiveTracks === false) {\r\n            // always return \"true\"\r\n            return true;\r\n        }\r\n\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        resetVariables();\r\n\r\n        isAudioProcessStarted = isPaused = false;\r\n        recording = true;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            looper();\r\n        }\r\n    };\r\n\r\n    function mergeLeftRightBuffers(config, callback) {\r\n        function mergeAudioBuffers(config, cb) {\r\n            var numberOfAudioChannels = config.numberOfAudioChannels;\r\n\r\n            // todo: \"slice(0)\" --- is it causes loop? Should be removed?\r\n            var leftBuffers = config.leftBuffers.slice(0);\r\n            var rightBuffers = config.rightBuffers.slice(0);\r\n            var sampleRate = config.sampleRate;\r\n            var internalInterleavedLength = config.internalInterleavedLength;\r\n            var desiredSampRate = config.desiredSampRate;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                    rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            // set sample rate as desired sample rate\r\n            if (desiredSampRate) {\r\n                sampleRate = desiredSampRate;\r\n            }\r\n\r\n            // for changing the sampling rate, reference:\r\n            // http://stackoverflow.com/a/28977136/552182\r\n            function interpolateArray(data, newSampleRate, oldSampleRate) {\r\n                var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\r\n                var newData = [];\r\n                var springFactor = Number((data.length - 1) / (fitCount - 1));\r\n                newData[0] = data[0];\r\n                for (var i = 1; i < fitCount - 1; i++) {\r\n                    var tmp = i * springFactor;\r\n                    var before = Number(Math.floor(tmp)).toFixed();\r\n                    var after = Number(Math.ceil(tmp)).toFixed();\r\n                    var atPoint = tmp - before;\r\n                    newData[i] = linearInterpolate(data[before], data[after], atPoint);\r\n                }\r\n                newData[fitCount - 1] = data[data.length - 1];\r\n                return newData;\r\n            }\r\n\r\n            function linearInterpolate(before, after, atPoint) {\r\n                return before + (after - before) * atPoint;\r\n            }\r\n\r\n            function mergeBuffers(channelBuffer, rLength) {\r\n                var result = new Float64Array(rLength);\r\n                var offset = 0;\r\n                var lng = channelBuffer.length;\r\n\r\n                for (var i = 0; i < lng; i++) {\r\n                    var buffer = channelBuffer[i];\r\n                    result.set(buffer, offset);\r\n                    offset += buffer.length;\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            function interleave(leftChannel, rightChannel) {\r\n                var length = leftChannel.length + rightChannel.length;\r\n\r\n                var result = new Float64Array(length);\r\n\r\n                var inputIndex = 0;\r\n\r\n                for (var index = 0; index < length;) {\r\n                    result[index++] = leftChannel[inputIndex];\r\n                    result[index++] = rightChannel[inputIndex];\r\n                    inputIndex++;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function writeUTFBytes(view, offset, string) {\r\n                var lng = string.length;\r\n                for (var i = 0; i < lng; i++) {\r\n                    view.setUint8(offset + i, string.charCodeAt(i));\r\n                }\r\n            }\r\n\r\n            // interleave both channels together\r\n            var interleaved;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                interleaved = interleave(leftBuffers, rightBuffers);\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                interleaved = leftBuffers;\r\n            }\r\n\r\n            var interleavedLength = interleaved.length;\r\n\r\n            // create wav file\r\n            var resultingBufferLength = 44 + interleavedLength * 2;\r\n\r\n            var buffer = new ArrayBuffer(resultingBufferLength);\r\n\r\n            var view = new DataView(buffer);\r\n\r\n            // RIFF chunk descriptor/identifier \r\n            writeUTFBytes(view, 0, 'RIFF');\r\n\r\n            // RIFF chunk length\r\n            // changed \"44\" to \"36\" via #401\r\n            view.setUint32(4, 36 + interleavedLength * 2, true);\r\n\r\n            // RIFF type \r\n            writeUTFBytes(view, 8, 'WAVE');\r\n\r\n            // format chunk identifier \r\n            // FMT sub-chunk\r\n            writeUTFBytes(view, 12, 'fmt ');\r\n\r\n            // format chunk length \r\n            view.setUint32(16, 16, true);\r\n\r\n            // sample format (raw)\r\n            view.setUint16(20, 1, true);\r\n\r\n            // stereo (2 channels)\r\n            view.setUint16(22, numberOfAudioChannels, true);\r\n\r\n            // sample rate \r\n            view.setUint32(24, sampleRate, true);\r\n\r\n            // byte rate (sample rate * block align)\r\n            view.setUint32(28, sampleRate * numberOfAudioChannels * 2, true);\r\n\r\n            // block align (channel count * bytes per sample) \r\n            view.setUint16(32, numberOfAudioChannels * 2, true);\r\n\r\n            // bits per sample \r\n            view.setUint16(34, 16, true);\r\n\r\n            // data sub-chunk\r\n            // data chunk identifier \r\n            writeUTFBytes(view, 36, 'data');\r\n\r\n            // data chunk length \r\n            view.setUint32(40, interleavedLength * 2, true);\r\n\r\n            // write the PCM samples\r\n            var lng = interleavedLength;\r\n            var index = 44;\r\n            var volume = 1;\r\n            for (var i = 0; i < lng; i++) {\r\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\r\n                index += 2;\r\n            }\r\n\r\n            if (cb) {\r\n                return cb({\r\n                    buffer: buffer,\r\n                    view: view\r\n                });\r\n            }\r\n\r\n            postMessage({\r\n                buffer: buffer,\r\n                view: view\r\n            });\r\n        }\r\n\r\n        if (config.noWorker) {\r\n            mergeAudioBuffers(config, function(data) {\r\n                callback(data.buffer, data.view);\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        var webWorker = processInWebWorker(mergeAudioBuffers);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            callback(event.data.buffer, event.data.view);\r\n\r\n            // release memory\r\n            URL.revokeObjectURL(webWorker.workerURL);\r\n\r\n            // kill webworker (or Chrome will kill your page after ~25 calls)\r\n            webWorker.terminate();\r\n        };\r\n\r\n        webWorker.postMessage(config);\r\n    }\r\n\r\n    function processInWebWorker(_function) {\r\n        var workerURL = URL.createObjectURL(new Blob([_function.toString(),\r\n            ';this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(workerURL);\r\n        worker.workerURL = workerURL;\r\n        return worker;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        // stop recording\r\n        recording = false;\r\n\r\n        mergeLeftRightBuffers({\r\n            desiredSampRate: desiredSampRate,\r\n            sampleRate: sampleRate,\r\n            numberOfAudioChannels: numberOfAudioChannels,\r\n            internalInterleavedLength: recordingLength,\r\n            leftBuffers: leftchannel,\r\n            rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel,\r\n            noWorker: config.noWorker\r\n        }, function(buffer, view) {\r\n            /**\r\n             * @property {Blob} blob - The recorded blob object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            self.blob = new Blob([view], {\r\n                type: 'audio/wav'\r\n            });\r\n\r\n            /**\r\n             * @property {ArrayBuffer} buffer - The recorded buffer object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var buffer = recorder.buffer;\r\n             * });\r\n             */\r\n            self.buffer = new ArrayBuffer(view.buffer.byteLength);\r\n\r\n            /**\r\n             * @property {DataView} view - The recorded data-view object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var view = recorder.view;\r\n             * });\r\n             */\r\n            self.view = view;\r\n\r\n            self.sampleRate = desiredSampRate || sampleRate;\r\n            self.bufferSize = bufferSize;\r\n\r\n            // recorded audio length\r\n            self.length = recordingLength;\r\n\r\n            isAudioProcessStarted = false;\r\n\r\n            if (callback) {\r\n                callback(self.blob);\r\n            }\r\n        });\r\n    };\r\n\r\n    if (typeof RecordRTC.Storage === 'undefined') {\r\n        RecordRTC.Storage = {\r\n            AudioContextConstructor: null,\r\n            AudioContext: window.AudioContext || window.webkitAudioContext\r\n        };\r\n    }\r\n\r\n    if (!RecordRTC.Storage.AudioContextConstructor || RecordRTC.Storage.AudioContextConstructor.state === 'closed') {\r\n        RecordRTC.Storage.AudioContextConstructor = new RecordRTC.Storage.AudioContext();\r\n    }\r\n\r\n    var context = RecordRTC.Storage.AudioContextConstructor;\r\n\r\n    // creates an audio node from the microphone incoming stream\r\n    var audioInput = context.createMediaStreamSource(mediaStream);\r\n\r\n    var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\r\n\r\n    /**\r\n     * From the spec: This value controls how frequently the audioprocess event is\r\n     * dispatched and how many sample-frames need to be processed each call.\r\n     * Lower values for buffer size will result in a lower (better) latency.\r\n     * Higher values will be necessary to avoid audio breakup and glitches\r\n     * The size of the buffer (in sample-frames) which needs to\r\n     * be processed each time onprocessaudio is called.\r\n     * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n     * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     bufferSize: 4096\r\n     * });\r\n     */\r\n\r\n    // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\r\n    var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\r\n\r\n    if (legalBufferValues.indexOf(bufferSize) === -1) {\r\n        if (!config.disableLogs) {\r\n            console.log('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\r\n        }\r\n    }\r\n\r\n    if (context.createJavaScriptNode) {\r\n        jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else if (context.createScriptProcessor) {\r\n        jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else {\r\n        throw 'WebAudio API has no support on this browser.';\r\n    }\r\n\r\n    // connect the stream to the script processor\r\n    audioInput.connect(jsAudioNode);\r\n\r\n    if (!config.bufferSize) {\r\n        bufferSize = jsAudioNode.bufferSize; // device buffer-size\r\n    }\r\n\r\n    /**\r\n     * The sample rate (in sample-frames per second) at which the\r\n     * AudioContext handles audio. It is assumed that all AudioNodes\r\n     * in the context run at this rate. In making this assumption,\r\n     * sample-rate converters or \"varispeed\" processors are not supported\r\n     * in real-time processing.\r\n     * The sampleRate parameter describes the sample-rate of the\r\n     * linear PCM audio data in the buffer in sample-frames per second.\r\n     * An implementation must support sample-rates in at least\r\n     * the range 22050 to 96000.\r\n     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     sampleRate: 44100\r\n     * });\r\n     */\r\n    var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\r\n\r\n    if (sampleRate < 22050 || sampleRate > 96000) {\r\n        // Ref: http://stackoverflow.com/a/26303918/552182\r\n        if (!config.disableLogs) {\r\n            console.log('sample-rate must be under range 22050 and 96000.');\r\n        }\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        if (config.desiredSampRate) {\r\n            console.log('Desired sample-rate: ' + config.desiredSampRate);\r\n        }\r\n    }\r\n\r\n    var isPaused = false;\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        if (!recording) {\r\n            if (!config.disableLogs) {\r\n                console.log('Seems recording has been restarted.');\r\n            }\r\n            this.record();\r\n            return;\r\n        }\r\n\r\n        isPaused = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        config.checkForInactiveTracks = false;\r\n\r\n        if (recording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function resetVariables() {\r\n        leftchannel = [];\r\n        rightchannel = [];\r\n        recordingLength = 0;\r\n        isAudioProcessStarted = false;\r\n        recording = false;\r\n        isPaused = false;\r\n        context = null;\r\n\r\n        self.leftchannel = leftchannel;\r\n        self.rightchannel = rightchannel;\r\n        self.numberOfAudioChannels = numberOfAudioChannels;\r\n        self.desiredSampRate = desiredSampRate;\r\n        self.sampleRate = sampleRate;\r\n        self.recordingLength = recordingLength;\r\n\r\n        intervalsBasedBuffers = {\r\n            left: [],\r\n            right: [],\r\n            recordingLength: 0\r\n        };\r\n    }\r\n\r\n    function clearRecordedDataCB() {\r\n        if (jsAudioNode) {\r\n            jsAudioNode.onaudioprocess = null;\r\n            jsAudioNode.disconnect();\r\n            jsAudioNode = null;\r\n        }\r\n\r\n        if (audioInput) {\r\n            audioInput.disconnect();\r\n            audioInput = null;\r\n        }\r\n\r\n        resetVariables();\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'StereoAudioRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var isAudioProcessStarted = false;\r\n\r\n    function onAudioProcessDataAvailable(e) {\r\n        if (isPaused) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            jsAudioNode.disconnect();\r\n            recording = false;\r\n        }\r\n\r\n        if (!recording) {\r\n            if (audioInput) {\r\n                audioInput.disconnect();\r\n                audioInput = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * This method is called on \"onaudioprocess\" event's first invocation.\r\n         * @method {function} onAudioProcessStarted\r\n         * @memberof StereoAudioRecorder\r\n         * @example\r\n         * recorder.onAudioProcessStarted: function() { };\r\n         */\r\n        if (!isAudioProcessStarted) {\r\n            isAudioProcessStarted = true;\r\n            if (config.onAudioProcessStarted) {\r\n                config.onAudioProcessStarted();\r\n            }\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        }\r\n\r\n        var left = e.inputBuffer.getChannelData(0);\r\n\r\n        // we clone the samples\r\n        var chLeft = new Float32Array(left);\r\n        leftchannel.push(chLeft);\r\n\r\n        if (numberOfAudioChannels === 2) {\r\n            var right = e.inputBuffer.getChannelData(1);\r\n            var chRight = new Float32Array(right);\r\n            rightchannel.push(chRight);\r\n        }\r\n\r\n        recordingLength += bufferSize;\r\n\r\n        // export raw PCM\r\n        self.recordingLength = recordingLength;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            intervalsBasedBuffers.recordingLength += bufferSize;\r\n            intervalsBasedBuffers.left.push(chLeft);\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                intervalsBasedBuffers.right.push(chRight);\r\n            }\r\n        }\r\n    }\r\n\r\n    jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\r\n\r\n    // to prevent self audio to be connected with speakers\r\n    if (context.createMediaStreamDestination) {\r\n        jsAudioNode.connect(context.createMediaStreamDestination());\r\n    } else {\r\n        jsAudioNode.connect(context.destination);\r\n    }\r\n\r\n    // export raw PCM\r\n    this.leftchannel = leftchannel;\r\n    this.rightchannel = rightchannel;\r\n    this.numberOfAudioChannels = numberOfAudioChannels;\r\n    this.desiredSampRate = desiredSampRate;\r\n    this.sampleRate = sampleRate;\r\n    self.recordingLength = recordingLength;\r\n\r\n    // helper for intervals based blobs\r\n    var intervalsBasedBuffers = {\r\n        left: [],\r\n        right: [],\r\n        recordingLength: 0\r\n    };\r\n\r\n    // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\r\n    function looper() {\r\n        if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (intervalsBasedBuffers.left.length) {\r\n            mergeLeftRightBuffers({\r\n                desiredSampRate: desiredSampRate,\r\n                sampleRate: sampleRate,\r\n                numberOfAudioChannels: numberOfAudioChannels,\r\n                internalInterleavedLength: intervalsBasedBuffers.recordingLength,\r\n                leftBuffers: intervalsBasedBuffers.left,\r\n                rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\r\n            }, function(buffer, view) {\r\n                var blob = new Blob([view], {\r\n                    type: 'audio/wav'\r\n                });\r\n                config.ondataavailable(blob);\r\n\r\n                setTimeout(looper, config.timeSlice);\r\n            });\r\n\r\n            intervalsBasedBuffers = {\r\n                left: [],\r\n                right: [],\r\n                recordingLength: 0\r\n            };\r\n        } else {\r\n            setTimeout(looper, config.timeSlice);\r\n        }\r\n    }\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\r\n}\r\n\r\n// _________________\r\n// CanvasRecorder.js\r\n\r\n/**\r\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\r\n * @summary HTML2Canvas recording into video WebM.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef CanvasRecorder\r\n * @class\r\n * @example\r\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\r\n * @param {object} config - {disableLogs:true, initCallback: function}\r\n */\r\n\r\nfunction CanvasRecorder(htmlElement, config) {\r\n    if (typeof html2canvas === 'undefined') {\r\n        throw 'Please link: https://www.webrtc-experiment.com/screenshot.js';\r\n    }\r\n\r\n    config = config || {};\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    // via DetectRTC.js\r\n    var isCanvasSupportsStreamCapturing = false;\r\n    ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\r\n        if (item in document.createElement('canvas')) {\r\n            isCanvasSupportsStreamCapturing = true;\r\n        }\r\n    });\r\n\r\n    var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\r\n\r\n    var chromeVersion = 50;\r\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\r\n    if (_isChrome && matchArray && matchArray[2]) {\r\n        chromeVersion = parseInt(matchArray[2], 10);\r\n    }\r\n\r\n    if (_isChrome && chromeVersion < 52) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    if (config.useWhammyRecorder) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    var globalCanvas, mediaStreamRecorder;\r\n\r\n    if (isCanvasSupportsStreamCapturing) {\r\n        if (!config.disableLogs) {\r\n            console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\r\n        }\r\n\r\n        if (htmlElement instanceof HTMLCanvasElement) {\r\n            globalCanvas = htmlElement;\r\n        } else if (htmlElement instanceof CanvasRenderingContext2D) {\r\n            globalCanvas = htmlElement.canvas;\r\n        } else {\r\n            throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\r\n        }\r\n    } else if (!!navigator.mozGetUserMedia) {\r\n        if (!config.disableLogs) {\r\n            console.error('Canvas recording is NOT supported in Firefox.');\r\n        }\r\n    }\r\n\r\n    var isRecording;\r\n\r\n    /**\r\n     * This method records Canvas.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        isRecording = true;\r\n\r\n        if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\r\n            // CanvasCaptureMediaStream\r\n            var canvasMediaStream;\r\n            if ('captureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\r\n            } else if ('mozCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\r\n            } else if ('webkitCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\r\n            }\r\n\r\n            try {\r\n                var mdStream = new MediaStream();\r\n                mdStream.addTrack(getTracks(canvasMediaStream, 'video')[0]);\r\n                canvasMediaStream = mdStream;\r\n            } catch (e) {}\r\n\r\n            if (!canvasMediaStream) {\r\n                throw 'captureStream API are NOT available.';\r\n            }\r\n\r\n            // Note: Jan 18, 2016 status is that, \r\n            // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\r\n            mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\r\n                mimeType: config.mimeType || 'video/webm'\r\n            });\r\n            mediaStreamRecorder.record();\r\n        } else {\r\n            whammy.frames = [];\r\n            lastTime = new Date().getTime();\r\n            drawCanvasFrame();\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    this.getWebPImages = function(callback) {\r\n        if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        var framesLength = whammy.frames.length;\r\n        whammy.frames.forEach(function(frame, idx) {\r\n            var framesRemaining = framesLength - idx;\r\n            if (!config.disableLogs) {\r\n                console.log(framesRemaining + '/' + framesLength + ' frames remaining');\r\n            }\r\n\r\n            if (config.onEncodingCallback) {\r\n                config.onEncodingCallback(framesRemaining, framesLength);\r\n            }\r\n\r\n            var webp = frame.image.toDataURL('image/webp', 1);\r\n            whammy.frames[idx].image = webp;\r\n        });\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Generating WebM');\r\n        }\r\n\r\n        callback();\r\n    };\r\n\r\n    /**\r\n     * This method stops recording Canvas.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        isRecording = false;\r\n\r\n        var that = this;\r\n\r\n        if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\r\n            mediaStreamRecorder.stop(callback);\r\n            return;\r\n        }\r\n\r\n        this.getWebPImages(function() {\r\n            /**\r\n             * @property {Blob} blob - Recorded frames in video/webm blob.\r\n             * @memberof CanvasRecorder\r\n             * @example\r\n             * recorder.stop(function() {\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            whammy.compile(function(blob) {\r\n                if (!config.disableLogs) {\r\n                    console.log('Recording finished!');\r\n                }\r\n\r\n                that.blob = blob;\r\n\r\n                if (that.blob.forEach) {\r\n                    that.blob = new Blob([], {\r\n                        type: 'video/webm'\r\n                    });\r\n                }\r\n\r\n                if (callback) {\r\n                    callback(that.blob);\r\n                }\r\n\r\n                whammy.frames = [];\r\n            });\r\n        });\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.pause();\r\n            return;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.resume();\r\n            return;\r\n        }\r\n\r\n        if (!isRecording) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (isRecording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isRecording = false;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'CanvasRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    function cloneCanvas() {\r\n        //create a new canvas\r\n        var newCanvas = document.createElement('canvas');\r\n        var context = newCanvas.getContext('2d');\r\n\r\n        //set dimensions\r\n        newCanvas.width = htmlElement.width;\r\n        newCanvas.height = htmlElement.height;\r\n\r\n        //apply the old canvas to the new one\r\n        context.drawImage(htmlElement, 0, 0);\r\n\r\n        //return the new canvas\r\n        return newCanvas;\r\n    }\r\n\r\n    function drawCanvasFrame() {\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawCanvasFrame, 500);\r\n        }\r\n\r\n        if (htmlElement.nodeName.toLowerCase() === 'canvas') {\r\n            var duration = new Date().getTime() - lastTime;\r\n            // via #206, by Jack i.e. @Seymourr\r\n            lastTime = new Date().getTime();\r\n\r\n            whammy.frames.push({\r\n                image: cloneCanvas(),\r\n                duration: duration\r\n            });\r\n\r\n            if (isRecording) {\r\n                setTimeout(drawCanvasFrame, config.frameInterval);\r\n            }\r\n            return;\r\n        }\r\n\r\n        html2canvas(htmlElement, {\r\n            grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\r\n            onrendered: function(canvas) {\r\n                var duration = new Date().getTime() - lastTime;\r\n                if (!duration) {\r\n                    return setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n\r\n                // via #206, by Jack i.e. @Seymourr\r\n                lastTime = new Date().getTime();\r\n\r\n                whammy.frames.push({\r\n                    image: canvas.toDataURL('image/webp', 1),\r\n                    duration: duration\r\n                });\r\n\r\n                if (isRecording) {\r\n                    setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    var lastTime = new Date().getTime();\r\n\r\n    var whammy = new Whammy.Video(100);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.CanvasRecorder = CanvasRecorder;\r\n}\n\r\n// _________________\r\n// WhammyRecorder.js\r\n\r\n/**\r\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\r\n * @summary Video recording feature in Chrome.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WhammyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WhammyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction WhammyRecorder(mediaStream, config) {\r\n\r\n    config = config || {};\r\n\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('Using frames-interval:', config.frameInterval);\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (!config.width) {\r\n            config.width = 320;\r\n        }\r\n\r\n        if (!config.height) {\r\n            config.height = 240;\r\n        }\r\n\r\n        if (!config.video) {\r\n            config.video = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        if (!config.canvas) {\r\n            config.canvas = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        canvas.width = config.canvas.width || 320;\r\n        canvas.height = config.canvas.height || 240;\r\n\r\n        context = canvas.getContext('2d');\r\n\r\n        // setting defaults\r\n        if (config.video && config.video instanceof HTMLVideoElement) {\r\n            video = config.video.cloneNode();\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        } else {\r\n            video = document.createElement('video');\r\n\r\n            setSrcObject(mediaStream, video);\r\n\r\n            video.onloadedmetadata = function() { // \"onloadedmetadata\" may NOT work in FF?\r\n                if (config.initCallback) {\r\n                    config.initCallback();\r\n                }\r\n            };\r\n\r\n            video.width = config.video.width;\r\n            video.height = config.video.height;\r\n        }\r\n\r\n        video.muted = true;\r\n        video.play();\r\n\r\n        lastTime = new Date().getTime();\r\n        whammy = new Whammy.Video();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('canvas resolutions', canvas.width, '*', canvas.height);\r\n            console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\r\n        }\r\n\r\n        drawFrames(config.frameInterval);\r\n    };\r\n\r\n    /**\r\n     * Draw and push frames to Whammy\r\n     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\r\n     */\r\n    function drawFrames(frameInterval) {\r\n        frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\r\n\r\n        var duration = new Date().getTime() - lastTime;\r\n        if (!duration) {\r\n            return setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawFrames, 100);\r\n        }\r\n\r\n        // via #206, by Jack i.e. @Seymourr\r\n        lastTime = new Date().getTime();\r\n\r\n        if (video.paused) {\r\n            // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n            // Tweak for Android Chrome\r\n            video.play();\r\n        }\r\n\r\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        whammy.frames.push({\r\n            duration: duration,\r\n            image: canvas.toDataURL('image/webp')\r\n        });\r\n\r\n        if (!isStopDrawing) {\r\n            setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n    }\r\n\r\n    function asyncLoop(o) {\r\n        var i = -1,\r\n            length = o.length;\r\n\r\n        (function loop() {\r\n            i++;\r\n            if (i === length) {\r\n                o.callback();\r\n                return;\r\n            }\r\n\r\n            // \"setTimeout\" added by Jim McLeod\r\n            setTimeout(function() {\r\n                o.functionToLoop(loop, i);\r\n            }, 1);\r\n        })();\r\n    }\r\n\r\n\r\n    /**\r\n     * remove black frames from the beginning to the specified frame\r\n     * @param {Array} _frames - array of frames to be checked\r\n     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\r\n     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\r\n     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\r\n     * @returns {Array} - array of frames\r\n     */\r\n    // pull#293 by @volodalexey\r\n    function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\r\n        var localCanvas = document.createElement('canvas');\r\n        localCanvas.width = canvas.width;\r\n        localCanvas.height = canvas.height;\r\n        var context2d = localCanvas.getContext('2d');\r\n        var resultFrames = [];\r\n\r\n        var checkUntilNotBlack = _framesToCheck === -1;\r\n        var endCheckFrame = (_framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length) ?\r\n            _framesToCheck : _frames.length;\r\n        var sampleColor = {\r\n            r: 0,\r\n            g: 0,\r\n            b: 0\r\n        };\r\n        var maxColorDifference = Math.sqrt(\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2)\r\n        );\r\n        var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\r\n        var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\r\n        var doNotCheckNext = false;\r\n\r\n        asyncLoop({\r\n            length: endCheckFrame,\r\n            functionToLoop: function(loop, f) {\r\n                var matchPixCount, endPixCheck, maxPixCount;\r\n\r\n                var finishImage = function() {\r\n                    if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\r\n                        // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\r\n                    } else {\r\n                        // console.log('frame is passed : ' + f);\r\n                        if (checkUntilNotBlack) {\r\n                            doNotCheckNext = true;\r\n                        }\r\n                        resultFrames.push(_frames[f]);\r\n                    }\r\n                    loop();\r\n                };\r\n\r\n                if (!doNotCheckNext) {\r\n                    var image = new Image();\r\n                    image.onload = function() {\r\n                        context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n                        var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\r\n                        matchPixCount = 0;\r\n                        endPixCheck = imageData.data.length;\r\n                        maxPixCount = imageData.data.length / 4;\r\n\r\n                        for (var pix = 0; pix < endPixCheck; pix += 4) {\r\n                            var currentColor = {\r\n                                r: imageData.data[pix],\r\n                                g: imageData.data[pix + 1],\r\n                                b: imageData.data[pix + 2]\r\n                            };\r\n                            var colorDifference = Math.sqrt(\r\n                                Math.pow(currentColor.r - sampleColor.r, 2) +\r\n                                Math.pow(currentColor.g - sampleColor.g, 2) +\r\n                                Math.pow(currentColor.b - sampleColor.b, 2)\r\n                            );\r\n                            // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\r\n                            if (colorDifference <= maxColorDifference * pixTolerance) {\r\n                                matchPixCount++;\r\n                            }\r\n                        }\r\n                        finishImage();\r\n                    };\r\n                    image.src = _frames[f].image;\r\n                } else {\r\n                    finishImage();\r\n                }\r\n            },\r\n            callback: function() {\r\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\r\n\r\n                if (resultFrames.length <= 0) {\r\n                    // at least one last frame should be available for next manipulation\r\n                    // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\r\n                    resultFrames.push(_frames[_frames.length - 1]);\r\n                }\r\n                callback(resultFrames);\r\n            }\r\n        });\r\n    }\r\n\r\n    var isStopDrawing = false;\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        isStopDrawing = true;\r\n\r\n        var _this = this;\r\n        // analyse of all frames takes some time!\r\n        setTimeout(function() {\r\n            // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\r\n            // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\r\n            // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\r\n            dropBlackFrames(whammy.frames, -1, null, null, function(frames) {\r\n                whammy.frames = frames;\r\n\r\n                // to display advertisement images!\r\n                if (config.advertisement && config.advertisement.length) {\r\n                    whammy.frames = config.advertisement.concat(whammy.frames);\r\n                }\r\n\r\n                /**\r\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\r\n                 * @memberof WhammyRecorder\r\n                 * @example\r\n                 * recorder.stop(function() {\r\n                 *     var blob = recorder.blob;\r\n                 * });\r\n                 */\r\n                whammy.compile(function(blob) {\r\n                    _this.blob = blob;\r\n\r\n                    if (_this.blob.forEach) {\r\n                        _this.blob = new Blob([], {\r\n                            type: 'video/webm'\r\n                        });\r\n                    }\r\n\r\n                    if (callback) {\r\n                        callback(_this.blob);\r\n                    }\r\n                });\r\n            });\r\n        }, 10);\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (isStopDrawing) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (!isStopDrawing) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isStopDrawing = true;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'WhammyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    var video;\r\n    var lastTime;\r\n    var whammy;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WhammyRecorder = WhammyRecorder;\r\n}\n\r\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\r\n// _________\r\n// Whammy.js\r\n\r\n// todo: Firefox now supports webp for webm containers!\r\n// their MediaRecorder implementation works well!\r\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\r\n\r\n/**\r\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\r\n * @summary A real time javascript webm encoder based on a canvas hack.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef Whammy\r\n * @class\r\n * @example\r\n * var recorder = new Whammy().Video(15);\r\n * recorder.add(context || canvas || dataURL);\r\n * var output = recorder.compile();\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Whammy = (function() {\r\n    // a more abstract-ish API\r\n\r\n    function WhammyVideo(duration) {\r\n        this.frames = [];\r\n        this.duration = duration || 1;\r\n        this.quality = 0.8;\r\n    }\r\n\r\n    /**\r\n     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.add(canvas || context || 'image/webp');\r\n     * @param {string} frame - Canvas || Context || image/webp\r\n     * @param {number} duration - Stick a duration (in milliseconds)\r\n     */\r\n    WhammyVideo.prototype.add = function(frame, duration) {\r\n        if ('canvas' in frame) { //CanvasRenderingContext2D\r\n            frame = frame.canvas;\r\n        }\r\n\r\n        if ('toDataURL' in frame) {\r\n            frame = frame.toDataURL('image/webp', this.quality);\r\n        }\r\n\r\n        if (!(/^data:image\\/webp;base64,/ig).test(frame)) {\r\n            throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\r\n        }\r\n        this.frames.push({\r\n            image: frame,\r\n            duration: duration || this.duration\r\n        });\r\n    };\r\n\r\n    function processInWebWorker(_function) {\r\n        var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n            'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(blob);\r\n        URL.revokeObjectURL(blob);\r\n        return worker;\r\n    }\r\n\r\n    function whammyInWebWorker(frames) {\r\n        function ArrayToWebM(frames) {\r\n            var info = checkFrames(frames);\r\n            if (!info) {\r\n                return [];\r\n            }\r\n\r\n            var clusterMaxDuration = 30000;\r\n\r\n            var EBML = [{\r\n                'id': 0x1a45dfa3, // EBML\r\n                'data': [{\r\n                    'data': 1,\r\n                    'id': 0x4286 // EBMLVersion\r\n                }, {\r\n                    'data': 1,\r\n                    'id': 0x42f7 // EBMLReadVersion\r\n                }, {\r\n                    'data': 4,\r\n                    'id': 0x42f2 // EBMLMaxIDLength\r\n                }, {\r\n                    'data': 8,\r\n                    'id': 0x42f3 // EBMLMaxSizeLength\r\n                }, {\r\n                    'data': 'webm',\r\n                    'id': 0x4282 // DocType\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4287 // DocTypeVersion\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4285 // DocTypeReadVersion\r\n                }]\r\n            }, {\r\n                'id': 0x18538067, // Segment\r\n                'data': [{\r\n                    'id': 0x1549a966, // Info\r\n                    'data': [{\r\n                        'data': 1e6, //do things in millisecs (num of nanosecs for duration scale)\r\n                        'id': 0x2ad7b1 // TimecodeScale\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x4d80 // MuxingApp\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x5741 // WritingApp\r\n                    }, {\r\n                        'data': doubleToString(info.duration),\r\n                        'id': 0x4489 // Duration\r\n                    }]\r\n                }, {\r\n                    'id': 0x1654ae6b, // Tracks\r\n                    'data': [{\r\n                        'id': 0xae, // TrackEntry\r\n                        'data': [{\r\n                            'data': 1,\r\n                            'id': 0xd7 // TrackNumber\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x73c5 // TrackUID\r\n                        }, {\r\n                            'data': 0,\r\n                            'id': 0x9c // FlagLacing\r\n                        }, {\r\n                            'data': 'und',\r\n                            'id': 0x22b59c // Language\r\n                        }, {\r\n                            'data': 'V_VP8',\r\n                            'id': 0x86 // CodecID\r\n                        }, {\r\n                            'data': 'VP8',\r\n                            'id': 0x258688 // CodecName\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x83 // TrackType\r\n                        }, {\r\n                            'id': 0xe0, // Video\r\n                            'data': [{\r\n                                'data': info.width,\r\n                                'id': 0xb0 // PixelWidth\r\n                            }, {\r\n                                'data': info.height,\r\n                                'id': 0xba // PixelHeight\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            }];\r\n\r\n            //Generate clusters (max duration)\r\n            var frameNumber = 0;\r\n            var clusterTimecode = 0;\r\n            while (frameNumber < frames.length) {\r\n\r\n                var clusterFrames = [];\r\n                var clusterDuration = 0;\r\n                do {\r\n                    clusterFrames.push(frames[frameNumber]);\r\n                    clusterDuration += frames[frameNumber].duration;\r\n                    frameNumber++;\r\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\r\n\r\n                var clusterCounter = 0;\r\n                var cluster = {\r\n                    'id': 0x1f43b675, // Cluster\r\n                    'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\r\n                }; //Add cluster to segment\r\n                EBML[1].data.push(cluster);\r\n                clusterTimecode += clusterDuration;\r\n            }\r\n\r\n            return generateEBML(EBML);\r\n        }\r\n\r\n        function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\r\n            return [{\r\n                'data': clusterTimecode,\r\n                'id': 0xe7 // Timecode\r\n            }].concat(clusterFrames.map(function(webp) {\r\n                var block = makeSimpleBlock({\r\n                    discardable: 0,\r\n                    frame: webp.data.slice(4),\r\n                    invisible: 0,\r\n                    keyframe: 1,\r\n                    lacing: 0,\r\n                    trackNum: 1,\r\n                    timecode: Math.round(clusterCounter)\r\n                });\r\n                clusterCounter += webp.duration;\r\n                return {\r\n                    data: block,\r\n                    id: 0xa3\r\n                };\r\n            }));\r\n        }\r\n\r\n        // sums the lengths of all the frames and gets the duration\r\n\r\n        function checkFrames(frames) {\r\n            if (!frames[0]) {\r\n                postMessage({\r\n                    error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\r\n                });\r\n                return;\r\n            }\r\n\r\n            var width = frames[0].width,\r\n                height = frames[0].height,\r\n                duration = frames[0].duration;\r\n\r\n            for (var i = 1; i < frames.length; i++) {\r\n                duration += frames[i].duration;\r\n            }\r\n            return {\r\n                duration: duration,\r\n                width: width,\r\n                height: height\r\n            };\r\n        }\r\n\r\n        function numToBuffer(num) {\r\n            var parts = [];\r\n            while (num > 0) {\r\n                parts.push(num & 0xff);\r\n                num = num >> 8;\r\n            }\r\n            return new Uint8Array(parts.reverse());\r\n        }\r\n\r\n        function strToBuffer(str) {\r\n            return new Uint8Array(str.split('').map(function(e) {\r\n                return e.charCodeAt(0);\r\n            }));\r\n        }\r\n\r\n        function bitsToBuffer(bits) {\r\n            var data = [];\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data.push(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return new Uint8Array(data);\r\n        }\r\n\r\n        function generateEBML(json) {\r\n            var ebml = [];\r\n            for (var i = 0; i < json.length; i++) {\r\n                var data = json[i].data;\r\n\r\n                if (typeof data === 'object') {\r\n                    data = generateEBML(data);\r\n                }\r\n\r\n                if (typeof data === 'number') {\r\n                    data = bitsToBuffer(data.toString(2));\r\n                }\r\n\r\n                if (typeof data === 'string') {\r\n                    data = strToBuffer(data);\r\n                }\r\n\r\n                var len = data.size || data.byteLength || data.length;\r\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\r\n                var sizeToString = len.toString(2);\r\n                var padded = (new Array((zeroes * 7 + 7 + 1) - sizeToString.length)).join('0') + sizeToString;\r\n                var size = (new Array(zeroes)).join('0') + '1' + padded;\r\n\r\n                ebml.push(numToBuffer(json[i].id));\r\n                ebml.push(bitsToBuffer(size));\r\n                ebml.push(data);\r\n            }\r\n\r\n            return new Blob(ebml, {\r\n                type: 'video/webm'\r\n            });\r\n        }\r\n\r\n        function toBinStrOld(bits) {\r\n            var data = '';\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function makeSimpleBlock(data) {\r\n            var flags = 0;\r\n\r\n            if (data.keyframe) {\r\n                flags |= 128;\r\n            }\r\n\r\n            if (data.invisible) {\r\n                flags |= 8;\r\n            }\r\n\r\n            if (data.lacing) {\r\n                flags |= (data.lacing << 1);\r\n            }\r\n\r\n            if (data.discardable) {\r\n                flags |= 1;\r\n            }\r\n\r\n            if (data.trackNum > 127) {\r\n                throw 'TrackNumber > 127 not supported';\r\n            }\r\n\r\n            var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).join('') + data.frame;\r\n\r\n            return out;\r\n        }\r\n\r\n        function parseWebP(riff) {\r\n            var VP8 = riff.RIFF[0].WEBP[0];\r\n\r\n            var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\r\n            for (var i = 0, c = []; i < 4; i++) {\r\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\r\n            }\r\n\r\n            var width, height, tmp;\r\n\r\n            //the code below is literally copied verbatim from the bitstream spec\r\n            tmp = (c[1] << 8) | c[0];\r\n            width = tmp & 0x3FFF;\r\n            tmp = (c[3] << 8) | c[2];\r\n            height = tmp & 0x3FFF;\r\n            return {\r\n                width: width,\r\n                height: height,\r\n                data: VP8,\r\n                riff: riff\r\n            };\r\n        }\r\n\r\n        function getStrLength(string, offset) {\r\n            return parseInt(string.substr(offset + 4, 4).split('').map(function(i) {\r\n                var unpadded = i.charCodeAt(0).toString(2);\r\n                return (new Array(8 - unpadded.length + 1)).join('0') + unpadded;\r\n            }).join(''), 2);\r\n        }\r\n\r\n        function parseRIFF(string) {\r\n            var offset = 0;\r\n            var chunks = {};\r\n\r\n            while (offset < string.length) {\r\n                var id = string.substr(offset, 4);\r\n                var len = getStrLength(string, offset);\r\n                var data = string.substr(offset + 4 + 4, len);\r\n                offset += 4 + 4 + len;\r\n                chunks[id] = chunks[id] || [];\r\n\r\n                if (id === 'RIFF' || id === 'LIST') {\r\n                    chunks[id].push(parseRIFF(data));\r\n                } else {\r\n                    chunks[id].push(data);\r\n                }\r\n            }\r\n            return chunks;\r\n        }\r\n\r\n        function doubleToString(num) {\r\n            return [].slice.call(\r\n                new Uint8Array((new Float64Array([num])).buffer), 0).map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).reverse().join('');\r\n        }\r\n\r\n        var webm = new ArrayToWebM(frames.map(function(frame) {\r\n            var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\r\n            webp.duration = frame.duration;\r\n            return webp;\r\n        }));\r\n\r\n        postMessage(webm);\r\n    }\r\n\r\n    /**\r\n     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.compile(function(blob) {\r\n     *    // blob.size - blob.type\r\n     * });\r\n     */\r\n    WhammyVideo.prototype.compile = function(callback) {\r\n        var webWorker = processInWebWorker(whammyInWebWorker);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            if (event.data.error) {\r\n                console.error(event.data.error);\r\n                return;\r\n            }\r\n            callback(event.data);\r\n        };\r\n\r\n        webWorker.postMessage(this.frames);\r\n    };\r\n\r\n    return {\r\n        /**\r\n         * A more abstract-ish API.\r\n         * @method\r\n         * @memberof Whammy\r\n         * @example\r\n         * recorder = new Whammy().Video(0.8, 100);\r\n         * @param {?number} speed - 0.8\r\n         * @param {?number} quality - 100\r\n         */\r\n        Video: WhammyVideo\r\n    };\r\n})();\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Whammy = Whammy;\r\n}\n\r\n// ______________ (indexed-db)\r\n// DiskStorage.js\r\n\r\n/**\r\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\r\n * @summary Writing blobs into IndexedDB.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * DiskStorage.Store({\r\n *     audioBlob: yourAudioBlob,\r\n *     videoBlob: yourVideoBlob,\r\n *     gifBlob  : yourGifBlob\r\n * });\r\n * DiskStorage.Fetch(function(dataURL, type) {\r\n *     if(type === 'audioBlob') { }\r\n *     if(type === 'videoBlob') { }\r\n *     if(type === 'gifBlob')   { }\r\n * });\r\n * // DiskStorage.dataStoreName = 'recordRTC';\r\n * // DiskStorage.onError = function(error) { };\r\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\r\n * @property {function} Store - This method stores blobs in IndexedDB.\r\n * @property {function} onError - This function is invoked for any known/unknown error.\r\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\n\r\nvar DiskStorage = {\r\n    /**\r\n     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.init();\r\n     */\r\n    init: function() {\r\n        var self = this;\r\n\r\n        if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\r\n            console.error('IndexedDB API are not available in this browser.');\r\n            return;\r\n        }\r\n\r\n        var dbVersion = 1;\r\n        var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\r\n            db;\r\n        var request = indexedDB.open(dbName, dbVersion);\r\n\r\n        function createObjectStore(dataBase) {\r\n            dataBase.createObjectStore(self.dataStoreName);\r\n        }\r\n\r\n        function putInDB() {\r\n            var transaction = db.transaction([self.dataStoreName], 'readwrite');\r\n\r\n            if (self.videoBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\r\n            }\r\n\r\n            if (self.gifBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\r\n            }\r\n\r\n            if (self.audioBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\r\n            }\r\n\r\n            function getFromStore(portionName) {\r\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function(event) {\r\n                    if (self.callback) {\r\n                        self.callback(event.target.result, portionName);\r\n                    }\r\n                };\r\n            }\r\n\r\n            getFromStore('audioBlob');\r\n            getFromStore('videoBlob');\r\n            getFromStore('gifBlob');\r\n        }\r\n\r\n        request.onerror = self.onError;\r\n\r\n        request.onsuccess = function() {\r\n            db = request.result;\r\n            db.onerror = self.onError;\r\n\r\n            if (db.setVersion) {\r\n                if (db.version !== dbVersion) {\r\n                    var setVersion = db.setVersion(dbVersion);\r\n                    setVersion.onsuccess = function() {\r\n                        createObjectStore(db);\r\n                        putInDB();\r\n                    };\r\n                } else {\r\n                    putInDB();\r\n                }\r\n            } else {\r\n                putInDB();\r\n            }\r\n        };\r\n        request.onupgradeneeded = function(event) {\r\n            createObjectStore(event.target.result);\r\n        };\r\n    },\r\n    /**\r\n     * This method fetches stored blobs from IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Fetch(function(dataURL, type) {\r\n     *     if(type === 'audioBlob') { }\r\n     *     if(type === 'videoBlob') { }\r\n     *     if(type === 'gifBlob')   { }\r\n     * });\r\n     */\r\n    Fetch: function(callback) {\r\n        this.callback = callback;\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This method stores blobs in IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Store({\r\n     *     audioBlob: yourAudioBlob,\r\n     *     videoBlob: yourVideoBlob,\r\n     *     gifBlob  : yourGifBlob\r\n     * });\r\n     */\r\n    Store: function(config) {\r\n        this.audioBlob = config.audioBlob;\r\n        this.videoBlob = config.videoBlob;\r\n        this.gifBlob = config.gifBlob;\r\n\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This function is invoked for any known/unknown error.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.onError = function(error){\r\n     *     alerot( JSON.stringify(error) );\r\n     * };\r\n     */\r\n    onError: function(error) {\r\n        console.error(JSON.stringify(error, null, '\\t'));\r\n    },\r\n\r\n    /**\r\n     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.dataStoreName = 'recordRTC';\r\n     */\r\n    dataStoreName: 'recordRTC',\r\n    dbName: null\r\n};\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.DiskStorage = DiskStorage;\r\n}\n\r\n// ______________\r\n// GifRecorder.js\r\n\r\n/**\r\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GifRecorder\r\n * @class\r\n * @example\r\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     img.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\r\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\r\n */\r\n\r\nfunction GifRecorder(mediaStream, config) {\r\n    if (typeof GIFEncoder === 'undefined') {\r\n        var script = document.createElement('script');\r\n        script.src = 'https://www.webrtc-experiment.com/gif-recorder.js';\r\n        (document.body || document.documentElement).appendChild(script);\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (typeof GIFEncoder === 'undefined') {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isLoadedMetaData) {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isHTMLObject) {\r\n            if (!config.width) {\r\n                config.width = video.offsetWidth || 320;\r\n            }\r\n\r\n            if (!config.height) {\r\n                config.height = video.offsetHeight || 240;\r\n            }\r\n\r\n            if (!config.video) {\r\n                config.video = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            if (!config.canvas) {\r\n                config.canvas = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            canvas.width = config.canvas.width || 320;\r\n            canvas.height = config.canvas.height || 240;\r\n\r\n            video.width = config.video.width || 320;\r\n            video.height = config.video.height || 240;\r\n        }\r\n\r\n        // external library to record as GIF images\r\n        gifEncoder = new GIFEncoder();\r\n\r\n        // void setRepeat(int iter) \r\n        // Sets the number of times the set of GIF frames should be played. \r\n        // Default is 1; 0 means play indefinitely.\r\n        gifEncoder.setRepeat(0);\r\n\r\n        // void setFrameRate(Number fps) \r\n        // Sets frame rate in frames per second. \r\n        // Equivalent to setDelay(1000/fps).\r\n        // Using \"setDelay\" instead of \"setFrameRate\"\r\n        gifEncoder.setDelay(config.frameRate || 200);\r\n\r\n        // void setQuality(int quality) \r\n        // Sets quality of color quantization (conversion of images to the \r\n        // maximum 256 colors allowed by the GIF specification). \r\n        // Lower values (minimum = 1) produce better colors, \r\n        // but slow processing significantly. 10 is the default, \r\n        // and produces good color mapping at reasonable speeds. \r\n        // Values greater than 20 do not yield significant improvements in speed.\r\n        gifEncoder.setQuality(config.quality || 10);\r\n\r\n        // Boolean start() \r\n        // This writes the GIF Header and returns false if it fails.\r\n        gifEncoder.start();\r\n\r\n        if (typeof config.onGifRecordingStarted === 'function') {\r\n            config.onGifRecordingStarted();\r\n        }\r\n\r\n        startTime = Date.now();\r\n\r\n        function drawVideoFrame(time) {\r\n            if (self.clearedRecordedData === true) {\r\n                return;\r\n            }\r\n\r\n            if (isPausedRecording) {\r\n                return setTimeout(function() {\r\n                    drawVideoFrame(time);\r\n                }, 100);\r\n            }\r\n\r\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n            if (typeof lastFrameTime === undefined) {\r\n                lastFrameTime = time;\r\n            }\r\n\r\n            // ~10 fps\r\n            if (time - lastFrameTime < 90) {\r\n                return;\r\n            }\r\n\r\n            if (!isHTMLObject && video.paused) {\r\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n                // Tweak for Android Chrome\r\n                video.play();\r\n            }\r\n\r\n            if (!isHTMLObject) {\r\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n            }\r\n\r\n            if (config.onGifPreview) {\r\n                config.onGifPreview(canvas.toDataURL('image/png'));\r\n            }\r\n\r\n            gifEncoder.addFrame(context);\r\n            lastFrameTime = time;\r\n        }\r\n\r\n        lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     img.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (lastAnimationFrame) {\r\n            cancelAnimationFrame(lastAnimationFrame);\r\n        }\r\n\r\n        endTime = Date.now();\r\n\r\n        /**\r\n         * @property {Blob} blob - The recorded blob object.\r\n         * @memberof GifRecorder\r\n         * @example\r\n         * recorder.stop(function(){\r\n         *     var blob = recorder.blob;\r\n         * });\r\n         */\r\n        this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\r\n            type: 'image/gif'\r\n        });\r\n\r\n        callback(this.blob);\r\n\r\n        // bug: find a way to clear old recorded blobs\r\n        gifEncoder.stream().bin = [];\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        self.clearedRecordedData = true;\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        if (gifEncoder) {\r\n            gifEncoder.stream().bin = [];\r\n        }\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'GifRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    if (isHTMLObject) {\r\n        if (mediaStream instanceof CanvasRenderingContext2D) {\r\n            context = mediaStream;\r\n            canvas = context.canvas;\r\n        } else if (mediaStream instanceof HTMLCanvasElement) {\r\n            context = mediaStream.getContext('2d');\r\n            canvas = mediaStream;\r\n        }\r\n    }\r\n\r\n    var isLoadedMetaData = true;\r\n\r\n    if (!isHTMLObject) {\r\n        var video = document.createElement('video');\r\n        video.muted = true;\r\n        video.autoplay = true;\r\n        video.playsInline = true;\r\n\r\n        isLoadedMetaData = false;\r\n        video.onloadedmetadata = function() {\r\n            isLoadedMetaData = true;\r\n        };\r\n\r\n        setSrcObject(mediaStream, video);\r\n\r\n        video.play();\r\n    }\r\n\r\n    var lastAnimationFrame = null;\r\n    var startTime, endTime, lastFrameTime;\r\n\r\n    var gifEncoder;\r\n\r\n    var self = this;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.GifRecorder = GifRecorder;\r\n}\n\r\n// Last time updated: 2019-06-21 4:09:42 AM UTC\r\n\r\n// ________________________\r\n// MultiStreamsMixer v1.2.2\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\nfunction MultiStreamsMixer(arrayOfMediaStreams, elementClass) {\r\n\r\n    var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n    (function(that) {\r\n        if (typeof RecordRTC !== 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (!that) {\r\n            return;\r\n        }\r\n\r\n        if (typeof window !== 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (typeof global === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        global.navigator = {\r\n            userAgent: browserFakeUserAgent,\r\n            getUserMedia: function() {}\r\n        };\r\n\r\n        if (!global.console) {\r\n            global.console = {};\r\n        }\r\n\r\n        if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\r\n            global.console.error = global.console.log = global.console.log || function() {\r\n                console.log(arguments);\r\n            };\r\n        }\r\n\r\n        if (typeof document === 'undefined') {\r\n            /*global document:true */\r\n            that.document = {\r\n                documentElement: {\r\n                    appendChild: function() {\r\n                        return '';\r\n                    }\r\n                }\r\n            };\r\n\r\n            document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n                var obj = {\r\n                    getContext: function() {\r\n                        return obj;\r\n                    },\r\n                    play: function() {},\r\n                    pause: function() {},\r\n                    drawImage: function() {},\r\n                    toDataURL: function() {\r\n                        return '';\r\n                    },\r\n                    style: {}\r\n                };\r\n                return obj;\r\n            };\r\n\r\n            that.HTMLVideoElement = function() {};\r\n        }\r\n\r\n        if (typeof location === 'undefined') {\r\n            /*global location:true */\r\n            that.location = {\r\n                protocol: 'file:',\r\n                href: '',\r\n                hash: ''\r\n            };\r\n        }\r\n\r\n        if (typeof screen === 'undefined') {\r\n            /*global screen:true */\r\n            that.screen = {\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        if (typeof URL === 'undefined') {\r\n            /*global screen:true */\r\n            that.URL = {\r\n                createObjectURL: function() {\r\n                    return '';\r\n                },\r\n                revokeObjectURL: function() {\r\n                    return '';\r\n                }\r\n            };\r\n        }\r\n\r\n        /*global window:true */\r\n        that.window = global;\r\n    })(typeof global !== 'undefined' ? global : null);\r\n\r\n    // requires: chrome://flags/#enable-experimental-web-platform-features\r\n\r\n    elementClass = elementClass || 'multi-streams-mixer';\r\n\r\n    var videos = [];\r\n    var isStopDrawingFrames = false;\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    canvas.style.opacity = 0;\r\n    canvas.style.position = 'absolute';\r\n    canvas.style.zIndex = -1;\r\n    canvas.style.top = '-1000em';\r\n    canvas.style.left = '-1000em';\r\n    canvas.className = elementClass;\r\n    (document.body || document.documentElement).appendChild(canvas);\r\n\r\n    this.disableLogs = false;\r\n    this.frameInterval = 10;\r\n\r\n    this.width = 360;\r\n    this.height = 240;\r\n\r\n    // use gain node to prevent echo\r\n    this.useGainNode = true;\r\n\r\n    var self = this;\r\n\r\n    // _____________________________\r\n    // Cross-Browser-Declarations.js\r\n\r\n    // WebAudio API representer\r\n    var AudioContext = window.AudioContext;\r\n\r\n    if (typeof AudioContext === 'undefined') {\r\n        if (typeof webkitAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = webkitAudioContext;\r\n        }\r\n\r\n        if (typeof mozAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = mozAudioContext;\r\n        }\r\n    }\r\n\r\n    /*jshint -W079 */\r\n    var URL = window.URL;\r\n\r\n    if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n        /*global URL:true */\r\n        URL = webkitURL;\r\n    }\r\n\r\n    if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n        if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n        }\r\n\r\n        if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.mozGetUserMedia;\r\n        }\r\n    }\r\n\r\n    var MediaStream = window.MediaStream;\r\n\r\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n        MediaStream = webkitMediaStream;\r\n    }\r\n\r\n    /*global MediaStream:true */\r\n    if (typeof MediaStream !== 'undefined') {\r\n        // override \"stop\" method for all browsers\r\n        if (typeof MediaStream.prototype.stop === 'undefined') {\r\n            MediaStream.prototype.stop = function() {\r\n                this.getTracks().forEach(function(track) {\r\n                    track.stop();\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    var Storage = {};\r\n\r\n    if (typeof AudioContext !== 'undefined') {\r\n        Storage.AudioContext = AudioContext;\r\n    } else if (typeof webkitAudioContext !== 'undefined') {\r\n        Storage.AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    function setSrcObject(stream, element) {\r\n        if ('srcObject' in element) {\r\n            element.srcObject = stream;\r\n        } else if ('mozSrcObject' in element) {\r\n            element.mozSrcObject = stream;\r\n        } else {\r\n            element.srcObject = stream;\r\n        }\r\n    }\r\n\r\n    this.startDrawingFrames = function() {\r\n        drawVideosToCanvas();\r\n    };\r\n\r\n    function drawVideosToCanvas() {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var videosLength = videos.length;\r\n\r\n        var fullcanvas = false;\r\n        var remaining = [];\r\n        videos.forEach(function(video) {\r\n            if (!video.stream) {\r\n                video.stream = {};\r\n            }\r\n\r\n            if (video.stream.fullcanvas) {\r\n                fullcanvas = video;\r\n            } else {\r\n                // todo: video.stream.active or video.stream.live to fix blank frames issues?\r\n                remaining.push(video);\r\n            }\r\n        });\r\n\r\n        if (fullcanvas) {\r\n            canvas.width = fullcanvas.stream.width;\r\n            canvas.height = fullcanvas.stream.height;\r\n        } else if (remaining.length) {\r\n            canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\r\n\r\n            var height = 1;\r\n            if (videosLength === 3 || videosLength === 4) {\r\n                height = 2;\r\n            }\r\n            if (videosLength === 5 || videosLength === 6) {\r\n                height = 3;\r\n            }\r\n            if (videosLength === 7 || videosLength === 8) {\r\n                height = 4;\r\n            }\r\n            if (videosLength === 9 || videosLength === 10) {\r\n                height = 5;\r\n            }\r\n            canvas.height = remaining[0].height * height;\r\n        } else {\r\n            canvas.width = self.width || 360;\r\n            canvas.height = self.height || 240;\r\n        }\r\n\r\n        if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\r\n            drawImage(fullcanvas);\r\n        }\r\n\r\n        remaining.forEach(function(video, idx) {\r\n            drawImage(video, idx);\r\n        });\r\n\r\n        setTimeout(drawVideosToCanvas, self.frameInterval);\r\n    }\r\n\r\n    function drawImage(video, idx) {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var x = 0;\r\n        var y = 0;\r\n        var width = video.width;\r\n        var height = video.height;\r\n\r\n        if (idx === 1) {\r\n            x = video.width;\r\n        }\r\n\r\n        if (idx === 2) {\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 3) {\r\n            x = video.width;\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 4) {\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 5) {\r\n            x = video.width;\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 6) {\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (idx === 7) {\r\n            x = video.width;\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (typeof video.stream.left !== 'undefined') {\r\n            x = video.stream.left;\r\n        }\r\n\r\n        if (typeof video.stream.top !== 'undefined') {\r\n            y = video.stream.top;\r\n        }\r\n\r\n        if (typeof video.stream.width !== 'undefined') {\r\n            width = video.stream.width;\r\n        }\r\n\r\n        if (typeof video.stream.height !== 'undefined') {\r\n            height = video.stream.height;\r\n        }\r\n\r\n        context.drawImage(video, x, y, width, height);\r\n\r\n        if (typeof video.stream.onRender === 'function') {\r\n            video.stream.onRender(context, x, y, width, height, idx);\r\n        }\r\n    }\r\n\r\n    function getMixedStream() {\r\n        isStopDrawingFrames = false;\r\n        var mixedVideoStream = getMixedVideoStream();\r\n\r\n        var mixedAudioStream = getMixedAudioStream();\r\n        if (mixedAudioStream) {\r\n            mixedAudioStream.getTracks().filter(function(t) {\r\n                return t.kind === 'audio';\r\n            }).forEach(function(track) {\r\n                mixedVideoStream.addTrack(track);\r\n            });\r\n        }\r\n\r\n        var fullcanvas;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (stream.fullcanvas) {\r\n                fullcanvas = true;\r\n            }\r\n        });\r\n\r\n        // mixedVideoStream.prototype.appendStreams = appendStreams;\r\n        // mixedVideoStream.prototype.resetVideoStreams = resetVideoStreams;\r\n        // mixedVideoStream.prototype.clearRecordedData = clearRecordedData;\r\n\r\n        return mixedVideoStream;\r\n    }\r\n\r\n    function getMixedVideoStream() {\r\n        resetVideoStreams();\r\n\r\n        var capturedStream;\r\n\r\n        if ('captureStream' in canvas) {\r\n            capturedStream = canvas.captureStream();\r\n        } else if ('mozCaptureStream' in canvas) {\r\n            capturedStream = canvas.mozCaptureStream();\r\n        } else if (!self.disableLogs) {\r\n            console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\r\n        }\r\n\r\n        var videoStream = new MediaStream();\r\n\r\n        capturedStream.getTracks().filter(function(t) {\r\n            return t.kind === 'video';\r\n        }).forEach(function(track) {\r\n            videoStream.addTrack(track);\r\n        });\r\n\r\n        canvas.stream = videoStream;\r\n\r\n        return videoStream;\r\n    }\r\n\r\n    function getMixedAudioStream() {\r\n        // via: @pehrsons\r\n        if (!Storage.AudioContextConstructor) {\r\n            Storage.AudioContextConstructor = new Storage.AudioContext();\r\n        }\r\n\r\n        self.audioContext = Storage.AudioContextConstructor;\r\n\r\n        self.audioSources = [];\r\n\r\n        if (self.useGainNode === true) {\r\n            self.gainNode = self.audioContext.createGain();\r\n            self.gainNode.connect(self.audioContext.destination);\r\n            self.gainNode.gain.value = 0; // don't hear self\r\n        }\r\n\r\n        var audioTracksLength = 0;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (!stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                }).length) {\r\n                return;\r\n            }\r\n\r\n            audioTracksLength++;\r\n\r\n            var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n\r\n            if (self.useGainNode === true) {\r\n                audioSource.connect(self.gainNode);\r\n            }\r\n\r\n            self.audioSources.push(audioSource);\r\n        });\r\n\r\n        if (!audioTracksLength) {\r\n            // because \"self.audioContext\" is not initialized\r\n            // that's why we've to ignore rest of the code\r\n            return;\r\n        }\r\n\r\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n        self.audioSources.forEach(function(audioSource) {\r\n            audioSource.connect(self.audioDestination);\r\n        });\r\n        return self.audioDestination.stream;\r\n    }\r\n\r\n    function getVideo(stream) {\r\n        var video = document.createElement('video');\r\n\r\n        setSrcObject(stream, video);\r\n\r\n        video.className = elementClass;\r\n\r\n        video.muted = true;\r\n        video.volume = 0;\r\n\r\n        video.width = stream.width || self.width || 360;\r\n        video.height = stream.height || self.height || 240;\r\n\r\n        video.play();\r\n\r\n        return video;\r\n    }\r\n\r\n    this.appendStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        streams.forEach(function(stream) {\r\n            var newStream = new MediaStream();\r\n\r\n            if (stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                }).length) {\r\n                var video = getVideo(stream);\r\n                video.stream = stream;\r\n                videos.push(video);\r\n\r\n                newStream.addTrack(stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                })[0]);\r\n            }\r\n\r\n            if (stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                }).length) {\r\n                var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n                self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n                audioSource.connect(self.audioDestination);\r\n\r\n                newStream.addTrack(self.audioDestination.stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                })[0]);\r\n            }\r\n\r\n            arrayOfMediaStreams.push(newStream);\r\n        });\r\n    };\r\n\r\n    this.releaseStreams = function() {\r\n        videos = [];\r\n        isStopDrawingFrames = true;\r\n\r\n        if (self.gainNode) {\r\n            self.gainNode.disconnect();\r\n            self.gainNode = null;\r\n        }\r\n\r\n        if (self.audioSources.length) {\r\n            self.audioSources.forEach(function(source) {\r\n                source.disconnect();\r\n            });\r\n            self.audioSources = [];\r\n        }\r\n\r\n        if (self.audioDestination) {\r\n            self.audioDestination.disconnect();\r\n            self.audioDestination = null;\r\n        }\r\n\r\n        if (self.audioContext) {\r\n            self.audioContext.close();\r\n        }\r\n\r\n        self.audioContext = null;\r\n\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (canvas.stream) {\r\n            canvas.stream.stop();\r\n            canvas.stream = null;\r\n        }\r\n    };\r\n\r\n    this.resetVideoStreams = function(streams) {\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        resetVideoStreams(streams);\r\n    };\r\n\r\n    function resetVideoStreams(streams) {\r\n        videos = [];\r\n        streams = streams || arrayOfMediaStreams;\r\n\r\n        // via: @adrian-ber\r\n        streams.forEach(function(stream) {\r\n            if (!stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                }).length) {\r\n                return;\r\n            }\r\n\r\n            var video = getVideo(stream);\r\n            video.stream = stream;\r\n            videos.push(video);\r\n        });\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamsMixer';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    this.getMixedStream = getMixedStream;\r\n\r\n}\r\n\r\nif (typeof RecordRTC === 'undefined') {\r\n    if (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n        module.exports = MultiStreamsMixer;\r\n    }\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('MultiStreamsMixer', [], function() {\r\n            return MultiStreamsMixer;\r\n        });\r\n    }\r\n}\n\r\n// ______________________\r\n// MultiStreamRecorder.js\r\n\r\n/*\r\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\r\n */\r\n\r\n/**\r\n * MultiStreamRecorder can record multiple videos in single container.\r\n * @summary Multi-videos recorder.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MultiStreamRecorder\r\n * @class\r\n * @example\r\n * var options = {\r\n *     mimeType: 'video/webm'\r\n * }\r\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\r\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\r\n */\r\n\r\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\r\n    arrayOfMediaStreams = arrayOfMediaStreams || [];\r\n    var self = this;\r\n\r\n    var mixer;\r\n    var mediaRecorder;\r\n\r\n    options = options || {\r\n        elementClass: 'multi-streams-mixer',\r\n        mimeType: 'video/webm',\r\n        video: {\r\n            width: 360,\r\n            height: 240\r\n        }\r\n    };\r\n\r\n    if (!options.frameInterval) {\r\n        options.frameInterval = 10;\r\n    }\r\n\r\n    if (!options.video) {\r\n        options.video = {};\r\n    }\r\n\r\n    if (!options.video.width) {\r\n        options.video.width = 360;\r\n    }\r\n\r\n    if (!options.video.height) {\r\n        options.video.height = 240;\r\n    }\r\n\r\n    /**\r\n     * This method records all MediaStreams.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // github/muaz-khan/MultiStreamsMixer\r\n        mixer = new MultiStreamsMixer(arrayOfMediaStreams, options.elementClass || 'multi-streams-mixer');\r\n\r\n        if (getAllVideoTracks().length) {\r\n            mixer.frameInterval = options.frameInterval || 10;\r\n            mixer.width = options.video.width || 360;\r\n            mixer.height = options.video.height || 240;\r\n            mixer.startDrawingFrames();\r\n        }\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n\r\n        // record using MediaRecorder API\r\n        mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\r\n        mediaRecorder.record();\r\n    };\r\n\r\n    function getAllVideoTracks() {\r\n        var tracks = [];\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            getTracks(stream, 'video').forEach(function(track) {\r\n                tracks.push(track);\r\n            });\r\n        });\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        mediaRecorder.stop(function(blob) {\r\n            self.blob = blob;\r\n\r\n            callback(blob);\r\n\r\n            self.clearRecordedData();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (mixer) {\r\n            mixer.releaseStreams();\r\n            mixer = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add extra media-streams to existing recordings.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.addStreams([newAudioStream, newVideoStream]);\r\n     */\r\n    this.addStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        arrayOfMediaStreams.concat(streams);\r\n\r\n        if (!mediaRecorder || !mixer) {\r\n            return;\r\n        }\r\n\r\n        mixer.appendStreams(streams);\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.resetVideoStreams([newVideo1, newVideo2]);\r\n     */\r\n    this.resetVideoStreams = function(streams) {\r\n        if (!mixer) {\r\n            return;\r\n        }\r\n\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        mixer.resetVideoStreams(streams);\r\n    };\r\n\r\n    /**\r\n     * Returns MultiStreamsMixer\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * let mixer = recorder.getMixer();\r\n     * mixer.appendStreams([newStream]);\r\n     */\r\n    this.getMixer = function() {\r\n        return mixer;\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\r\n}\n\r\n// _____________________\r\n// RecordRTC.promises.js\r\n\r\n/**\r\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\r\n * @summary Promises for {@link RecordRTC}\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCPromisesHandler\r\n * @class\r\n * @example\r\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\r\n * recorder.startRecording()\r\n *         .then(successCB)\r\n *         .catch(errorCB);\r\n * // Note: You can access all RecordRTC API using \"recorder.recordRTC\" e.g. \r\n * recorder.recordRTC.onStateChanged = function(state) {};\r\n * recorder.recordRTC.setRecordingDuration(5000);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction RecordRTCPromisesHandler(mediaStream, options) {\r\n    if (!this) {\r\n        throw 'Use \"new RecordRTCPromisesHandler()\"';\r\n    }\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    var self = this;\r\n\r\n    /**\r\n     * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let internal = recorder.recordRTC.getInternalRecorder();\r\n     * alert(internal instanceof MediaStreamRecorder);\r\n     * recorder.recordRTC.onStateChanged = function(state) {};\r\n     */\r\n    self.recordRTC = new RecordRTC(mediaStream, options);\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.startRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.startRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.startRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method stops the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     var blob = recorder.getBlob();\r\n     * }).catch(errorCB);\r\n     */\r\n    this.stopRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.stopRecording(function(url) {\r\n                    self.blob = self.recordRTC.getBlob();\r\n\r\n                    if (!self.blob || !self.blob.size) {\r\n                        reject('Empty blob.', self.blob);\r\n                        return;\r\n                    }\r\n\r\n                    resolve(url);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.pauseRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.pauseRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.pauseRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.resumeRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.resumeRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.resumeRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns data-url for the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getDataURL().then(function(dataURL) {\r\n     *         window.open(dataURL);\r\n     *     }).catch(errorCB);;\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.getDataURL(function(dataURL) {\r\n                    resolve(dataURL);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getBlob().then(function(blob) {})\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getBlob = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getBlob());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the internal recording object.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let internalRecorder = await recorder.getInternalRecorder();\r\n     * if(internalRecorder instanceof MultiStreamRecorder) {\r\n     *     internalRecorder.addStreams([newAudioStream]);\r\n     *     internalRecorder.resetVideoStreams([screenStream]);\r\n     * }\r\n     * @returns {Object} \r\n     */\r\n    this.getInternalRecorder = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getInternalRecorder());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * await recorder.reset();\r\n     * recorder.startRecording(); // record again\r\n     */\r\n    this.reset = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.reset());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Destroy RecordRTC instance. Clear all recorders and objects.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.destroy().then(successCB).catch(errorCB);\r\n     */\r\n    this.destroy = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.destroy());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get recorder's readonly state.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let state = await recorder.getState();\r\n     * // or\r\n     * recorder.getState().then(state => { console.log(state); })\r\n     * @returns {String} Returns recording state.\r\n     */\r\n    this.getState = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getState());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * await recorder.stopRecording();\r\n     * let blob = recorder.getBlob(); // or \"recorder.recordRTC.blob\"\r\n     * invokeSaveAsDialog(blob);\r\n     */\r\n    this.blob = null;\r\n\r\n    /**\r\n     * RecordRTC version number\r\n     * @property {String} version - Release version number.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @static\r\n     * @readonly\r\n     * @example\r\n     * alert(recorder.version);\r\n     */\r\n    this.version = '5.6.2';\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\r\n}\n\r\n// ______________________\r\n// WebAssemblyRecorder.js\r\n\r\n/**\r\n * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.\r\n * @summary Video recording feature in Chrome, Firefox and maybe Edge.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WebAssemblyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WebAssemblyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024, realtime: true}\r\n */\r\nfunction WebAssemblyRecorder(stream, config) {\r\n    // based on: github.com/GoogleChromeLabs/webm-wasm\r\n\r\n    if (typeof ReadableStream === 'undefined' || typeof WritableStream === 'undefined') {\r\n        // because it fixes readable/writable streams issues\r\n        console.error('Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js');\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    config.width = config.width || 640;\r\n    config.height = config.height || 480;\r\n    config.frameRate = config.frameRate || 30;\r\n    config.bitrate = config.bitrate || 1200;\r\n    config.realtime = config.realtime || true;\r\n\r\n    function createBufferURL(buffer, type) {\r\n        return URL.createObjectURL(new Blob([buffer], {\r\n            type: type || ''\r\n        }));\r\n    }\r\n\r\n    var finished;\r\n\r\n    function cameraStream() {\r\n        return new ReadableStream({\r\n            start: function(controller) {\r\n                var cvs = document.createElement('canvas');\r\n                var video = document.createElement('video');\r\n                var first = true;\r\n                video.srcObject = stream;\r\n                video.muted = true;\r\n                video.height = config.height;\r\n                video.width = config.width;\r\n                video.volume = 0;\r\n                video.onplaying = function() {\r\n                    cvs.width = config.width;\r\n                    cvs.height = config.height;\r\n                    var ctx = cvs.getContext('2d');\r\n                    var frameTimeout = 1000 / config.frameRate;\r\n                    var cameraTimer = setInterval(function f() {\r\n                        if (finished) {\r\n                            clearInterval(cameraTimer);\r\n                            controller.close();\r\n                        }\r\n\r\n                        if (first) {\r\n                            first = false;\r\n                            if (config.onVideoProcessStarted) {\r\n                                config.onVideoProcessStarted();\r\n                            }\r\n                        }\r\n\r\n                        ctx.drawImage(video, 0, 0);\r\n                        if (controller._controlledReadableStream.state !== 'closed') {\r\n                            try {\r\n                                controller.enqueue(\r\n                                    ctx.getImageData(0, 0, config.width, config.height)\r\n                                );\r\n                            } catch (e) {}\r\n                        }\r\n                    }, frameTimeout);\r\n                };\r\n                video.play();\r\n            }\r\n        });\r\n    }\r\n\r\n    var worker;\r\n\r\n    function startRecording(stream, buffer) {\r\n        if (!config.workerPath && !buffer) {\r\n            finished = false;\r\n\r\n            // is it safe to use @latest ?\r\n\r\n            fetch(\r\n                'https://unpkg.com/webm-wasm@latest/dist/webm-worker.js'\r\n            ).then(function(r) {\r\n                r.arrayBuffer().then(function(buffer) {\r\n                    startRecording(stream, buffer);\r\n                });\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!config.workerPath && buffer instanceof ArrayBuffer) {\r\n            var blob = new Blob([buffer], {\r\n                type: 'text/javascript'\r\n            });\r\n            config.workerPath = URL.createObjectURL(blob);\r\n        }\r\n\r\n        if (!config.workerPath) {\r\n            console.error('workerPath parameter is missing.');\r\n        }\r\n\r\n        worker = new Worker(config.workerPath);\r\n\r\n        worker.postMessage(config.webAssemblyPath || 'https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm');\r\n        worker.addEventListener('message', function(event) {\r\n            if (event.data === 'READY') {\r\n                worker.postMessage({\r\n                    width: config.width,\r\n                    height: config.height,\r\n                    bitrate: config.bitrate || 1200,\r\n                    timebaseDen: config.frameRate || 30,\r\n                    realtime: config.realtime\r\n                });\r\n\r\n                cameraStream().pipeTo(new WritableStream({\r\n                    write: function(image) {\r\n                        if (finished) {\r\n                            console.error('Got image, but recorder is finished!');\r\n                            return;\r\n                        }\r\n\r\n                        worker.postMessage(image.data.buffer, [image.data.buffer]);\r\n                    }\r\n                }));\r\n            } else if (!!event.data) {\r\n                if (!isPaused) {\r\n                    arrayOfBuffers.push(event.data);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        arrayOfBuffers = [];\r\n        isPaused = false;\r\n        this.blob = null;\r\n        startRecording(stream);\r\n\r\n        if (typeof config.initCallback === 'function') {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    var isPaused;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPaused = false;\r\n    };\r\n\r\n    function terminate(callback) {\r\n        if (!worker) {\r\n            if (callback) {\r\n                callback();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Wait for null event data to indicate that the encoding is complete\r\n        worker.addEventListener('message', function(event) {\r\n            if (event.data === null) {\r\n                worker.terminate();\r\n                worker = null;\r\n\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            }\r\n        });\r\n\r\n        worker.postMessage(null);\r\n    }\r\n\r\n    var arrayOfBuffers = [];\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        finished = true;\r\n\r\n        var recorder = this;\r\n\r\n        terminate(function() {\r\n            recorder.blob = new Blob(arrayOfBuffers, {\r\n                type: 'video/webm'\r\n            });\r\n\r\n            callback(recorder.blob);\r\n        });\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'WebAssemblyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        arrayOfBuffers = [];\r\n        isPaused = false;\r\n        this.blob = null;\r\n\r\n        // todo: if recording-ON then STOP it first\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - The recorded blob object.\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.stop(function(){\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\r\n    this.blob = null;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WebAssemblyRecorder = WebAssemblyRecorder;\r\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}